import { Static } from "@sinclair/typebox";
import { SafeType } from "../utils/typebox.js";

export const userSchema = SafeType.Object(
    {
        id: SafeType.Integer({
            description:
                "A numeric identifier for a user. Generated by the backend, " +
                "unique and unchangeable.",
        }),
        username: SafeType.String({
            minLength: 3,
            maxLength: 20,
            description:
                "The id to display to users. They must be unique, but the " +
                "users can choose and change them.",
        }),
        email: SafeType.String({
            pattern: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}$/.source,
            maxLength: 254,
            description: "The user's email.",
        }),
        password: SafeType.String({
            minLength: 3,
            maxLength: 20,
            description: "A password.",
        }),
        spotifyId: SafeType.String({
            description:
                "The user's id to use to connect with spotify services. " +
                "It is not stored within the database, but some request " +
                "need it to function.",
        }),
        profilePictureId: SafeType.Integer({
            description:
                "The id to the profile picture of the user. " +
                "These pictures cannot be uploaded, we store the " +
                "options manually.",
        }),
        name: SafeType.String({
            maxLength: 25,
            minLength: 3,
            description:
                "The user's display name. It does not need to be unique.",
        }),
    },
    {
        $id: "UserSchema",
        title: "userSchema",
    }
);

export const jwtTokenSchema = SafeType.Object(
    {
        jwtToken: SafeType.String({
            description:
                "The 'encrypted' jwt token. It is easily decryptable, " +
                "so no sensitive information is stored there.",
        }),
    },
    {
        description: "A token which will serve to authenticate a user.",
        $id: "jwtToken"
    }
);

/** Use this schema to assert the contents of the jwt token. */
export const jwtTokenContentSchema = SafeType.Pick(userSchema, ["id"]);

export type JwtTokenContent = Static<typeof jwtTokenContentSchema>;

export type User = Static<typeof userSchema>;
