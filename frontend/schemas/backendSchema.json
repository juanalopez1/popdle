{
    "openapi": "3.0.0",
    "info": {
        "title": "Melodle API",
        "description": "---\n## Documentation for Melodle's devs.\n```(\n AAAAAaaaaaaaa!\n              (   ()   )\n    ) ________    //  )\n ()  |\\       \\  //\n( \\\\__ \\ ______\\//\n   \\__) |       |\n     |  |       |\n      \\ |       |\n       \\|_______|\n       //    \\\\\n      ((     ||\n       \\\\    ||\n     ( ()    ||\n      (      () ) )\n```",
        "version": "0.1.0"
    },
    "components": {
        "securitySchemes": {
            "bearerAuth": {
                "type": "http",
                "scheme": "bearer",
                "bearerFormat": "JWT"
            }
        },
        "schemas": {
            "def-0": {
                "title": "userSchema",
                "type": "object",
                "properties": {
                    "id": {
                        "description": "A numeric identifier for a user. Generated by the backend, unique and unchangeable.",
                        "type": "integer"
                    },
                    "username": {
                        "pattern": "^[a-zA-Z0-9.-_]+$",
                        "minLength": 3,
                        "maxLength": 20,
                        "description": "The id to display to users. They must be unique, but the users can choose and change them.\n### Rules\n- Only accepts letters, digits and '.', '-', '_'.",
                        "type": "string"
                    },
                    "email": {
                        "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$",
                        "maxLength": 254,
                        "description": "The user's email.",
                        "type": "string"
                    },
                    "password": {
                        "minLength": 3,
                        "maxLength": 20,
                        "description": "A password.",
                        "type": "string"
                    },
                    "spotifyId": {
                        "description": "The user's id to use to connect with spotify services. It is not stored within the database, but some requests need it to function.",
                        "type": "string"
                    },
                    "profilePictureId": {
                        "description": "The id to the profile picture of the user. These pictures cannot be uploaded, we store the options manually.",
                        "type": "integer"
                    },
                    "favoriteArtists": {
                        "description": "An array of every artist currently favorited by the user.",
                        "type": "array",
                        "items": {
                            "title": "artistSchema",
                            "type": "object",
                            "properties": {
                                "id": {
                                    "description": "A numeric identifier for an artist. Generated by the backend, unique and unchangeable.",
                                    "type": "integer"
                                },
                                "musixmatchArtistId": {
                                    "description": "Identifier for an artist given by MusixMatch",
                                    "type": "string"
                                },
                                "name": {
                                    "description": "Name of the artist, does not have to be unique.",
                                    "type": "string"
                                },
                                "imageUrl": {
                                    "description": "Url to download the artist's portrait image, if available.",
                                    "type": "string"
                                }
                            },
                            "required": ["id", "musixmatchArtistId", "name"]
                        }
                    },
                    "profilePictureFilename": {
                        "description": "File name required to fetch the image from the route to get specific user icons.",
                        "type": "string"
                    },
                    "name": {
                        "minLength": 1,
                        "maxLength": 25,
                        "description": "The user's display name. It does not need to be unique.",
                        "type": "string"
                    }
                },
                "required": [
                    "id",
                    "username",
                    "email",
                    "password",
                    "spotifyId",
                    "profilePictureId",
                    "favoriteArtists",
                    "profilePictureFilename",
                    "name"
                ]
            },
            "def-1": {
                "title": "artistSchema",
                "type": "object",
                "properties": {
                    "id": {
                        "description": "A numeric identifier for an artist. Generated by the backend, unique and unchangeable.",
                        "type": "integer"
                    },
                    "musixmatchArtistId": {
                        "description": "Identifier for an artist given by MusixMatch",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the artist, does not have to be unique.",
                        "type": "string"
                    },
                    "imageUrl": {
                        "description": "Url to download the artist's portrait image, if available.",
                        "type": "string"
                    }
                },
                "required": ["id", "musixmatchArtistId", "name"]
            },
            "def-2": {
                "description": "A token which will serve to authenticate a user.",
                "type": "object",
                "properties": {
                    "jwtToken": {
                        "description": "The 'encrypted' jwt token. It is easily decryptable, so no sensitive information is stored there.",
                        "type": "string"
                    }
                },
                "required": ["jwtToken"],
                "title": "jwtToken",
                "example": {
                    "jwtToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6NCwiaWF0IjoxNzI3NDExODc4fQ.lCYmZF_REl8rYYj1UjJzacXrPCTyjVdA-KsR71xHwQw"
                }
            },
            "def-3": {
                "title": "leaderboardSchema",
                "description": "A leaderboard of melodle users.",
                "type": "object",
                "properties": {
                    "leaderboard": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "allOf": [
                                {
                                    "title": "userSchema",
                                    "type": "object",
                                    "properties": {
                                        "id": {
                                            "description": "A numeric identifier for a user. Generated by the backend, unique and unchangeable.",
                                            "type": "integer"
                                        },
                                        "username": {
                                            "pattern": "^[a-zA-Z0-9.-_]+$",
                                            "minLength": 3,
                                            "maxLength": 20,
                                            "description": "The id to display to users. They must be unique, but the users can choose and change them.\n### Rules\n- Only accepts letters, digits and '.', '-', '_'.",
                                            "type": "string"
                                        },
                                        "name": {
                                            "minLength": 1,
                                            "maxLength": 25,
                                            "description": "The user's display name. It does not need to be unique.",
                                            "type": "string"
                                        },
                                        "profilePictureFilename": {
                                            "description": "File name required to fetch the image from the route to get specific user icons.",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "id",
                                        "username",
                                        "name",
                                        "profilePictureFilename"
                                    ]
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "score": {
                                            "description": "Score calculated by user performance within their games.",
                                            "type": "number"
                                        },
                                        "rank": {
                                            "description": "Players' position ordered from higest to lowest score.",
                                            "type": "integer"
                                        }
                                    },
                                    "required": ["score", "rank"]
                                }
                            ]
                        }
                    }
                },
                "required": ["leaderboard"]
            }
        }
    },
    "paths": {
        "/auth/register/spotify": {
            "get": {
                "tags": [],
                "responses": { "200": { "description": "Default Response" } }
            }
        },
        "/auth/login/spotify": {
            "get": {
                "tags": [],
                "responses": { "200": { "description": "Default Response" } }
            }
        },
        "/": {
            "get": {
                "summary": "Ping!",
                "tags": ["Other"],
                "description": "Route to check whether the service is working.",
                "security": [],
                "responses": {
                    "200": {
                        "description": "Default Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "root": { "type": "boolean" },
                                        "ping": {
                                            "type": "string",
                                            "enum": ["Pong!"]
                                        }
                                    },
                                    "required": ["root", "ping"]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/artists/{artistMusixMatchId}": {
            "get": {
                "summary": "Get information about an artist",
                "tags": ["Artists"],
                "parameters": [
                    {
                        "schema": { "type": "string" },
                        "in": "path",
                        "name": "artistMusixMatchId",
                        "required": true,
                        "description": "Identifier for an artist given by MusixMatch"
                    }
                ],
                "security": [],
                "responses": {
                    "200": {
                        "description": "Default Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "title": "artistSchema",
                                    "type": "object",
                                    "properties": {
                                        "name": {
                                            "description": "Name of the artist, does not have to be unique.",
                                            "type": "string"
                                        },
                                        "musixmatchArtistId": {
                                            "description": "Identifier for an artist given by MusixMatch",
                                            "type": "string"
                                        },
                                        "imageUrl": {
                                            "description": "Url to download the artist's portrait image, if available.",
                                            "type": "string"
                                        }
                                    },
                                    "required": ["name", "musixmatchArtistId"]
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "notFound",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "notFound",
                                    "additionalProperties": true,
                                    "type": "object",
                                    "properties": {
                                        "statusCode": {
                                            "type": "number",
                                            "enum": [404]
                                        },
                                        "error": { "type": "string" },
                                        "message": { "type": "string" }
                                    },
                                    "required": [
                                        "statusCode",
                                        "error",
                                        "message"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/artists/artistName": {
            "get": {
                "summary": "Search for artists by name",
                "tags": ["Artists"],
                "description": "Search for artists based on the query provided in the querystring.",
                "parameters": [
                    {
                        "schema": { "maxLength": 200, "type": "string" },
                        "in": "query",
                        "name": "query",
                        "required": true
                    }
                ],
                "security": [],
                "responses": {
                    "200": {
                        "description": "Default Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "title": "artistSchema",
                                        "type": "object",
                                        "properties": {
                                            "musixmatchArtistId": {
                                                "description": "Identifier for an artist given by MusixMatch",
                                                "type": "string"
                                            },
                                            "name": {
                                                "description": "Name of the artist, does not have to be unique.",
                                                "type": "string"
                                            },
                                            "imageUrl": {
                                                "description": "Url to download the artist's portrait image, if available.",
                                                "type": "string"
                                            }
                                        },
                                        "required": [
                                            "musixmatchArtistId",
                                            "name"
                                        ]
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/artists/search": {
            "get": {
                "summary": "Search for available artists.",
                "tags": ["Artists"],
                "description": "We use a custom algorithm to determine which artists are most relevant, based off the query in the querystring.",
                "parameters": [
                    {
                        "schema": { "maxLength": 500, "type": "string" },
                        "in": "query",
                        "name": "query",
                        "required": true
                    }
                ],
                "security": [],
                "responses": {
                    "200": {
                        "description": "Default Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "title": "artistSchema",
                                        "type": "object",
                                        "properties": {
                                            "musixmatchArtistId": {
                                                "description": "Identifier for an artist given by MusixMatch",
                                                "type": "string"
                                            },
                                            "name": {
                                                "description": "Name of the artist, does not have to be unique.",
                                                "type": "string"
                                            },
                                            "imageUrl": {
                                                "description": "Url to download the artist's portrait image, if available.",
                                                "type": "string"
                                            }
                                        },
                                        "required": [
                                            "musixmatchArtistId",
                                            "name"
                                        ]
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/leaderboards/": {
            "get": {
                "summary": "Fetches global leaderboard information.",
                "tags": ["Leaderboards"],
                "parameters": [
                    {
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "pattern": "^(Guess Line|Guess Song)$"
                            }
                        },
                        "in": "query",
                        "name": "gameModes",
                        "required": true
                    },
                    {
                        "schema": { "type": "integer" },
                        "in": "query",
                        "name": "start",
                        "required": true,
                        "description": "States when a range starts."
                    },
                    {
                        "schema": { "maximum": 50, "type": "integer" },
                        "in": "query",
                        "name": "amount",
                        "required": true,
                        "description": "A number which defines range size."
                    }
                ],
                "security": [],
                "responses": {
                    "200": {
                        "description": "A leaderboard of melodle users.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "title": "leaderboardSchema",
                                    "description": "A leaderboard of melodle users.",
                                    "type": "object",
                                    "properties": {
                                        "leaderboard": {
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "allOf": [
                                                    {
                                                        "title": "userSchema",
                                                        "type": "object",
                                                        "properties": {
                                                            "id": {
                                                                "description": "A numeric identifier for a user. Generated by the backend, unique and unchangeable.",
                                                                "type": "integer"
                                                            },
                                                            "username": {
                                                                "pattern": "^[a-zA-Z0-9.-_]+$",
                                                                "minLength": 3,
                                                                "maxLength": 20,
                                                                "description": "The id to display to users. They must be unique, but the users can choose and change them.\n### Rules\n- Only accepts letters, digits and '.', '-', '_'.",
                                                                "type": "string"
                                                            },
                                                            "name": {
                                                                "minLength": 1,
                                                                "maxLength": 25,
                                                                "description": "The user's display name. It does not need to be unique.",
                                                                "type": "string"
                                                            },
                                                            "profilePictureFilename": {
                                                                "description": "File name required to fetch the image from the route to get specific user icons.",
                                                                "type": "string"
                                                            }
                                                        },
                                                        "required": [
                                                            "id",
                                                            "username",
                                                            "name",
                                                            "profilePictureFilename"
                                                        ]
                                                    },
                                                    {
                                                        "type": "object",
                                                        "properties": {
                                                            "score": {
                                                                "description": "Score calculated by user performance within their games.",
                                                                "type": "number"
                                                            },
                                                            "rank": {
                                                                "description": "Players' position ordered from higest to lowest score.",
                                                                "type": "integer"
                                                            }
                                                        },
                                                        "required": [
                                                            "score",
                                                            "rank"
                                                        ]
                                                    }
                                                ]
                                            }
                                        }
                                    },
                                    "required": ["leaderboard"]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/debug/snapshot": {
            "get": {
                "summary": "Get current state of application.",
                "tags": ["TODO Schema", "Debug"],
                "security": [],
                "responses": {
                    "200": {
                        "description": "Default Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "users": {
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "name": {
                                                        "minLength": 1,
                                                        "maxLength": 25,
                                                        "description": "The user's display name. It does not need to be unique.",
                                                        "type": "string"
                                                    },
                                                    "email": {
                                                        "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$",
                                                        "maxLength": 254,
                                                        "description": "The user's email.",
                                                        "type": "string"
                                                    },
                                                    "username": {
                                                        "pattern": "^[a-zA-Z0-9.-_]+$",
                                                        "minLength": 3,
                                                        "maxLength": 20,
                                                        "description": "The id to display to users. They must be unique, but the users can choose and change them.\n### Rules\n- Only accepts letters, digits and '.', '-', '_'.",
                                                        "type": "string"
                                                    },
                                                    "profilePictureId": {
                                                        "description": "The id to the profile picture of the user. These pictures cannot be uploaded, we store the options manually.",
                                                        "type": "integer"
                                                    },
                                                    "spotifyId": {
                                                        "description": "The user's id to use to connect with spotify services. It is not stored within the database, but some requests need it to function.",
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "name",
                                                    "email",
                                                    "username",
                                                    "profilePictureId"
                                                ]
                                            }
                                        },
                                        "friends": {
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "friendUsername": {
                                                        "pattern": "^[a-zA-Z0-9.-_]+$",
                                                        "minLength": 3,
                                                        "maxLength": 20,
                                                        "description": "The id to display to users. They must be unique, but the users can choose and change them.\n### Rules\n- Only accepts letters, digits and '.', '-', '_'.",
                                                        "type": "string"
                                                    },
                                                    "userUsername": {
                                                        "pattern": "^[a-zA-Z0-9.-_]+$",
                                                        "minLength": 3,
                                                        "maxLength": 20,
                                                        "description": "The id to display to users. They must be unique, but the users can choose and change them.\n### Rules\n- Only accepts letters, digits and '.', '-', '_'.",
                                                        "type": "string"
                                                    },
                                                    "createdAt": {
                                                        "format": "date-time",
                                                        "type": "string"
                                                    },
                                                    "status": {
                                                        "type": "string",
                                                        "pattern": "^(pending|blocked|accepted)$"
                                                    }
                                                },
                                                "required": [
                                                    "friendUsername",
                                                    "userUsername",
                                                    "createdAt",
                                                    "status"
                                                ]
                                            }
                                        }
                                    },
                                    "required": ["users", "friends"]
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "summary": "Reset the application state to a certain snapshot.",
                "tags": ["TODO Schema", "Debug"],
                "security": [],
                "responses": {
                    "200": {
                        "description": "Default Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string",
                                    "enum": ["TODO!"]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/public/icons/{filename}": {
            "get": {
                "summary": "Get a user icon.",
                "tags": ["Static"],
                "description": "Get the svg for a certain user icon. The selection of user icons is fixed.",
                "parameters": [
                    {
                        "schema": {
                            "type": "string",
                            "pattern": "^(abstract-1\\.svg|abstract-10\\.svg|abstract-11\\.svg|abstract-2\\.svg|abstract-3\\.svg|abstract-4\\.svg|abstract-5\\.svg|abstract-6\\.svg|abstract-7\\.svg|abstract-8\\.svg|abstract-9\\.svg|default\\.svg)$"
                        },
                        "in": "path",
                        "name": "filename",
                        "required": true
                    }
                ],
                "security": [],
                "responses": {
                    "200": {
                        "description": "Default Response",
                        "content": {
                            "image/svg+xml": {
                                "schema": {
                                    "description": "An svg file.",
                                    "type": "string",
                                    "format": "binary"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "notFound",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "notFound",
                                    "additionalProperties": true,
                                    "type": "object",
                                    "properties": {
                                        "statusCode": {
                                            "type": "number",
                                            "enum": [404]
                                        },
                                        "error": { "type": "string" },
                                        "message": { "type": "string" }
                                    },
                                    "required": [
                                        "statusCode",
                                        "error",
                                        "message"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/public/icons": {
            "get": {
                "summary": "Get information about all user icons.",
                "tags": ["Static"],
                "security": [],
                "responses": {
                    "200": {
                        "description": "Default Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "description": "Information to identify and describe an icon.",
                                        "type": "object",
                                        "properties": {
                                            "id": {
                                                "description": "Identifier for the icon.",
                                                "type": "integer"
                                            },
                                            "filename": {
                                                "description": "File name required to fetch the image from the route to get specific user icons.",
                                                "type": "string"
                                            }
                                        },
                                        "required": ["id", "filename"]
                                    }
                                },
                                "example": [
                                    { "id": 1, "filename": "abstract-1.svg" },
                                    { "id": 2, "filename": "abstract-10.svg" },
                                    { "id": 3, "filename": "abstract-11.svg" },
                                    { "id": 4, "filename": "abstract-2.svg" },
                                    { "id": 5, "filename": "abstract-3.svg" },
                                    { "id": 6, "filename": "abstract-4.svg" },
                                    { "id": 7, "filename": "abstract-5.svg" },
                                    { "id": 8, "filename": "abstract-6.svg" },
                                    { "id": 9, "filename": "abstract-7.svg" },
                                    { "id": 10, "filename": "abstract-8.svg" },
                                    { "id": 11, "filename": "abstract-9.svg" },
                                    { "id": 12, "filename": "default.svg" }
                                ]
                            }
                        }
                    }
                }
            }
        },
        "/lyrics/{trackMusixMatchId}": {
            "get": {
                "summary": "Get lyrics for a specific track",
                "tags": ["Lyrics"],
                "description": "This endpoint retrieves the lyrics for a given track using its Musixmatch ID",
                "parameters": [
                    {
                        "schema": { "type": "string" },
                        "in": "path",
                        "name": "trackMusixMatchId",
                        "required": true,
                        "description": "Identifier for the track provided by MusixMatch."
                    }
                ],
                "security": [],
                "responses": {
                    "200": {
                        "description": "Default Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "title": "lyricSchema",
                                    "type": "object",
                                    "properties": {
                                        "lyricsId": {
                                            "description": "Identifier for the lyrics provided by MusixMatch.",
                                            "type": "string"
                                        },
                                        "trackId": {
                                            "description": "Identifier for the track associated with these lyrics on MusixMatch.",
                                            "type": "string"
                                        },
                                        "lyricsBody": {
                                            "description": "The full lyrics of the track.",
                                            "type": "string"
                                        },
                                        "explicit": {
                                            "description": "Indicates if the lyrics contain explicit content.",
                                            "type": "boolean"
                                        },
                                        "language": {
                                            "description": "The language in which the lyrics are written.",
                                            "type": "string"
                                        },
                                        "copyright": {
                                            "description": "Copyright information for the lyrics, if available.",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "lyricsId",
                                        "trackId",
                                        "lyricsBody",
                                        "explicit",
                                        "language"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/{userId}": {
            "get": {
                "summary": "Get public information from some user.",
                "tags": ["User"],
                "description": "Authentication is not needed to see public user information.",
                "parameters": [
                    {
                        "schema": { "type": "integer" },
                        "in": "path",
                        "name": "userId",
                        "required": true,
                        "description": "A numeric identifier for a user. Generated by the backend, unique and unchangeable."
                    }
                ],
                "security": [],
                "responses": {
                    "200": {
                        "description": "Default Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "title": "userSchema",
                                    "type": "object",
                                    "properties": {
                                        "name": {
                                            "minLength": 1,
                                            "maxLength": 25,
                                            "description": "The user's display name. It does not need to be unique.",
                                            "type": "string"
                                        },
                                        "username": {
                                            "pattern": "^[a-zA-Z0-9.-_]+$",
                                            "minLength": 3,
                                            "maxLength": 20,
                                            "description": "The id to display to users. They must be unique, but the users can choose and change them.\n### Rules\n- Only accepts letters, digits and '.', '-', '_'.",
                                            "type": "string"
                                        },
                                        "profilePictureFilename": {
                                            "description": "File name required to fetch the image from the route to get specific user icons.",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "name",
                                        "username",
                                        "profilePictureFilename"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/search": {
            "get": {
                "summary": "Search users through their public information.",
                "tags": ["User"],
                "parameters": [
                    {
                        "schema": {
                            "minLength": 3,
                            "maxLength": 100,
                            "type": "string"
                        },
                        "in": "query",
                        "name": "query",
                        "required": true,
                        "description": "Query to be used to search for users in the database."
                    }
                ],
                "security": [],
                "responses": {
                    "200": {
                        "description": "An array of near-matches, sorted from most relevant to least.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "maxItems": 50,
                                    "description": "An array of near-matches, sorted from most relevant to least.",
                                    "type": "array",
                                    "items": {
                                        "title": "userSchema",
                                        "type": "object",
                                        "properties": {
                                            "username": {
                                                "pattern": "^[a-zA-Z0-9.-_]+$",
                                                "minLength": 3,
                                                "maxLength": 20,
                                                "description": "The id to display to users. They must be unique, but the users can choose and change them.\n### Rules\n- Only accepts letters, digits and '.', '-', '_'.",
                                                "type": "string"
                                            },
                                            "name": {
                                                "minLength": 1,
                                                "maxLength": 25,
                                                "description": "The user's display name. It does not need to be unique.",
                                                "type": "string"
                                            },
                                            "profilePictureFilename": {
                                                "description": "File name required to fetch the image from the route to get specific user icons.",
                                                "type": "string"
                                            },
                                            "id": {
                                                "description": "A numeric identifier for a user. Generated by the backend, unique and unchangeable.",
                                                "type": "integer"
                                            }
                                        },
                                        "required": [
                                            "username",
                                            "name",
                                            "profilePictureFilename",
                                            "id"
                                        ]
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/check": {
            "get": {
                "summary": "Check if some user data already exists",
                "tags": ["User"],
                "parameters": [
                    {
                        "schema": {
                            "pattern": "^[a-zA-Z0-9.-_]+$",
                            "minLength": 3,
                            "maxLength": 20,
                            "type": "string"
                        },
                        "in": "query",
                        "name": "username",
                        "required": false,
                        "description": "The id to display to users. They must be unique, but the users can choose and change them.\n### Rules\n- Only accepts letters, digits and '.', '-', '_'."
                    },
                    {
                        "schema": {
                            "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$",
                            "maxLength": 254,
                            "type": "string"
                        },
                        "in": "query",
                        "name": "email",
                        "required": false,
                        "description": "The user's email."
                    }
                ],
                "security": [],
                "responses": {
                    "200": {
                        "description": "Default Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "usernameExists": { "type": "boolean" },
                                        "emailExists": { "type": "boolean" }
                                    },
                                    "required": [
                                        "usernameExists",
                                        "emailExists"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/debug/fake/user": {
            "get": {
                "summary": "Returns random, believable credentials for a user.",
                "tags": ["Debug", "User"],
                "description": "All fake users have Fake123! as their password.",
                "security": [],
                "responses": {
                    "200": {
                        "description": "Default Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "title": "userSchema",
                                    "type": "object",
                                    "properties": {
                                        "name": {
                                            "minLength": 1,
                                            "maxLength": 25,
                                            "description": "The user's display name. It does not need to be unique.",
                                            "type": "string"
                                        },
                                        "email": {
                                            "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$",
                                            "maxLength": 254,
                                            "description": "The user's email.",
                                            "type": "string"
                                        },
                                        "username": {
                                            "pattern": "^[a-zA-Z0-9.-_]+$",
                                            "minLength": 3,
                                            "maxLength": 20,
                                            "description": "The id to display to users. They must be unique, but the users can choose and change them.\n### Rules\n- Only accepts letters, digits and '.', '-', '_'.",
                                            "type": "string"
                                        },
                                        "password": {
                                            "minLength": 3,
                                            "maxLength": 20,
                                            "description": "A password.",
                                            "type": "string"
                                        },
                                        "profilePictureId": {
                                            "description": "The id to the profile picture of the user. These pictures cannot be uploaded, we store the options manually.",
                                            "type": "integer"
                                        }
                                    },
                                    "required": [
                                        "name",
                                        "email",
                                        "username",
                                        "password",
                                        "profilePictureId"
                                    ]
                                },
                                "example": {
                                    "name": "Mrs. Kelli Kautzer I",
                                    "username": "Kelli.Kautzer",
                                    "password": "Fake123!",
                                    "email": "Kelli.Kautzer@yahoo.com",
                                    "profilePictureId": 10
                                }
                            }
                        }
                    }
                }
            }
        },
        "/debug/fake/users": {
            "post": {
                "summary": "Create a certain number of fake users.",
                "tags": ["Debug", "User"],
                "description": "We do not check if the user already exists, so this route may error. On error, we roll back any changes.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "amount": {
                                        "description": "The amount of users to generate.",
                                        "type": "integer"
                                    }
                                },
                                "required": ["amount"]
                            }
                        }
                    },
                    "required": true
                },
                "security": [],
                "responses": {
                    "201": {
                        "description": "Default Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "title": "userSchema",
                                        "type": "object",
                                        "properties": {
                                            "name": {
                                                "minLength": 1,
                                                "maxLength": 25,
                                                "description": "The user's display name. It does not need to be unique.",
                                                "type": "string"
                                            },
                                            "email": {
                                                "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$",
                                                "maxLength": 254,
                                                "description": "The user's email.",
                                                "type": "string"
                                            },
                                            "username": {
                                                "pattern": "^[a-zA-Z0-9.-_]+$",
                                                "minLength": 3,
                                                "maxLength": 20,
                                                "description": "The id to display to users. They must be unique, but the users can choose and change them.\n### Rules\n- Only accepts letters, digits and '.', '-', '_'.",
                                                "type": "string"
                                            },
                                            "password": {
                                                "minLength": 3,
                                                "maxLength": 20,
                                                "description": "A password.",
                                                "type": "string"
                                            },
                                            "profilePictureId": {
                                                "description": "The id to the profile picture of the user. These pictures cannot be uploaded, we store the options manually.",
                                                "type": "integer"
                                            }
                                        },
                                        "required": [
                                            "name",
                                            "email",
                                            "username",
                                            "password",
                                            "profilePictureId"
                                        ]
                                    }
                                },
                                "example": [
                                    {
                                        "name": "Dr. Elsie Osinski DVM",
                                        "username": "Elsie.Osinski",
                                        "password": "Fake123!",
                                        "email": "Elsie_Osinski@yahoo.com",
                                        "profilePictureId": 11
                                    },
                                    {
                                        "name": "Mrs. Darlene Russel DVM",
                                        "username": "Darlene_Russel33",
                                        "password": "Fake123!",
                                        "email": "Darlene.Russel48@yahoo.com",
                                        "profilePictureId": 11
                                    }
                                ]
                            }
                        }
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "summary": "Fetch a user's jwt token.",
                "tags": ["Auth"],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "title": "userSchema",
                                "type": "object",
                                "properties": {
                                    "email": {
                                        "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$",
                                        "maxLength": 254,
                                        "description": "The user's email.",
                                        "type": "string"
                                    },
                                    "password": {
                                        "minLength": 3,
                                        "maxLength": 20,
                                        "description": "A password.",
                                        "type": "string"
                                    }
                                },
                                "required": ["email", "password"]
                            },
                            "example": {
                                "email": "juanaxlopez1@gmail.com",
                                "password": "Juana123!"
                            }
                        }
                    },
                    "required": true
                },
                "security": [],
                "responses": {
                    "200": {
                        "description": "Default Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "jwtToken": {
                                            "description": "The 'encrypted' jwt token. It is easily decryptable, so no sensitive information is stored there.",
                                            "type": "string"
                                        },
                                        "id": {
                                            "description": "A numeric identifier for a user. Generated by the backend, unique and unchangeable.",
                                            "type": "integer"
                                        }
                                    },
                                    "required": ["jwtToken", "id"]
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "notFound",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "notFound",
                                    "additionalProperties": true,
                                    "type": "object",
                                    "properties": {
                                        "statusCode": {
                                            "type": "number",
                                            "enum": [404]
                                        },
                                        "error": { "type": "string" },
                                        "message": { "type": "string" }
                                    },
                                    "required": [
                                        "statusCode",
                                        "error",
                                        "message"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "summary": "Create a user.",
                "tags": ["Auth", "User CRUD", "User"],
                "description": "Creates a new user with the given credentials if possible.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "title": "userSchema",
                                "type": "object",
                                "properties": {
                                    "username": {
                                        "pattern": "^[a-zA-Z0-9.-_]+$",
                                        "minLength": 3,
                                        "maxLength": 20,
                                        "description": "The id to display to users. They must be unique, but the users can choose and change them.\n### Rules\n- Only accepts letters, digits and '.', '-', '_'.",
                                        "type": "string"
                                    },
                                    "profilePictureId": {
                                        "description": "The id to the profile picture of the user. These pictures cannot be uploaded, we store the options manually.",
                                        "type": "integer"
                                    },
                                    "email": {
                                        "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$",
                                        "maxLength": 254,
                                        "description": "The user's email.",
                                        "type": "string"
                                    },
                                    "password": {
                                        "minLength": 3,
                                        "maxLength": 20,
                                        "description": "A password.",
                                        "type": "string"
                                    },
                                    "name": {
                                        "minLength": 1,
                                        "maxLength": 25,
                                        "description": "The user's display name. It does not need to be unique.",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "username",
                                    "profilePictureId",
                                    "email",
                                    "password",
                                    "name"
                                ]
                            },
                            "example": {
                                "username": "juanalopez1",
                                "email": "juanaxlopez1@gmail.com",
                                "name": "juana",
                                "password": "Juana123!",
                                "profilePictureId": 1
                            }
                        }
                    },
                    "required": true
                },
                "security": [],
                "responses": {
                    "200": {
                        "description": "Default Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "jwtToken": {
                                            "description": "The 'encrypted' jwt token. It is easily decryptable, so no sensitive information is stored there.",
                                            "type": "string"
                                        },
                                        "id": {
                                            "description": "A numeric identifier for a user. Generated by the backend, unique and unchangeable.",
                                            "type": "integer"
                                        }
                                    },
                                    "required": ["jwtToken", "id"]
                                },
                                "example": {
                                    "jwtToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6NCwiaWF0IjoxNzI3NDExODc4fQ.lCYmZF_REl8rYYj1UjJzacXrPCTyjVdA-KsR71xHwQw",
                                    "id": 2
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "badRequest",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "badRequest",
                                    "additionalProperties": true,
                                    "type": "object",
                                    "properties": {
                                        "statusCode": {
                                            "type": "number",
                                            "enum": [400]
                                        },
                                        "error": { "type": "string" },
                                        "message": { "type": "string" }
                                    },
                                    "required": [
                                        "statusCode",
                                        "error",
                                        "message"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/auth/login/spotify/callback": {
            "get": {
                "summary": "Login through spotify.",
                "tags": ["Auth", "TODO Schema"],
                "security": [],
                "responses": {
                    "300": {
                        "description": "Default Response",
                        "content": { "application/json": { "schema": {} } }
                    }
                }
            }
        },
        "/auth/register/spotify/callback": {
            "get": {
                "summary": "Register a user through a spotify callback.",
                "tags": ["TODO Schema", "Auth"],
                "description": "The actual url you should use is this one removing /callback\n> !) Eventually this schema will change.",
                "security": [],
                "responses": {
                    "300": {
                        "description": "Default Response",
                        "content": { "application/json": { "schema": {} } }
                    }
                }
            }
        },
        "/users/self/{selfId}": {
            "get": {
                "summary": "Get your user information.",
                "tags": ["User CRUD", "User"],
                "description": "This is the route that exposes the most information about a user.",
                "parameters": [
                    {
                        "schema": { "type": "integer" },
                        "in": "path",
                        "name": "selfId",
                        "required": true,
                        "description": "A numeric identifier for a user. Generated by the backend, unique and unchangeable."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Default Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "username": {
                                            "pattern": "^[a-zA-Z0-9.-_]+$",
                                            "minLength": 3,
                                            "maxLength": 20,
                                            "description": "The id to display to users. They must be unique, but the users can choose and change them.\n### Rules\n- Only accepts letters, digits and '.', '-', '_'.",
                                            "type": "string"
                                        },
                                        "email": {
                                            "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$",
                                            "maxLength": 254,
                                            "description": "The user's email.",
                                            "type": "string"
                                        },
                                        "name": {
                                            "minLength": 1,
                                            "maxLength": 25,
                                            "description": "The user's display name. It does not need to be unique.",
                                            "type": "string"
                                        },
                                        "id": {
                                            "description": "A numeric identifier for a user. Generated by the backend, unique and unchangeable.",
                                            "type": "integer"
                                        },
                                        "profilePictureFile": {
                                            "description": "File name required to fetch the image from the route to get specific user icons.",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "username",
                                        "email",
                                        "name",
                                        "id",
                                        "profilePictureFile"
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "unauthorized",
                                    "additionalProperties": true,
                                    "type": "object",
                                    "properties": {
                                        "statusCode": {
                                            "type": "number",
                                            "enum": [401]
                                        },
                                        "error": { "type": "string" },
                                        "message": { "type": "string" }
                                    },
                                    "required": [
                                        "statusCode",
                                        "error",
                                        "message"
                                    ]
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "summary": "Update your user information.",
                "tags": ["User CRUD", "User"],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "title": "userSchema",
                                "type": "object",
                                "properties": {
                                    "username": {
                                        "pattern": "^[a-zA-Z0-9.-_]+$",
                                        "minLength": 3,
                                        "maxLength": 20,
                                        "description": "The id to display to users. They must be unique, but the users can choose and change them.\n### Rules\n- Only accepts letters, digits and '.', '-', '_'.",
                                        "type": "string"
                                    },
                                    "email": {
                                        "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$",
                                        "maxLength": 254,
                                        "description": "The user's email.",
                                        "type": "string"
                                    },
                                    "name": {
                                        "minLength": 1,
                                        "maxLength": 25,
                                        "description": "The user's display name. It does not need to be unique.",
                                        "type": "string"
                                    },
                                    "password": {
                                        "minLength": 3,
                                        "maxLength": 20,
                                        "description": "A password.",
                                        "type": "string"
                                    },
                                    "profilePictureId": {
                                        "description": "The id to the profile picture of the user. These pictures cannot be uploaded, we store the options manually.",
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "username",
                                    "email",
                                    "name",
                                    "password",
                                    "profilePictureId"
                                ]
                            },
                            "example": {
                                "username": "juanchoTanca",
                                "email": "juanchoTanca@gmail.com",
                                "name": "juancho",
                                "password": "Juancho123!",
                                "profilePictureId": 1
                            }
                        }
                    },
                    "required": true
                },
                "parameters": [
                    {
                        "schema": { "type": "integer" },
                        "in": "path",
                        "name": "selfId",
                        "required": true,
                        "description": "A numeric identifier for a user. Generated by the backend, unique and unchangeable."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Default Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "title": "userSchema",
                                    "type": "object",
                                    "properties": {
                                        "username": {
                                            "pattern": "^[a-zA-Z0-9.-_]+$",
                                            "minLength": 3,
                                            "maxLength": 20,
                                            "description": "The id to display to users. They must be unique, but the users can choose and change them.\n### Rules\n- Only accepts letters, digits and '.', '-', '_'.",
                                            "type": "string"
                                        },
                                        "email": {
                                            "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$",
                                            "maxLength": 254,
                                            "description": "The user's email.",
                                            "type": "string"
                                        },
                                        "name": {
                                            "minLength": 1,
                                            "maxLength": 25,
                                            "description": "The user's display name. It does not need to be unique.",
                                            "type": "string"
                                        },
                                        "password": {
                                            "minLength": 3,
                                            "maxLength": 20,
                                            "description": "A password.",
                                            "type": "string"
                                        },
                                        "profilePictureId": {
                                            "description": "The id to the profile picture of the user. These pictures cannot be uploaded, we store the options manually.",
                                            "type": "integer"
                                        }
                                    },
                                    "required": [
                                        "username",
                                        "email",
                                        "name",
                                        "password",
                                        "profilePictureId"
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "unauthorized",
                                    "additionalProperties": true,
                                    "type": "object",
                                    "properties": {
                                        "statusCode": {
                                            "type": "number",
                                            "enum": [401]
                                        },
                                        "error": { "type": "string" },
                                        "message": { "type": "string" }
                                    },
                                    "required": [
                                        "statusCode",
                                        "error",
                                        "message"
                                    ]
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete your own user and all their associated information.",
                "tags": ["User CRUD"],
                "description": "The cascading deletion will be more thoroughly implemented once other resources are implemented.",
                "parameters": [
                    {
                        "schema": { "type": "integer" },
                        "in": "path",
                        "name": "selfId",
                        "required": true,
                        "description": "A numeric identifier for a user. Generated by the backend, unique and unchangeable."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Default Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "title": "userSchema",
                                    "type": "object",
                                    "properties": {
                                        "username": {
                                            "pattern": "^[a-zA-Z0-9.-_]+$",
                                            "minLength": 3,
                                            "maxLength": 20,
                                            "description": "The id to display to users. They must be unique, but the users can choose and change them.\n### Rules\n- Only accepts letters, digits and '.', '-', '_'.",
                                            "type": "string"
                                        }
                                    },
                                    "required": ["username"]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "unauthorized",
                                    "additionalProperties": true,
                                    "type": "object",
                                    "properties": {
                                        "statusCode": {
                                            "type": "number",
                                            "enum": [401]
                                        },
                                        "error": { "type": "string" },
                                        "message": { "type": "string" }
                                    },
                                    "required": [
                                        "statusCode",
                                        "error",
                                        "message"
                                    ]
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "notFound",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "notFound",
                                    "additionalProperties": true,
                                    "type": "object",
                                    "properties": {
                                        "statusCode": {
                                            "type": "number",
                                            "enum": [404]
                                        },
                                        "error": { "type": "string" },
                                        "message": { "type": "string" }
                                    },
                                    "required": [
                                        "statusCode",
                                        "error",
                                        "message"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/self/{selfId}/configs": {
            "get": {
                "summary": "Get saved user configurations.",
                "tags": ["Game configs"],
                "parameters": [
                    {
                        "schema": { "type": "integer" },
                        "in": "path",
                        "name": "selfId",
                        "required": true,
                        "description": "A numeric identifier for a user. Generated by the backend, unique and unchangeable."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "All configurations from this user.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "All configurations from this user.",
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "id": {
                                                "description": "Unique identifier for a config.",
                                                "type": "integer"
                                            },
                                            "mode": {
                                                "type": "string",
                                                "pattern": "^(Guess Line|Guess Song)$"
                                            },
                                            "onlyFavoriteArtists": {
                                                "description": "Whether to pick from any artist or only favorited ones.",
                                                "type": "boolean"
                                            },
                                            "fromArtists": {
                                                "description": "The artists we can choose from. If empty, it means this filter does not do anything.",
                                                "type": "array",
                                                "items": {
                                                    "title": "artistSchema",
                                                    "type": "object",
                                                    "properties": {
                                                        "musixmatchArtistId": {
                                                            "description": "Identifier for an artist given by MusixMatch",
                                                            "type": "string"
                                                        }
                                                    },
                                                    "required": [
                                                        "musixmatchArtistId"
                                                    ]
                                                }
                                            }
                                        },
                                        "required": [
                                            "id",
                                            "mode",
                                            "onlyFavoriteArtists",
                                            "fromArtists"
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "unauthorized",
                                    "additionalProperties": true,
                                    "type": "object",
                                    "properties": {
                                        "statusCode": {
                                            "type": "number",
                                            "enum": [401]
                                        },
                                        "error": { "type": "string" },
                                        "message": { "type": "string" }
                                    },
                                    "required": [
                                        "statusCode",
                                        "error",
                                        "message"
                                    ]
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Add a new configuration preset.",
                "tags": ["Game configs"],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "mode": {
                                        "type": "string",
                                        "pattern": "^(Guess Line|Guess Song)$"
                                    },
                                    "onlyFavoriteArtists": {
                                        "description": "Whether to pick from any artist or only favorited ones.",
                                        "type": "boolean"
                                    },
                                    "fromArtists": {
                                        "description": "The artists we can choose from. If empty, it means this filter does not do anything.",
                                        "type": "array",
                                        "items": {
                                            "title": "artistSchema",
                                            "type": "object",
                                            "properties": {
                                                "musixmatchArtistId": {
                                                    "description": "Identifier for an artist given by MusixMatch",
                                                    "type": "string"
                                                }
                                            },
                                            "required": ["musixmatchArtistId"]
                                        }
                                    }
                                },
                                "required": [
                                    "mode",
                                    "onlyFavoriteArtists",
                                    "fromArtists"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "parameters": [
                    {
                        "schema": { "type": "integer" },
                        "in": "path",
                        "name": "selfId",
                        "required": true,
                        "description": "A numeric identifier for a user. Generated by the backend, unique and unchangeable."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Default Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "id": {
                                            "description": "Unique identifier for a config.",
                                            "type": "integer"
                                        },
                                        "mode": {
                                            "type": "string",
                                            "pattern": "^(Guess Line|Guess Song)$"
                                        },
                                        "onlyFavoriteArtists": {
                                            "description": "Whether to pick from any artist or only favorited ones.",
                                            "type": "boolean"
                                        },
                                        "fromArtists": {
                                            "description": "The artists we can choose from. If empty, it means this filter does not do anything.",
                                            "type": "array",
                                            "items": {
                                                "title": "artistSchema",
                                                "type": "object",
                                                "properties": {
                                                    "musixmatchArtistId": {
                                                        "description": "Identifier for an artist given by MusixMatch",
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "musixmatchArtistId"
                                                ]
                                            }
                                        }
                                    },
                                    "required": [
                                        "id",
                                        "mode",
                                        "onlyFavoriteArtists",
                                        "fromArtists"
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "unauthorized",
                                    "additionalProperties": true,
                                    "type": "object",
                                    "properties": {
                                        "statusCode": {
                                            "type": "number",
                                            "enum": [401]
                                        },
                                        "error": { "type": "string" },
                                        "message": { "type": "string" }
                                    },
                                    "required": [
                                        "statusCode",
                                        "error",
                                        "message"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/self/{selfId}/configs/{melodleConfigId}": {
            "delete": {
                "summary": "Delete a configuration preset.",
                "tags": ["Game configs"],
                "parameters": [
                    {
                        "schema": { "type": "integer" },
                        "in": "path",
                        "name": "selfId",
                        "required": true,
                        "description": "A numeric identifier for a user. Generated by the backend, unique and unchangeable."
                    },
                    {
                        "schema": { "type": "integer" },
                        "in": "path",
                        "name": "melodleConfigId",
                        "required": true,
                        "description": "Unique identifier for a config."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Default Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "id": {
                                            "description": "Unique identifier for a config.",
                                            "type": "integer"
                                        },
                                        "mode": {
                                            "type": "string",
                                            "pattern": "^(Guess Line|Guess Song)$"
                                        },
                                        "onlyFavoriteArtists": {
                                            "description": "Whether to pick from any artist or only favorited ones.",
                                            "type": "boolean"
                                        },
                                        "fromArtists": {
                                            "description": "The artists we can choose from. If empty, it means this filter does not do anything.",
                                            "type": "array",
                                            "items": {
                                                "title": "artistSchema",
                                                "type": "object",
                                                "properties": {
                                                    "musixmatchArtistId": {
                                                        "description": "Identifier for an artist given by MusixMatch",
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "musixmatchArtistId"
                                                ]
                                            }
                                        }
                                    },
                                    "required": [
                                        "id",
                                        "mode",
                                        "onlyFavoriteArtists",
                                        "fromArtists"
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "unauthorized",
                                    "additionalProperties": true,
                                    "type": "object",
                                    "properties": {
                                        "statusCode": {
                                            "type": "number",
                                            "enum": [401]
                                        },
                                        "error": { "type": "string" },
                                        "message": { "type": "string" }
                                    },
                                    "required": [
                                        "statusCode",
                                        "error",
                                        "message"
                                    ]
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "notFound",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "notFound",
                                    "additionalProperties": true,
                                    "type": "object",
                                    "properties": {
                                        "statusCode": {
                                            "type": "number",
                                            "enum": [404]
                                        },
                                        "error": { "type": "string" },
                                        "message": { "type": "string" }
                                    },
                                    "required": [
                                        "statusCode",
                                        "error",
                                        "message"
                                    ]
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "summary": "Update a configuration preset.",
                "tags": ["Game configs"],
                "parameters": [
                    {
                        "schema": { "type": "integer" },
                        "in": "path",
                        "name": "selfId",
                        "required": true,
                        "description": "A numeric identifier for a user. Generated by the backend, unique and unchangeable."
                    },
                    {
                        "schema": { "type": "integer" },
                        "in": "path",
                        "name": "melodleConfigId",
                        "required": true,
                        "description": "Unique identifier for a config."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Default Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "id": {
                                            "description": "Unique identifier for a config.",
                                            "type": "integer"
                                        },
                                        "mode": {
                                            "type": "string",
                                            "pattern": "^(Guess Line|Guess Song)$"
                                        },
                                        "onlyFavoriteArtists": {
                                            "description": "Whether to pick from any artist or only favorited ones.",
                                            "type": "boolean"
                                        },
                                        "fromArtists": {
                                            "description": "The artists we can choose from. If empty, it means this filter does not do anything.",
                                            "type": "array",
                                            "items": {
                                                "title": "artistSchema",
                                                "type": "object",
                                                "properties": {
                                                    "musixmatchArtistId": {
                                                        "description": "Identifier for an artist given by MusixMatch",
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "musixmatchArtistId"
                                                ]
                                            }
                                        }
                                    },
                                    "required": [
                                        "id",
                                        "mode",
                                        "onlyFavoriteArtists",
                                        "fromArtists"
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "unauthorized",
                                    "additionalProperties": true,
                                    "type": "object",
                                    "properties": {
                                        "statusCode": {
                                            "type": "number",
                                            "enum": [401]
                                        },
                                        "error": { "type": "string" },
                                        "message": { "type": "string" }
                                    },
                                    "required": [
                                        "statusCode",
                                        "error",
                                        "message"
                                    ]
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "notFound",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "notFound",
                                    "additionalProperties": true,
                                    "type": "object",
                                    "properties": {
                                        "statusCode": {
                                            "type": "number",
                                            "enum": [404]
                                        },
                                        "error": { "type": "string" },
                                        "message": { "type": "string" }
                                    },
                                    "required": [
                                        "statusCode",
                                        "error",
                                        "message"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/self/{selfId}/configs/suggest": {
            "get": {
                "summary": "Ask for a configuration suggestion based off of the user's spotify information.",
                "tags": ["Game configs"],
                "description": "TODO: Discuss whether we should ask for the id or make the frontend fetch the data and pass it to us.",
                "parameters": [
                    {
                        "schema": { "type": "string" },
                        "in": "query",
                        "name": "spotifyId",
                        "required": true,
                        "description": "The user's id to use to connect with spotify services. It is not stored within the database, but some requests need it to function."
                    },
                    {
                        "schema": { "type": "integer" },
                        "in": "path",
                        "name": "selfId",
                        "required": true,
                        "description": "A numeric identifier for a user. Generated by the backend, unique and unchangeable."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Default Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "mode": {
                                                "type": "string",
                                                "pattern": "^(Guess Line|Guess Song)$"
                                            },
                                            "onlyFavoriteArtists": {
                                                "description": "Whether to pick from any artist or only favorited ones.",
                                                "type": "boolean"
                                            },
                                            "fromArtists": {
                                                "description": "The artists we can choose from. If empty, it means this filter does not do anything.",
                                                "type": "array",
                                                "items": {
                                                    "title": "artistSchema",
                                                    "type": "object",
                                                    "properties": {
                                                        "musixmatchArtistId": {
                                                            "description": "Identifier for an artist given by MusixMatch",
                                                            "type": "string"
                                                        }
                                                    },
                                                    "required": [
                                                        "musixmatchArtistId"
                                                    ]
                                                }
                                            }
                                        },
                                        "required": [
                                            "mode",
                                            "onlyFavoriteArtists",
                                            "fromArtists"
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "unauthorized",
                                    "additionalProperties": true,
                                    "type": "object",
                                    "properties": {
                                        "statusCode": {
                                            "type": "number",
                                            "enum": [401]
                                        },
                                        "error": { "type": "string" },
                                        "message": { "type": "string" }
                                    },
                                    "required": [
                                        "statusCode",
                                        "error",
                                        "message"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/self/{selfId}/friends": {
            "get": {
                "summary": "Get all friends from a user.",
                "tags": ["Friends"],
                "parameters": [
                    {
                        "schema": { "type": "integer" },
                        "in": "path",
                        "name": "selfId",
                        "required": true,
                        "description": "A numeric identifier for a user. Generated by the backend, unique and unchangeable."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Default Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "title": "userSchema",
                                        "type": "object",
                                        "properties": {
                                            "id": {
                                                "description": "A numeric identifier for a user. Generated by the backend, unique and unchangeable.",
                                                "type": "integer"
                                            },
                                            "name": {
                                                "minLength": 1,
                                                "maxLength": 25,
                                                "description": "The user's display name. It does not need to be unique.",
                                                "type": "string"
                                            },
                                            "username": {
                                                "pattern": "^[a-zA-Z0-9.-_]+$",
                                                "minLength": 3,
                                                "maxLength": 20,
                                                "description": "The id to display to users. They must be unique, but the users can choose and change them.\n### Rules\n- Only accepts letters, digits and '.', '-', '_'.",
                                                "type": "string"
                                            },
                                            "profilePictureId": {
                                                "description": "The id to the profile picture of the user. These pictures cannot be uploaded, we store the options manually.",
                                                "type": "integer"
                                            }
                                        },
                                        "required": [
                                            "id",
                                            "name",
                                            "username",
                                            "profilePictureId"
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "unauthorized",
                                    "additionalProperties": true,
                                    "type": "object",
                                    "properties": {
                                        "statusCode": {
                                            "type": "number",
                                            "enum": [401]
                                        },
                                        "error": { "type": "string" },
                                        "message": { "type": "string" }
                                    },
                                    "required": [
                                        "statusCode",
                                        "error",
                                        "message"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/self/{selfId}/melodle": {
            "post": {
                "summary": "Start a new melodle game.",
                "tags": ["Melodle"],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "id": {
                                        "description": "Unique identifier for a config.",
                                        "type": "integer"
                                    },
                                    "mode": {
                                        "type": "string",
                                        "pattern": "^(Guess Line|Guess Song)$"
                                    },
                                    "onlyFavoriteArtists": {
                                        "description": "Whether to pick from any artist or only favorited ones.",
                                        "type": "boolean"
                                    },
                                    "fromArtists": {
                                        "description": "The artists we can choose from. If empty, it means this filter does not do anything.",
                                        "type": "array",
                                        "items": {
                                            "title": "artistSchema",
                                            "type": "object",
                                            "properties": {
                                                "musixmatchArtistId": {
                                                    "description": "Identifier for an artist given by MusixMatch",
                                                    "type": "string"
                                                }
                                            },
                                            "required": ["musixmatchArtistId"]
                                        }
                                    }
                                },
                                "required": [
                                    "id",
                                    "mode",
                                    "onlyFavoriteArtists",
                                    "fromArtists"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "parameters": [
                    {
                        "schema": { "type": "integer" },
                        "in": "path",
                        "name": "selfId",
                        "required": true,
                        "description": "A numeric identifier for a user. Generated by the backend, unique and unchangeable."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Default Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "gameId": {
                                            "description": "A unique identifier for a melodle game.",
                                            "type": "integer"
                                        },
                                        "config": {
                                            "type": "object",
                                            "properties": {
                                                "id": {
                                                    "description": "Unique identifier for a config.",
                                                    "type": "integer"
                                                },
                                                "mode": {
                                                    "type": "string",
                                                    "pattern": "^(Guess Line|Guess Song)$"
                                                },
                                                "onlyFavoriteArtists": {
                                                    "description": "Whether to pick from any artist or only favorited ones.",
                                                    "type": "boolean"
                                                },
                                                "fromArtists": {
                                                    "description": "The artists we can choose from. If empty, it means this filter does not do anything.",
                                                    "type": "array",
                                                    "items": {
                                                        "title": "artistSchema",
                                                        "type": "object",
                                                        "properties": {
                                                            "musixmatchArtistId": {
                                                                "description": "Identifier for an artist given by MusixMatch",
                                                                "type": "string"
                                                            }
                                                        },
                                                        "required": [
                                                            "musixmatchArtistId"
                                                        ]
                                                    }
                                                }
                                            },
                                            "required": [
                                                "id",
                                                "mode",
                                                "onlyFavoriteArtists",
                                                "fromArtists"
                                            ]
                                        }
                                    },
                                    "required": ["gameId", "config"]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "unauthorized",
                                    "additionalProperties": true,
                                    "type": "object",
                                    "properties": {
                                        "statusCode": {
                                            "type": "number",
                                            "enum": [401]
                                        },
                                        "error": { "type": "string" },
                                        "message": { "type": "string" }
                                    },
                                    "required": [
                                        "statusCode",
                                        "error",
                                        "message"
                                    ]
                                }
                            }
                        }
                    },
                    "425": {
                        "description": "tooEarly",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "tooEarly",
                                    "additionalProperties": true,
                                    "type": "object",
                                    "properties": {
                                        "statusCode": {
                                            "type": "number",
                                            "enum": [425]
                                        },
                                        "error": { "type": "string" },
                                        "message": { "type": "string" }
                                    },
                                    "required": [
                                        "statusCode",
                                        "error",
                                        "message"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/self/{selfId}/melodle/history": {
            "get": {
                "summary": "Get a history of your own games.",
                "tags": ["User"],
                "parameters": [
                    {
                        "schema": { "type": "integer" },
                        "in": "path",
                        "name": "selfId",
                        "required": true,
                        "description": "A numeric identifier for a user. Generated by the backend, unique and unchangeable."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Default Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "userId": {
                                                "description": "A numeric identifier for a user. Generated by the backend, unique and unchangeable.",
                                                "type": "integer"
                                            },
                                            "gameId": {
                                                "description": "A unique identifier for a melodle game.",
                                                "type": "integer"
                                            },
                                            "attempts": {
                                                "anyOf": [
                                                    {
                                                        "type": "array",
                                                        "items": {
                                                            "type": "object",
                                                            "properties": {
                                                                "guessedSongId": {
                                                                    "description": "Identifier which can be used to fetch artist data from MusixMatch.",
                                                                    "type": "string"
                                                                },
                                                                "guessedAt": {
                                                                    "format": "date-time",
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "required": [
                                                                "guessedSongId",
                                                                "guessedAt"
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "type": "array",
                                                        "items": {
                                                            "type": "object",
                                                            "properties": {
                                                                "guessedLine": {
                                                                    "maxLength": 1000,
                                                                    "description": "A line to match against the actual line of the song.",
                                                                    "type": "string"
                                                                },
                                                                "guessedAt": {
                                                                    "format": "date-time",
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "required": [
                                                                "guessedLine",
                                                                "guessedAt"
                                                            ]
                                                        }
                                                    }
                                                ]
                                            },
                                            "won": { "type": "boolean" },
                                            "endingTime": {
                                                "format": "date-time",
                                                "type": "string"
                                            },
                                            "gameMode": {
                                                "type": "string",
                                                "pattern": "^(Guess Line|Guess Song)$"
                                            },
                                            "config": {
                                                "type": "object",
                                                "properties": {
                                                    "id": {
                                                        "description": "Unique identifier for a config.",
                                                        "type": "integer"
                                                    },
                                                    "mode": {
                                                        "type": "string",
                                                        "pattern": "^(Guess Line|Guess Song)$"
                                                    },
                                                    "onlyFavoriteArtists": {
                                                        "description": "Whether to pick from any artist or only favorited ones.",
                                                        "type": "boolean"
                                                    },
                                                    "fromArtists": {
                                                        "description": "The artists we can choose from. If empty, it means this filter does not do anything.",
                                                        "type": "array",
                                                        "items": {
                                                            "title": "artistSchema",
                                                            "type": "object",
                                                            "properties": {
                                                                "musixmatchArtistId": {
                                                                    "description": "Identifier for an artist given by MusixMatch",
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "required": [
                                                                "musixmatchArtistId"
                                                            ]
                                                        }
                                                    }
                                                },
                                                "required": [
                                                    "id",
                                                    "mode",
                                                    "onlyFavoriteArtists",
                                                    "fromArtists"
                                                ]
                                            }
                                        },
                                        "required": [
                                            "userId",
                                            "gameId",
                                            "attempts",
                                            "gameMode",
                                            "config"
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "unauthorized",
                                    "additionalProperties": true,
                                    "type": "object",
                                    "properties": {
                                        "statusCode": {
                                            "type": "number",
                                            "enum": [401]
                                        },
                                        "error": { "type": "string" },
                                        "message": { "type": "string" }
                                    },
                                    "required": [
                                        "statusCode",
                                        "error",
                                        "message"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/self/{selfId}/artists/{artistMusixMatchId}/favorite": {
            "put": {
                "summary": "Update whether a given artist is within you favorite ones.",
                "tags": ["Artists"],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "isFavorite": { "type": "boolean" }
                                },
                                "required": ["isFavorite"]
                            }
                        }
                    },
                    "required": true
                },
                "parameters": [
                    {
                        "schema": { "type": "integer" },
                        "in": "path",
                        "name": "selfId",
                        "required": true,
                        "description": "A numeric identifier for a user. Generated by the backend, unique and unchangeable."
                    },
                    {
                        "schema": { "type": "string" },
                        "in": "path",
                        "name": "artistMusixMatchId",
                        "required": true,
                        "description": "Identifier for an artist given by MusixMatch"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Default Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "isFavorite": { "type": "boolean" }
                                    },
                                    "required": ["isFavorite"]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "unauthorized",
                                    "additionalProperties": true,
                                    "type": "object",
                                    "properties": {
                                        "statusCode": {
                                            "type": "number",
                                            "enum": [401]
                                        },
                                        "error": { "type": "string" },
                                        "message": { "type": "string" }
                                    },
                                    "required": [
                                        "statusCode",
                                        "error",
                                        "message"
                                    ]
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "notFound",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "notFound",
                                    "additionalProperties": true,
                                    "type": "object",
                                    "properties": {
                                        "statusCode": {
                                            "type": "number",
                                            "enum": [404]
                                        },
                                        "error": { "type": "string" },
                                        "message": { "type": "string" }
                                    },
                                    "required": [
                                        "statusCode",
                                        "error",
                                        "message"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/self/{selfId}/friends/{friendId}": {
            "delete": {
                "summary": "Removes a friend.",
                "tags": ["Friends"],
                "description": "This does not block them, and if they are blocked it unblocks them. It transforms the friends into a normal stranger.",
                "parameters": [
                    {
                        "schema": { "type": "integer" },
                        "in": "path",
                        "name": "selfId",
                        "required": true,
                        "description": "A numeric identifier for a user. Generated by the backend, unique and unchangeable."
                    },
                    {
                        "schema": { "type": "integer" },
                        "in": "path",
                        "name": "friendId",
                        "required": true,
                        "description": "A numeric identifier for a user. Generated by the backend, unique and unchangeable."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Default Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "title": "userSchema",
                                    "type": "object",
                                    "properties": {
                                        "username": {
                                            "pattern": "^[a-zA-Z0-9.-_]+$",
                                            "minLength": 3,
                                            "maxLength": 20,
                                            "description": "The id to display to users. They must be unique, but the users can choose and change them.\n### Rules\n- Only accepts letters, digits and '.', '-', '_'.",
                                            "type": "string"
                                        }
                                    },
                                    "required": ["username"]
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "badRequest",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "badRequest",
                                    "additionalProperties": true,
                                    "type": "object",
                                    "properties": {
                                        "statusCode": {
                                            "type": "number",
                                            "enum": [400]
                                        },
                                        "error": { "type": "string" },
                                        "message": { "type": "string" }
                                    },
                                    "required": [
                                        "statusCode",
                                        "error",
                                        "message"
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "unauthorized",
                                    "additionalProperties": true,
                                    "type": "object",
                                    "properties": {
                                        "statusCode": {
                                            "type": "number",
                                            "enum": [401]
                                        },
                                        "error": { "type": "string" },
                                        "message": { "type": "string" }
                                    },
                                    "required": [
                                        "statusCode",
                                        "error",
                                        "message"
                                    ]
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "notFound",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "notFound",
                                    "additionalProperties": true,
                                    "type": "object",
                                    "properties": {
                                        "statusCode": {
                                            "type": "number",
                                            "enum": [404]
                                        },
                                        "error": { "type": "string" },
                                        "message": { "type": "string" }
                                    },
                                    "required": [
                                        "statusCode",
                                        "error",
                                        "message"
                                    ]
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Sends a friend request",
                "tags": ["Friends"],
                "parameters": [
                    {
                        "schema": { "type": "integer" },
                        "in": "path",
                        "name": "selfId",
                        "required": true,
                        "description": "A numeric identifier for a user. Generated by the backend, unique and unchangeable."
                    },
                    {
                        "schema": { "type": "integer" },
                        "in": "path",
                        "name": "friendId",
                        "required": true,
                        "description": "A numeric identifier for a user. Generated by the backend, unique and unchangeable."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Default Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "title": "userSchema",
                                    "type": "object",
                                    "properties": {
                                        "username": {
                                            "pattern": "^[a-zA-Z0-9.-_]+$",
                                            "minLength": 3,
                                            "maxLength": 20,
                                            "description": "The id to display to users. They must be unique, but the users can choose and change them.\n### Rules\n- Only accepts letters, digits and '.', '-', '_'.",
                                            "type": "string"
                                        }
                                    },
                                    "required": ["username"]
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "badRequest",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "badRequest",
                                    "additionalProperties": true,
                                    "type": "object",
                                    "properties": {
                                        "statusCode": {
                                            "type": "number",
                                            "enum": [400]
                                        },
                                        "error": { "type": "string" },
                                        "message": { "type": "string" }
                                    },
                                    "required": [
                                        "statusCode",
                                        "error",
                                        "message"
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "unauthorized",
                                    "additionalProperties": true,
                                    "type": "object",
                                    "properties": {
                                        "statusCode": {
                                            "type": "number",
                                            "enum": [401]
                                        },
                                        "error": { "type": "string" },
                                        "message": { "type": "string" }
                                    },
                                    "required": [
                                        "statusCode",
                                        "error",
                                        "message"
                                    ]
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "notFound",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "notFound",
                                    "additionalProperties": true,
                                    "type": "object",
                                    "properties": {
                                        "statusCode": {
                                            "type": "number",
                                            "enum": [404]
                                        },
                                        "error": { "type": "string" },
                                        "message": { "type": "string" }
                                    },
                                    "required": [
                                        "statusCode",
                                        "error",
                                        "message"
                                    ]
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "summary": "Modifies an existing relationship with another user.",
                "tags": ["Friends"],
                "description": "## Rules\n- If the user has a friend invite from a user, they can accept it.\n- They always can block a user, even if they are not in any sort of relationship.\n- If they are the ones who blocked the other user, they can unblock by setting it to accepted.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "status": {
                                        "type": "string",
                                        "pattern": "^(blocked|accepted)$"
                                    }
                                },
                                "required": ["status"]
                            }
                        }
                    },
                    "required": true
                },
                "parameters": [
                    {
                        "schema": { "type": "integer" },
                        "in": "path",
                        "name": "selfId",
                        "required": true,
                        "description": "A numeric identifier for a user. Generated by the backend, unique and unchangeable."
                    },
                    {
                        "schema": { "type": "integer" },
                        "in": "path",
                        "name": "friendId",
                        "required": true,
                        "description": "A numeric identifier for a user. Generated by the backend, unique and unchangeable."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Default Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "pattern": "^(pending|blocked|accepted)$"
                                        }
                                    },
                                    "required": ["status"]
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "badRequest",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "badRequest",
                                    "additionalProperties": true,
                                    "type": "object",
                                    "properties": {
                                        "statusCode": {
                                            "type": "number",
                                            "enum": [400]
                                        },
                                        "error": { "type": "string" },
                                        "message": { "type": "string" }
                                    },
                                    "required": [
                                        "statusCode",
                                        "error",
                                        "message"
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "unauthorized",
                                    "additionalProperties": true,
                                    "type": "object",
                                    "properties": {
                                        "statusCode": {
                                            "type": "number",
                                            "enum": [401]
                                        },
                                        "error": { "type": "string" },
                                        "message": { "type": "string" }
                                    },
                                    "required": [
                                        "statusCode",
                                        "error",
                                        "message"
                                    ]
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "notFound",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "notFound",
                                    "additionalProperties": true,
                                    "type": "object",
                                    "properties": {
                                        "statusCode": {
                                            "type": "number",
                                            "enum": [404]
                                        },
                                        "error": { "type": "string" },
                                        "message": { "type": "string" }
                                    },
                                    "required": [
                                        "statusCode",
                                        "error",
                                        "message"
                                    ]
                                }
                            }
                        }
                    },
                    "428": {
                        "description": "preconditionRequired",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "preconditionRequired",
                                    "additionalProperties": true,
                                    "type": "object",
                                    "properties": {
                                        "statusCode": {
                                            "type": "number",
                                            "enum": [428]
                                        },
                                        "error": { "type": "string" },
                                        "message": { "type": "string" }
                                    },
                                    "required": [
                                        "statusCode",
                                        "error",
                                        "message"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/self/{selfId}/friends/leaderboards/": {
            "get": {
                "summary": "Gets information about the user's friends leaderboard on the game mode.",
                "tags": ["Leaderboards"],
                "parameters": [
                    {
                        "schema": { "type": "integer" },
                        "in": "query",
                        "name": "start",
                        "required": true,
                        "description": "States when a range starts."
                    },
                    {
                        "schema": { "maximum": 50, "type": "integer" },
                        "in": "query",
                        "name": "amount",
                        "required": true,
                        "description": "A number which defines range size."
                    },
                    {
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "pattern": "^(Guess Line|Guess Song)$"
                            }
                        },
                        "in": "query",
                        "name": "gameModes",
                        "required": true
                    },
                    {
                        "schema": { "type": "integer" },
                        "in": "path",
                        "name": "selfId",
                        "required": true,
                        "description": "A numeric identifier for a user. Generated by the backend, unique and unchangeable."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A leaderboard of melodle users.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "title": "leaderboardSchema",
                                    "description": "A leaderboard of melodle users.",
                                    "type": "object",
                                    "properties": {
                                        "leaderboard": {
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "allOf": [
                                                    {
                                                        "title": "userSchema",
                                                        "type": "object",
                                                        "properties": {
                                                            "id": {
                                                                "description": "A numeric identifier for a user. Generated by the backend, unique and unchangeable.",
                                                                "type": "integer"
                                                            },
                                                            "username": {
                                                                "pattern": "^[a-zA-Z0-9.-_]+$",
                                                                "minLength": 3,
                                                                "maxLength": 20,
                                                                "description": "The id to display to users. They must be unique, but the users can choose and change them.\n### Rules\n- Only accepts letters, digits and '.', '-', '_'.",
                                                                "type": "string"
                                                            },
                                                            "name": {
                                                                "minLength": 1,
                                                                "maxLength": 25,
                                                                "description": "The user's display name. It does not need to be unique.",
                                                                "type": "string"
                                                            },
                                                            "profilePictureFilename": {
                                                                "description": "File name required to fetch the image from the route to get specific user icons.",
                                                                "type": "string"
                                                            }
                                                        },
                                                        "required": [
                                                            "id",
                                                            "username",
                                                            "name",
                                                            "profilePictureFilename"
                                                        ]
                                                    },
                                                    {
                                                        "type": "object",
                                                        "properties": {
                                                            "score": {
                                                                "description": "Score calculated by user performance within their games.",
                                                                "type": "number"
                                                            },
                                                            "rank": {
                                                                "description": "Players' position ordered from higest to lowest score.",
                                                                "type": "integer"
                                                            }
                                                        },
                                                        "required": [
                                                            "score",
                                                            "rank"
                                                        ]
                                                    }
                                                ]
                                            }
                                        }
                                    },
                                    "required": ["leaderboard"]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "unauthorized",
                                    "additionalProperties": true,
                                    "type": "object",
                                    "properties": {
                                        "statusCode": {
                                            "type": "number",
                                            "enum": [401]
                                        },
                                        "error": { "type": "string" },
                                        "message": { "type": "string" }
                                    },
                                    "required": [
                                        "statusCode",
                                        "error",
                                        "message"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/self/{selfId}/melodle/{gameId}": {
            "get": {
                "summary": "Get information about a melodle game.",
                "tags": ["User"],
                "parameters": [
                    {
                        "schema": { "type": "integer" },
                        "in": "path",
                        "name": "selfId",
                        "required": true,
                        "description": "A numeric identifier for a user. Generated by the backend, unique and unchangeable."
                    },
                    {
                        "schema": { "type": "integer" },
                        "in": "path",
                        "name": "gameId",
                        "required": true,
                        "description": "A unique identifier for a melodle game."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Default Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "userId": {
                                            "description": "A numeric identifier for a user. Generated by the backend, unique and unchangeable.",
                                            "type": "integer"
                                        },
                                        "gameId": {
                                            "description": "A unique identifier for a melodle game.",
                                            "type": "integer"
                                        },
                                        "attempts": {
                                            "anyOf": [
                                                {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "object",
                                                        "properties": {
                                                            "guessedSongId": {
                                                                "description": "Identifier which can be used to fetch artist data from MusixMatch.",
                                                                "type": "string"
                                                            },
                                                            "guessedAt": {
                                                                "format": "date-time",
                                                                "type": "string"
                                                            }
                                                        },
                                                        "required": [
                                                            "guessedSongId",
                                                            "guessedAt"
                                                        ]
                                                    }
                                                },
                                                {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "object",
                                                        "properties": {
                                                            "guessedLine": {
                                                                "maxLength": 1000,
                                                                "description": "A line to match against the actual line of the song.",
                                                                "type": "string"
                                                            },
                                                            "guessedAt": {
                                                                "format": "date-time",
                                                                "type": "string"
                                                            }
                                                        },
                                                        "required": [
                                                            "guessedLine",
                                                            "guessedAt"
                                                        ]
                                                    }
                                                }
                                            ]
                                        },
                                        "won": { "type": "boolean" },
                                        "endingTime": {
                                            "format": "date-time",
                                            "type": "string"
                                        },
                                        "gameMode": {
                                            "type": "string",
                                            "pattern": "^(Guess Line|Guess Song)$"
                                        },
                                        "config": {
                                            "type": "object",
                                            "properties": {
                                                "id": {
                                                    "description": "Unique identifier for a config.",
                                                    "type": "integer"
                                                },
                                                "mode": {
                                                    "type": "string",
                                                    "pattern": "^(Guess Line|Guess Song)$"
                                                },
                                                "onlyFavoriteArtists": {
                                                    "description": "Whether to pick from any artist or only favorited ones.",
                                                    "type": "boolean"
                                                },
                                                "fromArtists": {
                                                    "description": "The artists we can choose from. If empty, it means this filter does not do anything.",
                                                    "type": "array",
                                                    "items": {
                                                        "title": "artistSchema",
                                                        "type": "object",
                                                        "properties": {
                                                            "musixmatchArtistId": {
                                                                "description": "Identifier for an artist given by MusixMatch",
                                                                "type": "string"
                                                            }
                                                        },
                                                        "required": [
                                                            "musixmatchArtistId"
                                                        ]
                                                    }
                                                }
                                            },
                                            "required": [
                                                "id",
                                                "mode",
                                                "onlyFavoriteArtists",
                                                "fromArtists"
                                            ]
                                        }
                                    },
                                    "required": [
                                        "userId",
                                        "gameId",
                                        "attempts",
                                        "gameMode",
                                        "config"
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "unauthorized",
                                    "additionalProperties": true,
                                    "type": "object",
                                    "properties": {
                                        "statusCode": {
                                            "type": "number",
                                            "enum": [401]
                                        },
                                        "error": { "type": "string" },
                                        "message": { "type": "string" }
                                    },
                                    "required": [
                                        "statusCode",
                                        "error",
                                        "message"
                                    ]
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "notFound",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "notFound",
                                    "additionalProperties": true,
                                    "type": "object",
                                    "properties": {
                                        "statusCode": {
                                            "type": "number",
                                            "enum": [404]
                                        },
                                        "error": { "type": "string" },
                                        "message": { "type": "string" }
                                    },
                                    "required": [
                                        "statusCode",
                                        "error",
                                        "message"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/self/{selfId}/melodle/{gameId}/guessLine/attempts": {
            "post": {
                "summary": "Submit a guess for a melodle game.",
                "tags": ["Melodle"],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "guessedLine": {
                                        "maxLength": 1000,
                                        "description": "A line to match against the actual line of the song.",
                                        "type": "string"
                                    }
                                },
                                "required": ["guessedLine"]
                            }
                        }
                    },
                    "required": true
                },
                "parameters": [
                    {
                        "schema": { "type": "integer" },
                        "in": "path",
                        "name": "selfId",
                        "required": true,
                        "description": "A numeric identifier for a user. Generated by the backend, unique and unchangeable."
                    },
                    {
                        "schema": { "type": "integer" },
                        "in": "path",
                        "name": "gameId",
                        "required": true,
                        "description": "A unique identifier for a melodle game."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Default Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "guessLineHints": {
                                            "description": "For every letter given returns a hint, in order.",
                                            "type": "array",
                                            "items": {
                                                "type": "string",
                                                "pattern": "^(Correct spot|Correct letter, wrong spot\\.|Wrong)$"
                                            }
                                        },
                                        "input": { "type": "string" },
                                        "won": { "type": "boolean" }
                                    },
                                    "required": [
                                        "guessLineHints",
                                        "input",
                                        "won"
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "unauthorized",
                                    "additionalProperties": true,
                                    "type": "object",
                                    "properties": {
                                        "statusCode": {
                                            "type": "number",
                                            "enum": [401]
                                        },
                                        "error": { "type": "string" },
                                        "message": { "type": "string" }
                                    },
                                    "required": [
                                        "statusCode",
                                        "error",
                                        "message"
                                    ]
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "notFound",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "notFound",
                                    "additionalProperties": true,
                                    "type": "object",
                                    "properties": {
                                        "statusCode": {
                                            "type": "number",
                                            "enum": [404]
                                        },
                                        "error": { "type": "string" },
                                        "message": { "type": "string" }
                                    },
                                    "required": [
                                        "statusCode",
                                        "error",
                                        "message"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/self/{selfId}/melodle/{gameId}/guessSong/attempts": {
            "post": {
                "summary": "Submit a guess for a melodle game.",
                "tags": ["Melodle"],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "guessedSongId": {
                                        "description": "Identifier which can be used to fetch artist data from MusixMatch.",
                                        "type": "string"
                                    }
                                },
                                "required": ["guessedSongId"]
                            }
                        }
                    },
                    "required": true
                },
                "parameters": [
                    {
                        "schema": { "type": "integer" },
                        "in": "path",
                        "name": "selfId",
                        "required": true,
                        "description": "A numeric identifier for a user. Generated by the backend, unique and unchangeable."
                    },
                    {
                        "schema": { "type": "integer" },
                        "in": "path",
                        "name": "gameId",
                        "required": true,
                        "description": "A unique identifier for a melodle game."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Default Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "correctArtist": { "type": "boolean" },
                                        "correctBand": { "type": "boolean" },
                                        "correctAlbum": { "type": "boolean" },
                                        "won": { "type": "boolean" }
                                    },
                                    "required": [
                                        "correctArtist",
                                        "correctBand",
                                        "correctAlbum",
                                        "won"
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "unauthorized",
                                    "additionalProperties": true,
                                    "type": "object",
                                    "properties": {
                                        "statusCode": {
                                            "type": "number",
                                            "enum": [401]
                                        },
                                        "error": { "type": "string" },
                                        "message": { "type": "string" }
                                    },
                                    "required": [
                                        "statusCode",
                                        "error",
                                        "message"
                                    ]
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "notFound",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "notFound",
                                    "additionalProperties": true,
                                    "type": "object",
                                    "properties": {
                                        "statusCode": {
                                            "type": "number",
                                            "enum": [404]
                                        },
                                        "error": { "type": "string" },
                                        "message": { "type": "string" }
                                    },
                                    "required": [
                                        "statusCode",
                                        "error",
                                        "message"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "servers": [
        {
            "url": "https://localhost/backend",
            "description": "Development server"
        }
    ],
    "security": [{ "bearerAuth": [] }],
    "tags": [
        {
            "name": "TODO Schema",
            "description": "Endpoints whose schema we have yet to do."
        },
        {
            "name": "User CRUD",
            "description": "Endpoints of the user's CRUD. (This is the one we implemented.)"
        },
        {
            "name": "Melodle",
            "description": "Endpoints specifically to play the melodle game."
        },
        {
            "name": "Debug",
            "description": "Endpoints only enabled on debug mode. If you see endpoints inside here while in production (so, if you are our client), please notify us. That would be a security vulnerability."
        },
        { "name": "Auth", "description": "Authentication-related endpoints." },
        {
            "name": "Static",
            "description": "Endpoints about information that never changes through user interaction."
        },
        {
            "name": "Artists",
            "description": "Endpoints about fetching information from artists."
        },
        {
            "name": "Lyrics",
            "description": "Endpoints related to obtaining tracks lyrics."
        },
        { "name": "Friends", "description": "Friends related endpoints." },
        {
            "name": "User",
            "description": "Endpoints to deal with users on their own."
        },
        {
            "name": "Game configs",
            "description": "Enspoints to manipulate your game configurations."
        },
        {
            "name": "Leaderboards",
            "description": "Ranking lists showing best players depending on every gamemode."
        },
        {
            "name": "Other",
            "description": "Endpoints which serve odd purposes."
        }
    ]
}
