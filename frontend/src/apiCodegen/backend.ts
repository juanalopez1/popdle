/**
 * Generated by orval v7.2.0 üç∫
 * Do not edit manually.
 * Melodle API
 * ---
## Documentation for Melodle's devs.
```(
 AAAAAaaaaaaaa!
              (   ()   )
    ) ________    //  )
 ()  |\       \  //
( \\__ \ ______\//
   \__) |       |
     |  |       |
      \ |       |
       \|_______|
       //    \\
      ((     ||
       \\    ||
     ( ()    ||
      (      () ) )
```
 * OpenAPI spec version: 0.1.0
 */
import axios from "axios";
import type { AxiosRequestConfig, AxiosResponse } from "axios";
export type PostUsersSelfSelfIdMelodleGuessLineGameIdAttempts404StatusCode =
    (typeof PostUsersSelfSelfIdMelodleGuessLineGameIdAttempts404StatusCode)[keyof typeof PostUsersSelfSelfIdMelodleGuessLineGameIdAttempts404StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostUsersSelfSelfIdMelodleGuessLineGameIdAttempts404StatusCode = {
    NUMBER_404: 404,
} as const;

/**
 * notFound
 */
export type PostUsersSelfSelfIdMelodleGuessLineGameIdAttempts404 = {
    error: string;
    message: string;
    statusCode: PostUsersSelfSelfIdMelodleGuessLineGameIdAttempts404StatusCode;
    [key: string]: unknown;
};

export type PostUsersSelfSelfIdMelodleGuessLineGameIdAttempts401StatusCode =
    (typeof PostUsersSelfSelfIdMelodleGuessLineGameIdAttempts401StatusCode)[keyof typeof PostUsersSelfSelfIdMelodleGuessLineGameIdAttempts401StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostUsersSelfSelfIdMelodleGuessLineGameIdAttempts401StatusCode = {
    NUMBER_401: 401,
} as const;

/**
 * unauthorized
 */
export type PostUsersSelfSelfIdMelodleGuessLineGameIdAttempts401 = {
    error: string;
    message: string;
    statusCode: PostUsersSelfSelfIdMelodleGuessLineGameIdAttempts401StatusCode;
    [key: string]: unknown;
};

export type PostUsersSelfSelfIdMelodleGuessLineGameIdAttempts200 = {
    /** For every letter given returns a hint, in order. */
    guessLineHints: string[];
    input: string;
    won: boolean;
};

export type PostUsersSelfSelfIdMelodleGuessLineGameIdAttemptsBody = {
    /**
     * A line to match against the actual line of the song.
     * @maxLength 1000
     */
    guessedLine: string;
};

export type PostUsersSelfSelfIdMelodleGuessSongGameIdAttempts409StatusCode =
    (typeof PostUsersSelfSelfIdMelodleGuessSongGameIdAttempts409StatusCode)[keyof typeof PostUsersSelfSelfIdMelodleGuessSongGameIdAttempts409StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostUsersSelfSelfIdMelodleGuessSongGameIdAttempts409StatusCode = {
    NUMBER_409: 409,
} as const;

/**
 * conflict
 */
export type PostUsersSelfSelfIdMelodleGuessSongGameIdAttempts409 = {
    error: string;
    message: string;
    statusCode: PostUsersSelfSelfIdMelodleGuessSongGameIdAttempts409StatusCode;
    [key: string]: unknown;
};

export type PostUsersSelfSelfIdMelodleGuessSongGameIdAttempts404StatusCode =
    (typeof PostUsersSelfSelfIdMelodleGuessSongGameIdAttempts404StatusCode)[keyof typeof PostUsersSelfSelfIdMelodleGuessSongGameIdAttempts404StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostUsersSelfSelfIdMelodleGuessSongGameIdAttempts404StatusCode = {
    NUMBER_404: 404,
} as const;

/**
 * notFound
 */
export type PostUsersSelfSelfIdMelodleGuessSongGameIdAttempts404 = {
    error: string;
    message: string;
    statusCode: PostUsersSelfSelfIdMelodleGuessSongGameIdAttempts404StatusCode;
    [key: string]: unknown;
};

export type PostUsersSelfSelfIdMelodleGuessSongGameIdAttempts401StatusCode =
    (typeof PostUsersSelfSelfIdMelodleGuessSongGameIdAttempts401StatusCode)[keyof typeof PostUsersSelfSelfIdMelodleGuessSongGameIdAttempts401StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostUsersSelfSelfIdMelodleGuessSongGameIdAttempts401StatusCode = {
    NUMBER_401: 401,
} as const;

/**
 * unauthorized
 */
export type PostUsersSelfSelfIdMelodleGuessSongGameIdAttempts401 = {
    error: string;
    message: string;
    statusCode: PostUsersSelfSelfIdMelodleGuessSongGameIdAttempts401StatusCode;
    [key: string]: unknown;
};

export type PostUsersSelfSelfIdMelodleGuessSongGameIdAttemptsBody = {
    guessedTrackSpotifyId: string;
};

export type GetUsersSelfSelfIdMelodleGuessLine404StatusCode =
    (typeof GetUsersSelfSelfIdMelodleGuessLine404StatusCode)[keyof typeof GetUsersSelfSelfIdMelodleGuessLine404StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetUsersSelfSelfIdMelodleGuessLine404StatusCode = {
    NUMBER_404: 404,
} as const;

/**
 * notFound
 */
export type GetUsersSelfSelfIdMelodleGuessLine404 = {
    error: string;
    message: string;
    statusCode: GetUsersSelfSelfIdMelodleGuessLine404StatusCode;
    [key: string]: unknown;
};

export type GetUsersSelfSelfIdMelodleGuessLine401StatusCode =
    (typeof GetUsersSelfSelfIdMelodleGuessLine401StatusCode)[keyof typeof GetUsersSelfSelfIdMelodleGuessLine401StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetUsersSelfSelfIdMelodleGuessLine401StatusCode = {
    NUMBER_401: 401,
} as const;

/**
 * unauthorized
 */
export type GetUsersSelfSelfIdMelodleGuessLine401 = {
    error: string;
    message: string;
    statusCode: GetUsersSelfSelfIdMelodleGuessLine401StatusCode;
    [key: string]: unknown;
};

export type GetUsersSelfSelfIdMelodleGuessLine200Config = {
    /** The artists we can choose from, by their spotify ids. */
    fromArtists: string[];
    /** Unique identifier for a config. */
    id: number;
    /** @pattern ^(Guess Line|Guess Song)$ */
    mode: string;
    /** Whether to pick from any artist or only favorited ones. */
    onlyFavoriteArtists: boolean;
};

export type GetUsersSelfSelfIdMelodleGuessLine200 = {
    attempts: GetUsersSelfSelfIdMelodleGuessLine200Attempts;
    config: GetUsersSelfSelfIdMelodleGuessLine200Config;
    endingTime?: string;
    /** A unique identifier for a melodle game. */
    gameId: number;
    /** @pattern ^(Guess Line|Guess Song)$ */
    gameMode: string;
    /** A numeric identifier for a user. Generated by the backend, unique and unchangeable. */
    userId: number;
    won?: boolean;
};

export type GetUsersSelfSelfIdMelodleGuessLine200AttemptsAnyOfTwoItem = {
    guessedAt: string;
    /**
     * A line to match against the actual line of the song.
     * @maxLength 1000
     */
    guessedLine: string;
};

export type GetUsersSelfSelfIdMelodleGuessLine200AttemptsAnyOfItem = {
    guessedAt: string;
    /** Identifier which can be used to fetch artist data from MusixMatch. */
    guessedSongId: string;
};

export type GetUsersSelfSelfIdMelodleGuessLine200Attempts =
    | GetUsersSelfSelfIdMelodleGuessLine200AttemptsAnyOfItem[]
    | GetUsersSelfSelfIdMelodleGuessLine200AttemptsAnyOfTwoItem[];

export type PostUsersSelfSelfIdMelodleGuessSong425StatusCode =
    (typeof PostUsersSelfSelfIdMelodleGuessSong425StatusCode)[keyof typeof PostUsersSelfSelfIdMelodleGuessSong425StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostUsersSelfSelfIdMelodleGuessSong425StatusCode = {
    NUMBER_425: 425,
} as const;

/**
 * tooEarly
 */
export type PostUsersSelfSelfIdMelodleGuessSong425 = {
    error: string;
    message: string;
    statusCode: PostUsersSelfSelfIdMelodleGuessSong425StatusCode;
    [key: string]: unknown;
};

export type PostUsersSelfSelfIdMelodleGuessSong404StatusCode =
    (typeof PostUsersSelfSelfIdMelodleGuessSong404StatusCode)[keyof typeof PostUsersSelfSelfIdMelodleGuessSong404StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostUsersSelfSelfIdMelodleGuessSong404StatusCode = {
    NUMBER_404: 404,
} as const;

/**
 * notFound
 */
export type PostUsersSelfSelfIdMelodleGuessSong404 = {
    error: string;
    message: string;
    statusCode: PostUsersSelfSelfIdMelodleGuessSong404StatusCode;
    [key: string]: unknown;
};

export type PostUsersSelfSelfIdMelodleGuessSong401StatusCode =
    (typeof PostUsersSelfSelfIdMelodleGuessSong401StatusCode)[keyof typeof PostUsersSelfSelfIdMelodleGuessSong401StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostUsersSelfSelfIdMelodleGuessSong401StatusCode = {
    NUMBER_401: 401,
} as const;

/**
 * unauthorized
 */
export type PostUsersSelfSelfIdMelodleGuessSong401 = {
    error: string;
    message: string;
    statusCode: PostUsersSelfSelfIdMelodleGuessSong401StatusCode;
    [key: string]: unknown;
};

export type PostUsersSelfSelfIdMelodleGuessSong201 = {
    /** A unique identifier for a melodle game. */
    gameId: number;
};

export type PostUsersSelfSelfIdMelodleGuessSongBody = {
    /** The artists we can choose from, by their spotify ids. */
    fromArtists: string[];
};

export type GetUsersSelfSelfIdMelodleGuessSong404StatusCode =
    (typeof GetUsersSelfSelfIdMelodleGuessSong404StatusCode)[keyof typeof GetUsersSelfSelfIdMelodleGuessSong404StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetUsersSelfSelfIdMelodleGuessSong404StatusCode = {
    NUMBER_404: 404,
} as const;

/**
 * notFound
 */
export type GetUsersSelfSelfIdMelodleGuessSong404 = {
    error: string;
    message: string;
    statusCode: GetUsersSelfSelfIdMelodleGuessSong404StatusCode;
    [key: string]: unknown;
};

export type GetUsersSelfSelfIdMelodleGuessSong401StatusCode =
    (typeof GetUsersSelfSelfIdMelodleGuessSong401StatusCode)[keyof typeof GetUsersSelfSelfIdMelodleGuessSong401StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetUsersSelfSelfIdMelodleGuessSong401StatusCode = {
    NUMBER_401: 401,
} as const;

/**
 * unauthorized
 */
export type GetUsersSelfSelfIdMelodleGuessSong401 = {
    error: string;
    message: string;
    statusCode: GetUsersSelfSelfIdMelodleGuessSong401StatusCode;
    [key: string]: unknown;
};

export type GetUsersSelfSelfIdMelodleGuessSong200Config = {
    /** The artists we can choose from, by their spotify ids. */
    fromArtists: string[];
    /** Unique identifier for a config. */
    id: number;
    /** @pattern ^(Guess Line|Guess Song)$ */
    mode: string;
    /** Whether to pick from any artist or only favorited ones. */
    onlyFavoriteArtists: boolean;
};

export type GetUsersSelfSelfIdMelodleGuessSong200AttemptsAnyOfTwoItem = {
    guessedAt: string;
    /**
     * A line to match against the actual line of the song.
     * @maxLength 1000
     */
    guessedLine: string;
};

export type GetUsersSelfSelfIdMelodleGuessSong200AttemptsAnyOfItem = {
    guessedAt: string;
    /** Identifier which can be used to fetch artist data from MusixMatch. */
    guessedSongId: string;
};

export type GetUsersSelfSelfIdMelodleGuessSong200Attempts =
    | GetUsersSelfSelfIdMelodleGuessSong200AttemptsAnyOfItem[]
    | GetUsersSelfSelfIdMelodleGuessSong200AttemptsAnyOfTwoItem[];

export type GetUsersSelfSelfIdMelodleGuessSong200 = {
    attempts: GetUsersSelfSelfIdMelodleGuessSong200Attempts;
    config: GetUsersSelfSelfIdMelodleGuessSong200Config;
    endingTime?: string;
    /** A unique identifier for a melodle game. */
    gameId: number;
    /** @pattern ^(Guess Line|Guess Song)$ */
    gameMode: string;
    /** A numeric identifier for a user. Generated by the backend, unique and unchangeable. */
    userId: number;
    won?: boolean;
};

export type GetUsersSelfSelfIdFriendsLeaderboards401StatusCode =
    (typeof GetUsersSelfSelfIdFriendsLeaderboards401StatusCode)[keyof typeof GetUsersSelfSelfIdFriendsLeaderboards401StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetUsersSelfSelfIdFriendsLeaderboards401StatusCode = {
    NUMBER_401: 401,
} as const;

/**
 * unauthorized
 */
export type GetUsersSelfSelfIdFriendsLeaderboards401 = {
    error: string;
    message: string;
    statusCode: GetUsersSelfSelfIdFriendsLeaderboards401StatusCode;
    [key: string]: unknown;
};

export type GetUsersSelfSelfIdFriendsLeaderboards200LeaderboardItemAllOfTwo = {
    /** Players' position ordered from higest to lowest score. */
    rank: number;
    /** Score calculated by user performance within their games. */
    score: number;
};

export type GetUsersSelfSelfIdFriendsLeaderboards200LeaderboardItemAllOf = {
    /** A numeric identifier for a user. Generated by the backend, unique and unchangeable. */
    id: number;
    /**
     * The user's display name. It does not need to be unique.
     * @minLength 1
     * @maxLength 25
     */
    name: string;
    /** File name required to fetch the image from the route to get specific user icons. */
    profilePictureFilename: string;
    /**
   * The id to display to users. They must be unique, but the users can choose and change them.
### Rules
- Only accepts letters, digits and '.', '-', '_'.
   * @minLength 3
   * @maxLength 50
   * @pattern ^[a-zA-Z0-9\.-_]+$
   */
    username: string;
};

export type GetUsersSelfSelfIdFriendsLeaderboards200LeaderboardItem =
    GetUsersSelfSelfIdFriendsLeaderboards200LeaderboardItemAllOf &
        GetUsersSelfSelfIdFriendsLeaderboards200LeaderboardItemAllOfTwo;

/**
 * A leaderboard of melodle users.
 */
export type GetUsersSelfSelfIdFriendsLeaderboards200 = {
    leaderboard: GetUsersSelfSelfIdFriendsLeaderboards200LeaderboardItem[];
};

export type GetUsersSelfSelfIdFriendsLeaderboardsParams = {
    /**
     * States when a range starts.
     */
    start: number;
    /**
     * A number which defines range size.
     */
    amount: number;
    gameModes: string[];
};

export type PutUsersSelfSelfIdFriendsTargetUserId428StatusCode =
    (typeof PutUsersSelfSelfIdFriendsTargetUserId428StatusCode)[keyof typeof PutUsersSelfSelfIdFriendsTargetUserId428StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PutUsersSelfSelfIdFriendsTargetUserId428StatusCode = {
    NUMBER_428: 428,
} as const;

/**
 * preconditionRequired
 */
export type PutUsersSelfSelfIdFriendsTargetUserId428 = {
    error: string;
    message: string;
    statusCode: PutUsersSelfSelfIdFriendsTargetUserId428StatusCode;
    [key: string]: unknown;
};

export type PutUsersSelfSelfIdFriendsTargetUserId404StatusCode =
    (typeof PutUsersSelfSelfIdFriendsTargetUserId404StatusCode)[keyof typeof PutUsersSelfSelfIdFriendsTargetUserId404StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PutUsersSelfSelfIdFriendsTargetUserId404StatusCode = {
    NUMBER_404: 404,
} as const;

/**
 * notFound
 */
export type PutUsersSelfSelfIdFriendsTargetUserId404 = {
    error: string;
    message: string;
    statusCode: PutUsersSelfSelfIdFriendsTargetUserId404StatusCode;
    [key: string]: unknown;
};

export type PutUsersSelfSelfIdFriendsTargetUserId403StatusCode =
    (typeof PutUsersSelfSelfIdFriendsTargetUserId403StatusCode)[keyof typeof PutUsersSelfSelfIdFriendsTargetUserId403StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PutUsersSelfSelfIdFriendsTargetUserId403StatusCode = {
    NUMBER_403: 403,
} as const;

/**
 * forbidden
 */
export type PutUsersSelfSelfIdFriendsTargetUserId403 = {
    error: string;
    message: string;
    statusCode: PutUsersSelfSelfIdFriendsTargetUserId403StatusCode;
    [key: string]: unknown;
};

export type PutUsersSelfSelfIdFriendsTargetUserId401StatusCode =
    (typeof PutUsersSelfSelfIdFriendsTargetUserId401StatusCode)[keyof typeof PutUsersSelfSelfIdFriendsTargetUserId401StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PutUsersSelfSelfIdFriendsTargetUserId401StatusCode = {
    NUMBER_401: 401,
} as const;

/**
 * unauthorized
 */
export type PutUsersSelfSelfIdFriendsTargetUserId401 = {
    error: string;
    message: string;
    statusCode: PutUsersSelfSelfIdFriendsTargetUserId401StatusCode;
    [key: string]: unknown;
};

export type PutUsersSelfSelfIdFriendsTargetUserId400StatusCode =
    (typeof PutUsersSelfSelfIdFriendsTargetUserId400StatusCode)[keyof typeof PutUsersSelfSelfIdFriendsTargetUserId400StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PutUsersSelfSelfIdFriendsTargetUserId400StatusCode = {
    NUMBER_400: 400,
} as const;

/**
 * badRequest
 */
export type PutUsersSelfSelfIdFriendsTargetUserId400 = {
    error: string;
    message: string;
    statusCode: PutUsersSelfSelfIdFriendsTargetUserId400StatusCode;
    [key: string]: unknown;
};

export type PutUsersSelfSelfIdFriendsTargetUserId200 = {
    /** @pattern ^(pending|blocked|accepted)$ */
    status: string;
    /**
   * The id to display to users. They must be unique, but the users can choose and change them.
### Rules
- Only accepts letters, digits and '.', '-', '_'.
   * @minLength 3
   * @maxLength 50
   * @pattern ^[a-zA-Z0-9\.-_]+$
   */
    username: string;
};

export type PostUsersSelfSelfIdFriendsTargetUserId404StatusCode =
    (typeof PostUsersSelfSelfIdFriendsTargetUserId404StatusCode)[keyof typeof PostUsersSelfSelfIdFriendsTargetUserId404StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostUsersSelfSelfIdFriendsTargetUserId404StatusCode = {
    NUMBER_404: 404,
} as const;

/**
 * notFound
 */
export type PostUsersSelfSelfIdFriendsTargetUserId404 = {
    error: string;
    message: string;
    statusCode: PostUsersSelfSelfIdFriendsTargetUserId404StatusCode;
    [key: string]: unknown;
};

export type PostUsersSelfSelfIdFriendsTargetUserId403StatusCode =
    (typeof PostUsersSelfSelfIdFriendsTargetUserId403StatusCode)[keyof typeof PostUsersSelfSelfIdFriendsTargetUserId403StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostUsersSelfSelfIdFriendsTargetUserId403StatusCode = {
    NUMBER_403: 403,
} as const;

/**
 * forbidden
 */
export type PostUsersSelfSelfIdFriendsTargetUserId403 = {
    error: string;
    message: string;
    statusCode: PostUsersSelfSelfIdFriendsTargetUserId403StatusCode;
    [key: string]: unknown;
};

export type PostUsersSelfSelfIdFriendsTargetUserId401StatusCode =
    (typeof PostUsersSelfSelfIdFriendsTargetUserId401StatusCode)[keyof typeof PostUsersSelfSelfIdFriendsTargetUserId401StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostUsersSelfSelfIdFriendsTargetUserId401StatusCode = {
    NUMBER_401: 401,
} as const;

/**
 * unauthorized
 */
export type PostUsersSelfSelfIdFriendsTargetUserId401 = {
    error: string;
    message: string;
    statusCode: PostUsersSelfSelfIdFriendsTargetUserId401StatusCode;
    [key: string]: unknown;
};

export type PostUsersSelfSelfIdFriendsTargetUserId400StatusCode =
    (typeof PostUsersSelfSelfIdFriendsTargetUserId400StatusCode)[keyof typeof PostUsersSelfSelfIdFriendsTargetUserId400StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostUsersSelfSelfIdFriendsTargetUserId400StatusCode = {
    NUMBER_400: 400,
} as const;

/**
 * badRequest
 */
export type PostUsersSelfSelfIdFriendsTargetUserId400 = {
    error: string;
    message: string;
    statusCode: PostUsersSelfSelfIdFriendsTargetUserId400StatusCode;
    [key: string]: unknown;
};

export type PostUsersSelfSelfIdFriendsTargetUserId201 = {
    /** @pattern ^(pending|blocked|accepted)$ */
    status: string;
    /**
   * The id to display to users. They must be unique, but the users can choose and change them.
### Rules
- Only accepts letters, digits and '.', '-', '_'.
   * @minLength 3
   * @maxLength 50
   * @pattern ^[a-zA-Z0-9\.-_]+$
   */
    username: string;
};

export type DeleteUsersSelfSelfIdFriendsTargetUserId404StatusCode =
    (typeof DeleteUsersSelfSelfIdFriendsTargetUserId404StatusCode)[keyof typeof DeleteUsersSelfSelfIdFriendsTargetUserId404StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteUsersSelfSelfIdFriendsTargetUserId404StatusCode = {
    NUMBER_404: 404,
} as const;

/**
 * notFound
 */
export type DeleteUsersSelfSelfIdFriendsTargetUserId404 = {
    error: string;
    message: string;
    statusCode: DeleteUsersSelfSelfIdFriendsTargetUserId404StatusCode;
    [key: string]: unknown;
};

export type DeleteUsersSelfSelfIdFriendsTargetUserId401StatusCode =
    (typeof DeleteUsersSelfSelfIdFriendsTargetUserId401StatusCode)[keyof typeof DeleteUsersSelfSelfIdFriendsTargetUserId401StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteUsersSelfSelfIdFriendsTargetUserId401StatusCode = {
    NUMBER_401: 401,
} as const;

/**
 * unauthorized
 */
export type DeleteUsersSelfSelfIdFriendsTargetUserId401 = {
    error: string;
    message: string;
    statusCode: DeleteUsersSelfSelfIdFriendsTargetUserId401StatusCode;
    [key: string]: unknown;
};

export type DeleteUsersSelfSelfIdFriendsTargetUserId400StatusCode =
    (typeof DeleteUsersSelfSelfIdFriendsTargetUserId400StatusCode)[keyof typeof DeleteUsersSelfSelfIdFriendsTargetUserId400StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteUsersSelfSelfIdFriendsTargetUserId400StatusCode = {
    NUMBER_400: 400,
} as const;

/**
 * badRequest
 */
export type DeleteUsersSelfSelfIdFriendsTargetUserId400 = {
    error: string;
    message: string;
    statusCode: DeleteUsersSelfSelfIdFriendsTargetUserId400StatusCode;
    [key: string]: unknown;
};

export type DeleteUsersSelfSelfIdFriendsTargetUserId200 = {
    /**
   * The id to display to users. They must be unique, but the users can choose and change them.
### Rules
- Only accepts letters, digits and '.', '-', '_'.
   * @minLength 3
   * @maxLength 50
   * @pattern ^[a-zA-Z0-9\.-_]+$
   */
    username: string;
};

export type DeleteUsersSelfSelfIdBlockingTargetUserId404StatusCode =
    (typeof DeleteUsersSelfSelfIdBlockingTargetUserId404StatusCode)[keyof typeof DeleteUsersSelfSelfIdBlockingTargetUserId404StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteUsersSelfSelfIdBlockingTargetUserId404StatusCode = {
    NUMBER_404: 404,
} as const;

/**
 * notFound
 */
export type DeleteUsersSelfSelfIdBlockingTargetUserId404 = {
    error: string;
    message: string;
    statusCode: DeleteUsersSelfSelfIdBlockingTargetUserId404StatusCode;
    [key: string]: unknown;
};

export type DeleteUsersSelfSelfIdBlockingTargetUserId401StatusCode =
    (typeof DeleteUsersSelfSelfIdBlockingTargetUserId401StatusCode)[keyof typeof DeleteUsersSelfSelfIdBlockingTargetUserId401StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteUsersSelfSelfIdBlockingTargetUserId401StatusCode = {
    NUMBER_401: 401,
} as const;

/**
 * unauthorized
 */
export type DeleteUsersSelfSelfIdBlockingTargetUserId401 = {
    error: string;
    message: string;
    statusCode: DeleteUsersSelfSelfIdBlockingTargetUserId401StatusCode;
    [key: string]: unknown;
};

export type DeleteUsersSelfSelfIdBlockingTargetUserId400StatusCode =
    (typeof DeleteUsersSelfSelfIdBlockingTargetUserId400StatusCode)[keyof typeof DeleteUsersSelfSelfIdBlockingTargetUserId400StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteUsersSelfSelfIdBlockingTargetUserId400StatusCode = {
    NUMBER_400: 400,
} as const;

/**
 * badRequest
 */
export type DeleteUsersSelfSelfIdBlockingTargetUserId400 = {
    error: string;
    message: string;
    statusCode: DeleteUsersSelfSelfIdBlockingTargetUserId400StatusCode;
    [key: string]: unknown;
};

export type DeleteUsersSelfSelfIdBlockingTargetUserId200 = {
    blocked: boolean;
    username: string;
};

export type PostUsersSelfSelfIdBlockingTargetUserId404StatusCode =
    (typeof PostUsersSelfSelfIdBlockingTargetUserId404StatusCode)[keyof typeof PostUsersSelfSelfIdBlockingTargetUserId404StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostUsersSelfSelfIdBlockingTargetUserId404StatusCode = {
    NUMBER_404: 404,
} as const;

/**
 * notFound
 */
export type PostUsersSelfSelfIdBlockingTargetUserId404 = {
    error: string;
    message: string;
    statusCode: PostUsersSelfSelfIdBlockingTargetUserId404StatusCode;
    [key: string]: unknown;
};

export type PostUsersSelfSelfIdBlockingTargetUserId403StatusCode =
    (typeof PostUsersSelfSelfIdBlockingTargetUserId403StatusCode)[keyof typeof PostUsersSelfSelfIdBlockingTargetUserId403StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostUsersSelfSelfIdBlockingTargetUserId403StatusCode = {
    NUMBER_403: 403,
} as const;

/**
 * forbidden
 */
export type PostUsersSelfSelfIdBlockingTargetUserId403 = {
    error: string;
    message: string;
    statusCode: PostUsersSelfSelfIdBlockingTargetUserId403StatusCode;
    [key: string]: unknown;
};

export type PostUsersSelfSelfIdBlockingTargetUserId401StatusCode =
    (typeof PostUsersSelfSelfIdBlockingTargetUserId401StatusCode)[keyof typeof PostUsersSelfSelfIdBlockingTargetUserId401StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostUsersSelfSelfIdBlockingTargetUserId401StatusCode = {
    NUMBER_401: 401,
} as const;

/**
 * unauthorized
 */
export type PostUsersSelfSelfIdBlockingTargetUserId401 = {
    error: string;
    message: string;
    statusCode: PostUsersSelfSelfIdBlockingTargetUserId401StatusCode;
    [key: string]: unknown;
};

export type PostUsersSelfSelfIdBlockingTargetUserId400StatusCode =
    (typeof PostUsersSelfSelfIdBlockingTargetUserId400StatusCode)[keyof typeof PostUsersSelfSelfIdBlockingTargetUserId400StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostUsersSelfSelfIdBlockingTargetUserId400StatusCode = {
    NUMBER_400: 400,
} as const;

/**
 * badRequest
 */
export type PostUsersSelfSelfIdBlockingTargetUserId400 = {
    error: string;
    message: string;
    statusCode: PostUsersSelfSelfIdBlockingTargetUserId400StatusCode;
    [key: string]: unknown;
};

export type PostUsersSelfSelfIdBlockingTargetUserId201 = {
    blocked: boolean;
    username: string;
};

export type DeleteUsersSelfSelfIdArtistsSpotifyArtistId404StatusCode =
    (typeof DeleteUsersSelfSelfIdArtistsSpotifyArtistId404StatusCode)[keyof typeof DeleteUsersSelfSelfIdArtistsSpotifyArtistId404StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteUsersSelfSelfIdArtistsSpotifyArtistId404StatusCode = {
    NUMBER_404: 404,
} as const;

/**
 * notFound
 */
export type DeleteUsersSelfSelfIdArtistsSpotifyArtistId404 = {
    error: string;
    message: string;
    statusCode: DeleteUsersSelfSelfIdArtistsSpotifyArtistId404StatusCode;
    [key: string]: unknown;
};

export type DeleteUsersSelfSelfIdArtistsSpotifyArtistId401StatusCode =
    (typeof DeleteUsersSelfSelfIdArtistsSpotifyArtistId401StatusCode)[keyof typeof DeleteUsersSelfSelfIdArtistsSpotifyArtistId401StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteUsersSelfSelfIdArtistsSpotifyArtistId401StatusCode = {
    NUMBER_401: 401,
} as const;

/**
 * unauthorized
 */
export type DeleteUsersSelfSelfIdArtistsSpotifyArtistId401 = {
    error: string;
    message: string;
    statusCode: DeleteUsersSelfSelfIdArtistsSpotifyArtistId401StatusCode;
    [key: string]: unknown;
};

export type DeleteUsersSelfSelfIdArtistsSpotifyArtistId400StatusCode =
    (typeof DeleteUsersSelfSelfIdArtistsSpotifyArtistId400StatusCode)[keyof typeof DeleteUsersSelfSelfIdArtistsSpotifyArtistId400StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteUsersSelfSelfIdArtistsSpotifyArtistId400StatusCode = {
    NUMBER_400: 400,
} as const;

/**
 * badRequest
 */
export type DeleteUsersSelfSelfIdArtistsSpotifyArtistId400 = {
    error: string;
    message: string;
    statusCode: DeleteUsersSelfSelfIdArtistsSpotifyArtistId400StatusCode;
    [key: string]: unknown;
};

export type DeleteUsersSelfSelfIdArtistsSpotifyArtistId200 = {
    deleted: boolean;
};

export type PostUsersSelfSelfIdArtistsSpotifyArtistId404StatusCode =
    (typeof PostUsersSelfSelfIdArtistsSpotifyArtistId404StatusCode)[keyof typeof PostUsersSelfSelfIdArtistsSpotifyArtistId404StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostUsersSelfSelfIdArtistsSpotifyArtistId404StatusCode = {
    NUMBER_404: 404,
} as const;

/**
 * notFound
 */
export type PostUsersSelfSelfIdArtistsSpotifyArtistId404 = {
    error: string;
    message: string;
    statusCode: PostUsersSelfSelfIdArtistsSpotifyArtistId404StatusCode;
    [key: string]: unknown;
};

export type PostUsersSelfSelfIdArtistsSpotifyArtistId401StatusCode =
    (typeof PostUsersSelfSelfIdArtistsSpotifyArtistId401StatusCode)[keyof typeof PostUsersSelfSelfIdArtistsSpotifyArtistId401StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostUsersSelfSelfIdArtistsSpotifyArtistId401StatusCode = {
    NUMBER_401: 401,
} as const;

/**
 * unauthorized
 */
export type PostUsersSelfSelfIdArtistsSpotifyArtistId401 = {
    error: string;
    message: string;
    statusCode: PostUsersSelfSelfIdArtistsSpotifyArtistId401StatusCode;
    [key: string]: unknown;
};

export type PostUsersSelfSelfIdArtistsSpotifyArtistId400StatusCode =
    (typeof PostUsersSelfSelfIdArtistsSpotifyArtistId400StatusCode)[keyof typeof PostUsersSelfSelfIdArtistsSpotifyArtistId400StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostUsersSelfSelfIdArtistsSpotifyArtistId400StatusCode = {
    NUMBER_400: 400,
} as const;

/**
 * badRequest
 */
export type PostUsersSelfSelfIdArtistsSpotifyArtistId400 = {
    error: string;
    message: string;
    statusCode: PostUsersSelfSelfIdArtistsSpotifyArtistId400StatusCode;
    [key: string]: unknown;
};

export type PostUsersSelfSelfIdArtistsSpotifyArtistId200 = {
    /** Name of the artist, does not have to be unique. */
    name: string;
};

export type PutUsersSelfSelfIdArtistsSpotifyArtistIdFavorite404StatusCode =
    (typeof PutUsersSelfSelfIdArtistsSpotifyArtistIdFavorite404StatusCode)[keyof typeof PutUsersSelfSelfIdArtistsSpotifyArtistIdFavorite404StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PutUsersSelfSelfIdArtistsSpotifyArtistIdFavorite404StatusCode = {
    NUMBER_404: 404,
} as const;

/**
 * notFound
 */
export type PutUsersSelfSelfIdArtistsSpotifyArtistIdFavorite404 = {
    error: string;
    message: string;
    statusCode: PutUsersSelfSelfIdArtistsSpotifyArtistIdFavorite404StatusCode;
    [key: string]: unknown;
};

export type PutUsersSelfSelfIdArtistsSpotifyArtistIdFavorite403StatusCode =
    (typeof PutUsersSelfSelfIdArtistsSpotifyArtistIdFavorite403StatusCode)[keyof typeof PutUsersSelfSelfIdArtistsSpotifyArtistIdFavorite403StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PutUsersSelfSelfIdArtistsSpotifyArtistIdFavorite403StatusCode = {
    NUMBER_403: 403,
} as const;

/**
 * forbidden
 */
export type PutUsersSelfSelfIdArtistsSpotifyArtistIdFavorite403 = {
    error: string;
    message: string;
    statusCode: PutUsersSelfSelfIdArtistsSpotifyArtistIdFavorite403StatusCode;
    [key: string]: unknown;
};

export type PutUsersSelfSelfIdArtistsSpotifyArtistIdFavorite401StatusCode =
    (typeof PutUsersSelfSelfIdArtistsSpotifyArtistIdFavorite401StatusCode)[keyof typeof PutUsersSelfSelfIdArtistsSpotifyArtistIdFavorite401StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PutUsersSelfSelfIdArtistsSpotifyArtistIdFavorite401StatusCode = {
    NUMBER_401: 401,
} as const;

/**
 * unauthorized
 */
export type PutUsersSelfSelfIdArtistsSpotifyArtistIdFavorite401 = {
    error: string;
    message: string;
    statusCode: PutUsersSelfSelfIdArtistsSpotifyArtistIdFavorite401StatusCode;
    [key: string]: unknown;
};

export type PutUsersSelfSelfIdArtistsSpotifyArtistIdFavorite200 = {
    isFavorite: boolean;
};

export type PutUsersSelfSelfIdArtistsSpotifyArtistIdFavoriteBody = {
    isFavorite: boolean;
};

export type GetUsersSelfSelfIdMelodleHistory401StatusCode =
    (typeof GetUsersSelfSelfIdMelodleHistory401StatusCode)[keyof typeof GetUsersSelfSelfIdMelodleHistory401StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetUsersSelfSelfIdMelodleHistory401StatusCode = {
    NUMBER_401: 401,
} as const;

/**
 * unauthorized
 */
export type GetUsersSelfSelfIdMelodleHistory401 = {
    error: string;
    message: string;
    statusCode: GetUsersSelfSelfIdMelodleHistory401StatusCode;
    [key: string]: unknown;
};

export type GetUsersSelfSelfIdMelodleHistory200ItemConfig = {
    /** The artists we can choose from, by their spotify ids. */
    fromArtists: string[];
    /** Unique identifier for a config. */
    id: number;
    /** @pattern ^(Guess Line|Guess Song)$ */
    mode: string;
    /** Whether to pick from any artist or only favorited ones. */
    onlyFavoriteArtists: boolean;
};

export type GetUsersSelfSelfIdMelodleHistory200ItemAttemptsAnyOfTwoItem = {
    guessedAt: string;
    /**
     * A line to match against the actual line of the song.
     * @maxLength 1000
     */
    guessedLine: string;
};

export type GetUsersSelfSelfIdMelodleHistory200ItemAttemptsAnyOfItem = {
    guessedAt: string;
    /** Identifier which can be used to fetch artist data from MusixMatch. */
    guessedSongId: string;
};

export type GetUsersSelfSelfIdMelodleHistory200ItemAttempts =
    | GetUsersSelfSelfIdMelodleHistory200ItemAttemptsAnyOfItem[]
    | GetUsersSelfSelfIdMelodleHistory200ItemAttemptsAnyOfTwoItem[];

export type GetUsersSelfSelfIdMelodleHistory200Item = {
    attempts: GetUsersSelfSelfIdMelodleHistory200ItemAttempts;
    config: GetUsersSelfSelfIdMelodleHistory200ItemConfig;
    endingTime?: string;
    /** A unique identifier for a melodle game. */
    gameId: number;
    /** @pattern ^(Guess Line|Guess Song)$ */
    gameMode: string;
    /** A numeric identifier for a user. Generated by the backend, unique and unchangeable. */
    userId: number;
    won?: boolean;
};

export type PostUsersSelfSelfIdMelodle425StatusCode =
    (typeof PostUsersSelfSelfIdMelodle425StatusCode)[keyof typeof PostUsersSelfSelfIdMelodle425StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostUsersSelfSelfIdMelodle425StatusCode = {
    NUMBER_425: 425,
} as const;

/**
 * tooEarly
 */
export type PostUsersSelfSelfIdMelodle425 = {
    error: string;
    message: string;
    statusCode: PostUsersSelfSelfIdMelodle425StatusCode;
    [key: string]: unknown;
};

export type PostUsersSelfSelfIdMelodle401StatusCode =
    (typeof PostUsersSelfSelfIdMelodle401StatusCode)[keyof typeof PostUsersSelfSelfIdMelodle401StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostUsersSelfSelfIdMelodle401StatusCode = {
    NUMBER_401: 401,
} as const;

/**
 * unauthorized
 */
export type PostUsersSelfSelfIdMelodle401 = {
    error: string;
    message: string;
    statusCode: PostUsersSelfSelfIdMelodle401StatusCode;
    [key: string]: unknown;
};

export type PostUsersSelfSelfIdMelodle200Config = {
    /** The artists we can choose from, by their spotify ids. */
    fromArtists: string[];
    /** Unique identifier for a config. */
    id: number;
    /** @pattern ^(Guess Line|Guess Song)$ */
    mode: string;
    /** Whether to pick from any artist or only favorited ones. */
    onlyFavoriteArtists: boolean;
};

export type PostUsersSelfSelfIdMelodle200 = {
    config: PostUsersSelfSelfIdMelodle200Config;
    /** A unique identifier for a melodle game. */
    gameId: number;
};

export type PostUsersSelfSelfIdMelodleBody = {
    /** The artists we can choose from, by their spotify ids. */
    fromArtists: string[];
    /** Unique identifier for a config. */
    id: number;
    /** @pattern ^(Guess Line|Guess Song)$ */
    mode: string;
    /** Whether to pick from any artist or only favorited ones. */
    onlyFavoriteArtists: boolean;
};

export type GetUsersSelfSelfIdFriends401StatusCode =
    (typeof GetUsersSelfSelfIdFriends401StatusCode)[keyof typeof GetUsersSelfSelfIdFriends401StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetUsersSelfSelfIdFriends401StatusCode = {
    NUMBER_401: 401,
} as const;

/**
 * unauthorized
 */
export type GetUsersSelfSelfIdFriends401 = {
    error: string;
    message: string;
    statusCode: GetUsersSelfSelfIdFriends401StatusCode;
    [key: string]: unknown;
};

export type GetUsersSelfSelfIdFriends200Item = {
    /** A numeric identifier for a user. Generated by the backend, unique and unchangeable. */
    id: number;
    /**
     * The user's display name. It does not need to be unique.
     * @minLength 1
     * @maxLength 25
     */
    name: string;
    /** File name required to fetch the image from the route to get specific user icons. */
    profilePictureFilename: string;
    /** The id to the profile picture of the user. These pictures cannot be uploaded, we store the options manually. */
    profilePictureId: number;
    selfIsRequestSender: boolean;
    /** @pattern ^(pending|blocked|accepted)$ */
    status: string;
    /**
   * The id to display to users. They must be unique, but the users can choose and change them.
### Rules
- Only accepts letters, digits and '.', '-', '_'.
   * @minLength 3
   * @maxLength 50
   * @pattern ^[a-zA-Z0-9\.-_]+$
   */
    username: string;
};

export type GetUsersSelfSelfIdBlocking401StatusCode =
    (typeof GetUsersSelfSelfIdBlocking401StatusCode)[keyof typeof GetUsersSelfSelfIdBlocking401StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetUsersSelfSelfIdBlocking401StatusCode = {
    NUMBER_401: 401,
} as const;

/**
 * unauthorized
 */
export type GetUsersSelfSelfIdBlocking401 = {
    error: string;
    message: string;
    statusCode: GetUsersSelfSelfIdBlocking401StatusCode;
    [key: string]: unknown;
};

export type GetUsersSelfSelfIdBlocking200Item = {
    /** A numeric identifier for a user. Generated by the backend, unique and unchangeable. */
    id: number;
    /**
     * The user's display name. It does not need to be unique.
     * @minLength 1
     * @maxLength 25
     */
    name: string;
    /** File name required to fetch the image from the route to get specific user icons. */
    profilePictureFilename: string;
    /** The id to the profile picture of the user. These pictures cannot be uploaded, we store the options manually. */
    profilePictureId: number;
    /**
   * The id to display to users. They must be unique, but the users can choose and change them.
### Rules
- Only accepts letters, digits and '.', '-', '_'.
   * @minLength 3
   * @maxLength 50
   * @pattern ^[a-zA-Z0-9\.-_]+$
   */
    username: string;
};

export type GetUsersSelfSelfIdConfigsSuggest401StatusCode =
    (typeof GetUsersSelfSelfIdConfigsSuggest401StatusCode)[keyof typeof GetUsersSelfSelfIdConfigsSuggest401StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetUsersSelfSelfIdConfigsSuggest401StatusCode = {
    NUMBER_401: 401,
} as const;

/**
 * unauthorized
 */
export type GetUsersSelfSelfIdConfigsSuggest401 = {
    error: string;
    message: string;
    statusCode: GetUsersSelfSelfIdConfigsSuggest401StatusCode;
    [key: string]: unknown;
};

export type GetUsersSelfSelfIdConfigsSuggest200Item = {
    /** The artists we can choose from, by their spotify ids. */
    fromArtists: string[];
    /** @pattern ^(Guess Line|Guess Song)$ */
    mode: string;
    /** Whether to pick from any artist or only favorited ones. */
    onlyFavoriteArtists: boolean;
};

export type GetUsersSelfSelfIdConfigsSuggestParams = {
    /**
     * The user's id to use to connect with spotify services. It is not stored within the database, but some requests need it to function.
     */
    spotifyId: string;
};

export type PutUsersSelfSelfIdConfigsMelodleConfigId404StatusCode =
    (typeof PutUsersSelfSelfIdConfigsMelodleConfigId404StatusCode)[keyof typeof PutUsersSelfSelfIdConfigsMelodleConfigId404StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PutUsersSelfSelfIdConfigsMelodleConfigId404StatusCode = {
    NUMBER_404: 404,
} as const;

/**
 * notFound
 */
export type PutUsersSelfSelfIdConfigsMelodleConfigId404 = {
    error: string;
    message: string;
    statusCode: PutUsersSelfSelfIdConfigsMelodleConfigId404StatusCode;
    [key: string]: unknown;
};

export type PutUsersSelfSelfIdConfigsMelodleConfigId401StatusCode =
    (typeof PutUsersSelfSelfIdConfigsMelodleConfigId401StatusCode)[keyof typeof PutUsersSelfSelfIdConfigsMelodleConfigId401StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PutUsersSelfSelfIdConfigsMelodleConfigId401StatusCode = {
    NUMBER_401: 401,
} as const;

/**
 * unauthorized
 */
export type PutUsersSelfSelfIdConfigsMelodleConfigId401 = {
    error: string;
    message: string;
    statusCode: PutUsersSelfSelfIdConfigsMelodleConfigId401StatusCode;
    [key: string]: unknown;
};

export type PutUsersSelfSelfIdConfigsMelodleConfigId200 = {
    /** The artists we can choose from, by their spotify ids. */
    fromArtists: string[];
    /** Unique identifier for a config. */
    id: number;
    /** @pattern ^(Guess Line|Guess Song)$ */
    mode: string;
    /** Whether to pick from any artist or only favorited ones. */
    onlyFavoriteArtists: boolean;
};

export type DeleteUsersSelfSelfIdConfigsMelodleConfigId404StatusCode =
    (typeof DeleteUsersSelfSelfIdConfigsMelodleConfigId404StatusCode)[keyof typeof DeleteUsersSelfSelfIdConfigsMelodleConfigId404StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteUsersSelfSelfIdConfigsMelodleConfigId404StatusCode = {
    NUMBER_404: 404,
} as const;

/**
 * notFound
 */
export type DeleteUsersSelfSelfIdConfigsMelodleConfigId404 = {
    error: string;
    message: string;
    statusCode: DeleteUsersSelfSelfIdConfigsMelodleConfigId404StatusCode;
    [key: string]: unknown;
};

export type DeleteUsersSelfSelfIdConfigsMelodleConfigId401StatusCode =
    (typeof DeleteUsersSelfSelfIdConfigsMelodleConfigId401StatusCode)[keyof typeof DeleteUsersSelfSelfIdConfigsMelodleConfigId401StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteUsersSelfSelfIdConfigsMelodleConfigId401StatusCode = {
    NUMBER_401: 401,
} as const;

/**
 * unauthorized
 */
export type DeleteUsersSelfSelfIdConfigsMelodleConfigId401 = {
    error: string;
    message: string;
    statusCode: DeleteUsersSelfSelfIdConfigsMelodleConfigId401StatusCode;
    [key: string]: unknown;
};

export type DeleteUsersSelfSelfIdConfigsMelodleConfigId200 = {
    /** The artists we can choose from, by their spotify ids. */
    fromArtists: string[];
    /** Unique identifier for a config. */
    id: number;
    /** @pattern ^(Guess Line|Guess Song)$ */
    mode: string;
    /** Whether to pick from any artist or only favorited ones. */
    onlyFavoriteArtists: boolean;
};

export type PostUsersSelfSelfIdConfigs401StatusCode =
    (typeof PostUsersSelfSelfIdConfigs401StatusCode)[keyof typeof PostUsersSelfSelfIdConfigs401StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostUsersSelfSelfIdConfigs401StatusCode = {
    NUMBER_401: 401,
} as const;

/**
 * unauthorized
 */
export type PostUsersSelfSelfIdConfigs401 = {
    error: string;
    message: string;
    statusCode: PostUsersSelfSelfIdConfigs401StatusCode;
    [key: string]: unknown;
};

export type PostUsersSelfSelfIdConfigs200 = {
    /** The artists we can choose from, by their spotify ids. */
    fromArtists: string[];
    /** Unique identifier for a config. */
    id: number;
    /** @pattern ^(Guess Line|Guess Song)$ */
    mode: string;
    /** Whether to pick from any artist or only favorited ones. */
    onlyFavoriteArtists: boolean;
};

export type PostUsersSelfSelfIdConfigsBody = {
    /** The artists we can choose from, by their spotify ids. */
    fromArtists: string[];
    /** @pattern ^(Guess Line|Guess Song)$ */
    mode: string;
    /** Whether to pick from any artist or only favorited ones. */
    onlyFavoriteArtists: boolean;
};

export type GetUsersSelfSelfIdConfigs401StatusCode =
    (typeof GetUsersSelfSelfIdConfigs401StatusCode)[keyof typeof GetUsersSelfSelfIdConfigs401StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetUsersSelfSelfIdConfigs401StatusCode = {
    NUMBER_401: 401,
} as const;

/**
 * unauthorized
 */
export type GetUsersSelfSelfIdConfigs401 = {
    error: string;
    message: string;
    statusCode: GetUsersSelfSelfIdConfigs401StatusCode;
    [key: string]: unknown;
};

export type GetUsersSelfSelfIdConfigs200Item = {
    /** The artists we can choose from, by their spotify ids. */
    fromArtists: string[];
    /** Unique identifier for a config. */
    id: number;
    /** @pattern ^(Guess Line|Guess Song)$ */
    mode: string;
    /** Whether to pick from any artist or only favorited ones. */
    onlyFavoriteArtists: boolean;
};

export type GetUsersSelfSelfIdArtists404StatusCode =
    (typeof GetUsersSelfSelfIdArtists404StatusCode)[keyof typeof GetUsersSelfSelfIdArtists404StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetUsersSelfSelfIdArtists404StatusCode = {
    NUMBER_404: 404,
} as const;

/**
 * notFound
 */
export type GetUsersSelfSelfIdArtists404 = {
    error: string;
    message: string;
    statusCode: GetUsersSelfSelfIdArtists404StatusCode;
    [key: string]: unknown;
};

export type GetUsersSelfSelfIdArtists401StatusCode =
    (typeof GetUsersSelfSelfIdArtists401StatusCode)[keyof typeof GetUsersSelfSelfIdArtists401StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetUsersSelfSelfIdArtists401StatusCode = {
    NUMBER_401: 401,
} as const;

/**
 * unauthorized
 */
export type GetUsersSelfSelfIdArtists401 = {
    error: string;
    message: string;
    statusCode: GetUsersSelfSelfIdArtists401StatusCode;
    [key: string]: unknown;
};

export type GetUsersSelfSelfIdArtists200ItemData = {
    /** Url that will allow users to be redirected to the artist's profile on Spotify. */
    externalUrls: string;
    /** The number of followers the artist has. */
    followers: number;
    genres: string[];
    /** Url to download the artist's portrait image, if available. */
    imageUrl?: string;
    /** Name of the artist, does not have to be unique. */
    name: string;
    /** Identifier for an artist given by spotify */
    spotifyArtistId: string;
};

export type GetUsersSelfSelfIdArtists200Item = {
    data: GetUsersSelfSelfIdArtists200ItemData;
    isFavorite: boolean;
};

export type DeleteUsersSelfSelfId404StatusCode =
    (typeof DeleteUsersSelfSelfId404StatusCode)[keyof typeof DeleteUsersSelfSelfId404StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteUsersSelfSelfId404StatusCode = {
    NUMBER_404: 404,
} as const;

/**
 * notFound
 */
export type DeleteUsersSelfSelfId404 = {
    error: string;
    message: string;
    statusCode: DeleteUsersSelfSelfId404StatusCode;
    [key: string]: unknown;
};

export type DeleteUsersSelfSelfId401StatusCode =
    (typeof DeleteUsersSelfSelfId401StatusCode)[keyof typeof DeleteUsersSelfSelfId401StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteUsersSelfSelfId401StatusCode = {
    NUMBER_401: 401,
} as const;

/**
 * unauthorized
 */
export type DeleteUsersSelfSelfId401 = {
    error: string;
    message: string;
    statusCode: DeleteUsersSelfSelfId401StatusCode;
    [key: string]: unknown;
};

export type DeleteUsersSelfSelfId200 = {
    /**
   * The id to display to users. They must be unique, but the users can choose and change them.
### Rules
- Only accepts letters, digits and '.', '-', '_'.
   * @minLength 3
   * @maxLength 50
   * @pattern ^[a-zA-Z0-9\.-_]+$
   */
    username: string;
};

export type PutUsersSelfSelfId401StatusCode =
    (typeof PutUsersSelfSelfId401StatusCode)[keyof typeof PutUsersSelfSelfId401StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PutUsersSelfSelfId401StatusCode = {
    NUMBER_401: 401,
} as const;

/**
 * unauthorized
 */
export type PutUsersSelfSelfId401 = {
    error: string;
    message: string;
    statusCode: PutUsersSelfSelfId401StatusCode;
    [key: string]: unknown;
};

export type PutUsersSelfSelfId200 = {
    /**
     * The user's email.
     * @maxLength 254
     * @pattern ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}$
     */
    email: string;
    /**
     * The user's display name. It does not need to be unique.
     * @minLength 1
     * @maxLength 25
     */
    name: string;
    /**
     * A password.
     * @minLength 3
     * @maxLength 20
     */
    password: string;
    /** The id to the profile picture of the user. These pictures cannot be uploaded, we store the options manually. */
    profilePictureId: number;
    /**
   * The id to display to users. They must be unique, but the users can choose and change them.
### Rules
- Only accepts letters, digits and '.', '-', '_'.
   * @minLength 3
   * @maxLength 50
   * @pattern ^[a-zA-Z0-9\.-_]+$
   */
    username: string;
};

export type PutUsersSelfSelfIdBody = {
    /**
     * The user's email.
     * @maxLength 254
     * @pattern ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}$
     */
    email: string;
    /**
     * The user's display name. It does not need to be unique.
     * @minLength 1
     * @maxLength 25
     */
    name: string;
    /**
     * A password.
     * @minLength 3
     * @maxLength 20
     */
    password: string;
    /** The id to the profile picture of the user. These pictures cannot be uploaded, we store the options manually. */
    profilePictureId: number;
    /**
   * The id to display to users. They must be unique, but the users can choose and change them.
### Rules
- Only accepts letters, digits and '.', '-', '_'.
   * @minLength 3
   * @maxLength 50
   * @pattern ^[a-zA-Z0-9\.-_]+$
   */
    username: string;
};

export type GetUsersSelfSelfId401StatusCode =
    (typeof GetUsersSelfSelfId401StatusCode)[keyof typeof GetUsersSelfSelfId401StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetUsersSelfSelfId401StatusCode = {
    NUMBER_401: 401,
} as const;

/**
 * unauthorized
 */
export type GetUsersSelfSelfId401 = {
    error: string;
    message: string;
    statusCode: GetUsersSelfSelfId401StatusCode;
    [key: string]: unknown;
};

export type GetUsersSelfSelfId200 = {
    /**
     * The user's email.
     * @maxLength 254
     * @pattern ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}$
     */
    email: string;
    /** A numeric identifier for a user. Generated by the backend, unique and unchangeable. */
    id: number;
    /**
     * The user's display name. It does not need to be unique.
     * @minLength 1
     * @maxLength 25
     */
    name: string;
    /** File name required to fetch the image from the route to get specific user icons. */
    profilePictureFile: string;
    /** The user's id to use to connect with spotify services. It is not stored within the database, but some requests need it to function. */
    spotifyId: string;
    /**
   * The id to display to users. They must be unique, but the users can choose and change them.
### Rules
- Only accepts letters, digits and '.', '-', '_'.
   * @minLength 3
   * @maxLength 50
   * @pattern ^[a-zA-Z0-9\.-_]+$
   */
    username: string;
};

export type PostDebugFakeUsers201Item = {
    /**
     * The user's email.
     * @maxLength 254
     * @pattern ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}$
     */
    email: string;
    /**
     * The user's display name. It does not need to be unique.
     * @minLength 1
     * @maxLength 25
     */
    name: string;
    /**
     * A password.
     * @minLength 3
     * @maxLength 20
     */
    password: string;
    /** The id to the profile picture of the user. These pictures cannot be uploaded, we store the options manually. */
    profilePictureId: number;
    /**
   * The id to display to users. They must be unique, but the users can choose and change them.
### Rules
- Only accepts letters, digits and '.', '-', '_'.
   * @minLength 3
   * @maxLength 50
   * @pattern ^[a-zA-Z0-9\.-_]+$
   */
    username: string;
};

export type PostDebugFakeUsersBody = {
    /** The amount of users to generate. */
    amount: number;
};

export type GetDebugFakeUser200 = {
    /**
     * The user's email.
     * @maxLength 254
     * @pattern ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}$
     */
    email: string;
    /**
     * The user's display name. It does not need to be unique.
     * @minLength 1
     * @maxLength 25
     */
    name: string;
    /**
     * A password.
     * @minLength 3
     * @maxLength 20
     */
    password: string;
    /** The id to the profile picture of the user. These pictures cannot be uploaded, we store the options manually. */
    profilePictureId: number;
    /**
   * The id to display to users. They must be unique, but the users can choose and change them.
### Rules
- Only accepts letters, digits and '.', '-', '_'.
   * @minLength 3
   * @maxLength 50
   * @pattern ^[a-zA-Z0-9\.-_]+$
   */
    username: string;
};

export type PostAuthRegister400StatusCode =
    (typeof PostAuthRegister400StatusCode)[keyof typeof PostAuthRegister400StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostAuthRegister400StatusCode = {
    NUMBER_400: 400,
} as const;

/**
 * badRequest
 */
export type PostAuthRegister400 = {
    error: string;
    message: string;
    statusCode: PostAuthRegister400StatusCode;
    [key: string]: unknown;
};

export type PostAuthRegister200 = {
    /** A numeric identifier for a user. Generated by the backend, unique and unchangeable. */
    id: number;
    /** The 'encrypted' jwt token. It is easily decryptable, so no sensitive information is stored there. */
    jwtToken: string;
};

export type PostAuthRegisterBody = {
    /**
     * The user's email.
     * @maxLength 254
     * @pattern ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}$
     */
    email: string;
    /**
     * The user's display name. It does not need to be unique.
     * @minLength 1
     * @maxLength 25
     */
    name: string;
    /**
     * A password.
     * @minLength 3
     * @maxLength 20
     */
    password: string;
    /** The id to the profile picture of the user. These pictures cannot be uploaded, we store the options manually. */
    profilePictureId: number;
    /**
   * The id to display to users. They must be unique, but the users can choose and change them.
### Rules
- Only accepts letters, digits and '.', '-', '_'.
   * @minLength 3
   * @maxLength 50
   * @pattern ^[a-zA-Z0-9\.-_]+$
   */
    username: string;
};

export type PostAuthLogin404StatusCode =
    (typeof PostAuthLogin404StatusCode)[keyof typeof PostAuthLogin404StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostAuthLogin404StatusCode = {
    NUMBER_404: 404,
} as const;

/**
 * notFound
 */
export type PostAuthLogin404 = {
    error: string;
    message: string;
    statusCode: PostAuthLogin404StatusCode;
    [key: string]: unknown;
};

export type PostAuthLogin200 = {
    /** A numeric identifier for a user. Generated by the backend, unique and unchangeable. */
    id: number;
    /** The 'encrypted' jwt token. It is easily decryptable, so no sensitive information is stored there. */
    jwtToken: string;
};

export type PostAuthLoginBody = {
    /** @maxLength 254 */
    emailOrUsername: string;
    /**
     * A password.
     * @minLength 3
     * @maxLength 20
     */
    password: string;
};

export type GetUsersCheck200 = {
    emailExists: boolean;
    usernameExists: boolean;
};

export type GetUsersCheckParams = {
    /**
 * The id to display to users. They must be unique, but the users can choose and change them.
### Rules
- Only accepts letters, digits and '.', '-', '_'.
 */
    username?: string;
    /**
     * The user's email.
     */
    email?: string;
};

export type GetUsersSearch200MatchesItem = {
    /** A numeric identifier for a user. Generated by the backend, unique and unchangeable. */
    id: number;
    /**
     * The user's display name. It does not need to be unique.
     * @minLength 1
     * @maxLength 25
     */
    name: string;
    /** File name required to fetch the image from the route to get specific user icons. */
    profilePictureFilename: string;
    /** The id to the profile picture of the user. These pictures cannot be uploaded, we store the options manually. */
    profilePictureId: number;
    /** Similarity ranking, from 0 to 1, 1 meaning equal. */
    rank: number;
    /**
   * The id to display to users. They must be unique, but the users can choose and change them.
### Rules
- Only accepts letters, digits and '.', '-', '_'.
   * @minLength 3
   * @maxLength 50
   * @pattern ^[a-zA-Z0-9\.-_]+$
   */
    username: string;
};

export type GetUsersSearch200 = {
    /** An array of near-matches, sorted from most relevant to least. */
    matches: GetUsersSearch200MatchesItem[];
    /** The total number of pages found with current sent query and page size. */
    totalPages: number;
};

export type GetUsersSearchParams = {
    /**
     * A query to search for an element with a fuzzy algorithm.
     */
    query: string;
    /**
     * The size of page with which to split results.
     */
    pageSize: number;
    /**
     * The page to index into, starting at 0.
     */
    page: number;
};

export type GetUsersUserId200 = {
    /**
     * The user's display name. It does not need to be unique.
     * @minLength 1
     * @maxLength 25
     */
    name: string;
    /** File name required to fetch the image from the route to get specific user icons. */
    profilePictureFilename: string;
    /**
   * The id to display to users. They must be unique, but the users can choose and change them.
### Rules
- Only accepts letters, digits and '.', '-', '_'.
   * @minLength 3
   * @maxLength 50
   * @pattern ^[a-zA-Z0-9\.-_]+$
   */
    username: string;
};

/**
 * Information to identify and describe an icon.
 */
export type GetPublicIcons200Item = {
    /** File name required to fetch the image from the route to get specific user icons. */
    filename: string;
    /** Identifier for the icon. */
    id: number;
};

export type GetPublicIconsFilename404StatusCode =
    (typeof GetPublicIconsFilename404StatusCode)[keyof typeof GetPublicIconsFilename404StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetPublicIconsFilename404StatusCode = {
    NUMBER_404: 404,
} as const;

/**
 * notFound
 */
export type GetPublicIconsFilename404 = {
    error: string;
    message: string;
    statusCode: GetPublicIconsFilename404StatusCode;
    [key: string]: unknown;
};

export type GetLyricsTrackMusixMatchId421StatusCode =
    (typeof GetLyricsTrackMusixMatchId421StatusCode)[keyof typeof GetLyricsTrackMusixMatchId421StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetLyricsTrackMusixMatchId421StatusCode = {
    NUMBER_421: 421,
} as const;

/**
 * misdirectedRequest
 */
export type GetLyricsTrackMusixMatchId421 = {
    error: string;
    message: string;
    statusCode: GetLyricsTrackMusixMatchId421StatusCode;
    [key: string]: unknown;
};

export type GetLyricsTrackMusixMatchId404StatusCode =
    (typeof GetLyricsTrackMusixMatchId404StatusCode)[keyof typeof GetLyricsTrackMusixMatchId404StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetLyricsTrackMusixMatchId404StatusCode = {
    NUMBER_404: 404,
} as const;

/**
 * notFound
 */
export type GetLyricsTrackMusixMatchId404 = {
    error: string;
    message: string;
    statusCode: GetLyricsTrackMusixMatchId404StatusCode;
    [key: string]: unknown;
};

export type GetLyricsTrackMusixMatchId200 = {
    /** Copyright information for the lyrics, if available. */
    copyright?: string;
    /** Indicates if the lyrics contain explicit content. */
    explicit: boolean;
    /** The language in which the lyrics are written. */
    language: string;
    /** The full lyrics of the track. */
    lyricsBody: string;
    /** Identifier for the lyrics provided by MusixMatch. */
    lyricsId: string;
    /** Identifier for the track associated with these lyrics on MusixMatch. */
    trackId: string;
};

/**
 * A leaderboard of melodle users.
 */
export type GetLeaderboards200 = {
    leaderboard: GetLeaderboards200LeaderboardItem[];
};

export type GetLeaderboards200LeaderboardItemAllOfTwo = {
    /** Players' position ordered from higest to lowest score. */
    rank: number;
    /** Score calculated by user performance within their games. */
    score: number;
};

export type GetLeaderboards200LeaderboardItemAllOf = {
    /** A numeric identifier for a user. Generated by the backend, unique and unchangeable. */
    id: number;
    /**
     * The user's display name. It does not need to be unique.
     * @minLength 1
     * @maxLength 25
     */
    name: string;
    /** File name required to fetch the image from the route to get specific user icons. */
    profilePictureFilename: string;
    /**
   * The id to display to users. They must be unique, but the users can choose and change them.
### Rules
- Only accepts letters, digits and '.', '-', '_'.
   * @minLength 3
   * @maxLength 50
   * @pattern ^[a-zA-Z0-9\.-_]+$
   */
    username: string;
};

export type GetLeaderboards200LeaderboardItem =
    GetLeaderboards200LeaderboardItemAllOf &
        GetLeaderboards200LeaderboardItemAllOfTwo;

export type GetLeaderboardsParams = {
    gameModes: string[];
    /**
     * States when a range starts.
     */
    start: number;
    /**
     * A number which defines range size.
     */
    amount: number;
};

export type GetArtistsSearch200Item = {
    /** Identifier for an artist given by MusixMatch */
    musixmatchArtistId: number;
    /** Name of the artist, does not have to be unique. */
    name: string;
};

export type GetArtistsSearchParams = {
    query: string;
};

export type GetArtistsArtistName421StatusCode =
    (typeof GetArtistsArtistName421StatusCode)[keyof typeof GetArtistsArtistName421StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetArtistsArtistName421StatusCode = {
    NUMBER_421: 421,
} as const;

/**
 * misdirectedRequest
 */
export type GetArtistsArtistName421 = {
    error: string;
    message: string;
    statusCode: GetArtistsArtistName421StatusCode;
    [key: string]: unknown;
};

export type GetArtistsArtistName200Item = {
    artist_alias_list: GetArtistsArtistName200ItemArtistAliasListItem[];
    artist_comment: string;
    artist_country: string;
    artist_credits: unknown;
    artist_edit_url?: string;
    artist_facebook_url?: string;
    artist_fq_id?: string;
    artist_id: number;
    artist_mbid?: string;
    artist_name: string;
    artist_name_translation_list: unknown;
    artist_rating: number;
    artist_share_url?: string;
    artist_tiktok_url?: string;
    artist_twitter_url?: string;
    artist_vanity_url?: string;
    artist_website_url?: string;
    artist_youtube_url?: string;
    begin_date: string;
    begin_date_year: string;
    end_date: string;
    end_date_year: string;
    externals_ids?: GetArtistsArtistName200ItemExternalsIds;
    /**
     * @minimum 0
     * @maximum 1
     */
    managed?: number;
    primary_genres?: GetArtistsArtistName200ItemPrimaryGenres;
    /**
     * @minimum 0
     * @maximum 1
     */
    restricted?: number;
    secondary_genres?: GetArtistsArtistName200ItemSecondaryGenres;
    updated_time: string;
};

export type GetArtistsArtistName200ItemSecondaryGenresMusicGenreListItemMusicGenreMusicGenreVanity =
    string | null;

export type GetArtistsArtistName200ItemSecondaryGenresMusicGenreListItemMusicGenre =
    {
        music_genre_id: number;
        music_genre_name: string;
        music_genre_name_extended: string;
        music_genre_parent_id: number;
        music_genre_vanity: GetArtistsArtistName200ItemSecondaryGenresMusicGenreListItemMusicGenreMusicGenreVanity;
    };

export type GetArtistsArtistName200ItemSecondaryGenresMusicGenreListItem = {
    music_genre: GetArtistsArtistName200ItemSecondaryGenresMusicGenreListItemMusicGenre;
};

export type GetArtistsArtistName200ItemSecondaryGenres = {
    music_genre_list: GetArtistsArtistName200ItemSecondaryGenresMusicGenreListItem[];
};

export type GetArtistsArtistName200ItemPrimaryGenresMusicGenreListItemMusicGenreMusicGenreVanity =
    string | null;

export type GetArtistsArtistName200ItemPrimaryGenresMusicGenreListItemMusicGenre =
    {
        music_genre_id: number;
        music_genre_name: string;
        music_genre_name_extended: string;
        music_genre_parent_id: number;
        music_genre_vanity: GetArtistsArtistName200ItemPrimaryGenresMusicGenreListItemMusicGenreMusicGenreVanity;
    };

export type GetArtistsArtistName200ItemPrimaryGenresMusicGenreListItem = {
    music_genre: GetArtistsArtistName200ItemPrimaryGenresMusicGenreListItemMusicGenre;
};

export type GetArtistsArtistName200ItemPrimaryGenres = {
    music_genre_list: GetArtistsArtistName200ItemPrimaryGenresMusicGenreListItem[];
};

export type GetArtistsArtistName200ItemExternalsIds = {
    amazon_music?: string[];
    itunes?: string[];
    spotify?: string[];
    [key: string]: unknown;
};

export type GetArtistsArtistName200ItemArtistAliasListItem = {
    artist_alias: string;
};

export type GetArtistsArtistNameParams = {
    query: string;
};

export type GetArtistsArtistMusixMatchId451StatusCode =
    (typeof GetArtistsArtistMusixMatchId451StatusCode)[keyof typeof GetArtistsArtistMusixMatchId451StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetArtistsArtistMusixMatchId451StatusCode = {
    NUMBER_451: 451,
} as const;

/**
 * unavailableForLegalReasons
 */
export type GetArtistsArtistMusixMatchId451 = {
    error: string;
    message: string;
    statusCode: GetArtistsArtistMusixMatchId451StatusCode;
    [key: string]: unknown;
};

export type GetArtistsArtistMusixMatchId404StatusCode =
    (typeof GetArtistsArtistMusixMatchId404StatusCode)[keyof typeof GetArtistsArtistMusixMatchId404StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetArtistsArtistMusixMatchId404StatusCode = {
    NUMBER_404: 404,
} as const;

/**
 * notFound
 */
export type GetArtistsArtistMusixMatchId404 = {
    error: string;
    message: string;
    statusCode: GetArtistsArtistMusixMatchId404StatusCode;
    [key: string]: unknown;
};

export type GetArtistsArtistMusixMatchId200SecondaryGenresMusicGenreListItemMusicGenreMusicGenreVanity =
    string | null;

export type GetArtistsArtistMusixMatchId200SecondaryGenresMusicGenreListItemMusicGenre =
    {
        music_genre_id: number;
        music_genre_name: string;
        music_genre_name_extended: string;
        music_genre_parent_id: number;
        music_genre_vanity: GetArtistsArtistMusixMatchId200SecondaryGenresMusicGenreListItemMusicGenreMusicGenreVanity;
    };

export type GetArtistsArtistMusixMatchId200SecondaryGenresMusicGenreListItem = {
    music_genre: GetArtistsArtistMusixMatchId200SecondaryGenresMusicGenreListItemMusicGenre;
};

export type GetArtistsArtistMusixMatchId200SecondaryGenres = {
    music_genre_list: GetArtistsArtistMusixMatchId200SecondaryGenresMusicGenreListItem[];
};

export type GetArtistsArtistMusixMatchId200 = {
    artist_alias_list: GetArtistsArtistMusixMatchId200ArtistAliasListItem[];
    artist_comment: string;
    artist_country: string;
    artist_credits: unknown;
    artist_edit_url?: string;
    artist_facebook_url?: string;
    artist_fq_id?: string;
    artist_id: number;
    artist_mbid?: string;
    artist_name: string;
    artist_name_translation_list: unknown;
    artist_rating: number;
    artist_share_url?: string;
    artist_tiktok_url?: string;
    artist_twitter_url?: string;
    artist_vanity_url?: string;
    artist_website_url?: string;
    artist_youtube_url?: string;
    begin_date: string;
    begin_date_year: string;
    end_date: string;
    end_date_year: string;
    externals_ids?: GetArtistsArtistMusixMatchId200ExternalsIds;
    /**
     * @minimum 0
     * @maximum 1
     */
    managed?: number;
    primary_genres?: GetArtistsArtistMusixMatchId200PrimaryGenres;
    /**
     * @minimum 0
     * @maximum 1
     */
    restricted?: number;
    secondary_genres?: GetArtistsArtistMusixMatchId200SecondaryGenres;
    updated_time: string;
};

export type GetArtistsArtistMusixMatchId200PrimaryGenresMusicGenreListItemMusicGenreMusicGenreVanity =
    string | null;

export type GetArtistsArtistMusixMatchId200PrimaryGenresMusicGenreListItemMusicGenre =
    {
        music_genre_id: number;
        music_genre_name: string;
        music_genre_name_extended: string;
        music_genre_parent_id: number;
        music_genre_vanity: GetArtistsArtistMusixMatchId200PrimaryGenresMusicGenreListItemMusicGenreMusicGenreVanity;
    };

export type GetArtistsArtistMusixMatchId200PrimaryGenresMusicGenreListItem = {
    music_genre: GetArtistsArtistMusixMatchId200PrimaryGenresMusicGenreListItemMusicGenre;
};

export type GetArtistsArtistMusixMatchId200PrimaryGenres = {
    music_genre_list: GetArtistsArtistMusixMatchId200PrimaryGenresMusicGenreListItem[];
};

export type GetArtistsArtistMusixMatchId200ExternalsIds = {
    amazon_music?: string[];
    itunes?: string[];
    spotify?: string[];
    [key: string]: unknown;
};

export type GetArtistsArtistMusixMatchId200ArtistAliasListItem = {
    artist_alias: string;
};

export type PutDebugSnapshot200 =
    (typeof PutDebugSnapshot200)[keyof typeof PutDebugSnapshot200];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PutDebugSnapshot200 = {
    "TODO!": "TODO!",
} as const;

export type GetDebugSnapshot200UsersItem = {
    /**
     * The user's email.
     * @maxLength 254
     * @pattern ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}$
     */
    email: string;
    /**
     * The user's display name. It does not need to be unique.
     * @minLength 1
     * @maxLength 25
     */
    name: string;
    /** The id to the profile picture of the user. These pictures cannot be uploaded, we store the options manually. */
    profilePictureId: number;
    /** The user's id to use to connect with spotify services. It is not stored within the database, but some requests need it to function. */
    spotifyId?: string;
    /**
   * The id to display to users. They must be unique, but the users can choose and change them.
### Rules
- Only accepts letters, digits and '.', '-', '_'.
   * @minLength 3
   * @maxLength 50
   * @pattern ^[a-zA-Z0-9\.-_]+$
   */
    username: string;
};

export type GetDebugSnapshot200FriendsItem = {
    createdAt: string;
    /**
   * The id to display to users. They must be unique, but the users can choose and change them.
### Rules
- Only accepts letters, digits and '.', '-', '_'.
   * @minLength 3
   * @maxLength 50
   * @pattern ^[a-zA-Z0-9\.-_]+$
   */
    friendUsername: string;
    /** @pattern ^(pending|blocked|accepted)$ */
    status: string;
    /**
   * The id to display to users. They must be unique, but the users can choose and change them.
### Rules
- Only accepts letters, digits and '.', '-', '_'.
   * @minLength 3
   * @maxLength 50
   * @pattern ^[a-zA-Z0-9\.-_]+$
   */
    userUsername: string;
};

export type GetDebugSnapshot200 = {
    friends: GetDebugSnapshot200FriendsItem[];
    users: GetDebugSnapshot200UsersItem[];
};

export type Get200Ping = (typeof Get200Ping)[keyof typeof Get200Ping];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const Get200Ping = {
    "Pong!": "Pong!",
} as const;

export type Get200 = {
    ping: Get200Ping;
    root: boolean;
};

/**
 * A leaderboard of melodle users.
 */
export interface Def3 {
    leaderboard: Def3LeaderboardItem[];
}

export type Def3LeaderboardItemAllOfTwo = {
    /** Players' position ordered from higest to lowest score. */
    rank: number;
    /** Score calculated by user performance within their games. */
    score: number;
};

export type Def3LeaderboardItemAllOf = {
    /** A numeric identifier for a user. Generated by the backend, unique and unchangeable. */
    id: number;
    /**
     * The user's display name. It does not need to be unique.
     * @minLength 1
     * @maxLength 25
     */
    name: string;
    /** File name required to fetch the image from the route to get specific user icons. */
    profilePictureFilename: string;
    /**
   * The id to display to users. They must be unique, but the users can choose and change them.
### Rules
- Only accepts letters, digits and '.', '-', '_'.
   * @minLength 3
   * @maxLength 50
   * @pattern ^[a-zA-Z0-9\.-_]+$
   */
    username: string;
};

export type Def3LeaderboardItem = Def3LeaderboardItemAllOf &
    Def3LeaderboardItemAllOfTwo;

/**
 * A token which will serve to authenticate a user.
 */
export interface Def2 {
    /** The 'encrypted' jwt token. It is easily decryptable, so no sensitive information is stored there. */
    jwtToken: string;
}

export interface Def1 {
    /** Identifier for an artist accepted by multiple platforms */
    artistIsrc: string;
    /** Url that will allow users to be redirected to the artist's profile on Spotify. */
    externalUrls: string;
    /** The number of followers the artist has. */
    followers: number;
    genres: string[];
    /** A numeric identifier for an artist. Generated by the backend, unique and unchangeable. */
    id: number;
    /** Url to download the artist's portrait image, if available. */
    imageUrl?: string;
    /** Identifier for an artist given by MusixMatch */
    musixmatchArtistId: number;
    /** Name of the artist, does not have to be unique. */
    name: string;
    /** Identifier for an artist given by spotify */
    spotifyArtistId: string;
}

export type Def0FavoriteArtistsItem = {
    /** Identifier for an artist accepted by multiple platforms */
    artistIsrc: string;
    /** Url that will allow users to be redirected to the artist's profile on Spotify. */
    externalUrls: string;
    /** The number of followers the artist has. */
    followers: number;
    genres: string[];
    /** A numeric identifier for an artist. Generated by the backend, unique and unchangeable. */
    id: number;
    /** Url to download the artist's portrait image, if available. */
    imageUrl?: string;
    /** Identifier for an artist given by MusixMatch */
    musixmatchArtistId: number;
    /** Name of the artist, does not have to be unique. */
    name: string;
    /** Identifier for an artist given by spotify */
    spotifyArtistId: string;
};

export interface Def0 {
    /**
     * The user's email.
     * @maxLength 254
     * @pattern ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}$
     */
    email: string;
    /** An array of every artist currently favorited by the user. */
    favoriteArtists: Def0FavoriteArtistsItem[];
    /** A numeric identifier for a user. Generated by the backend, unique and unchangeable. */
    id: number;
    /**
     * The user's display name. It does not need to be unique.
     * @minLength 1
     * @maxLength 25
     */
    name: string;
    /**
     * A password.
     * @minLength 3
     * @maxLength 20
     */
    password: string;
    /** File name required to fetch the image from the route to get specific user icons. */
    profilePictureFilename: string;
    /** The id to the profile picture of the user. These pictures cannot be uploaded, we store the options manually. */
    profilePictureId: number;
    /** The user's id to use to connect with spotify services. It is not stored within the database, but some requests need it to function. */
    spotifyId: string;
    /**
   * The id to display to users. They must be unique, but the users can choose and change them.
### Rules
- Only accepts letters, digits and '.', '-', '_'.
   * @minLength 3
   * @maxLength 50
   * @pattern ^[a-zA-Z0-9\.-_]+$
   */
    username: string;
}

export const getAuthRegisterSpotify = <TData = AxiosResponse<void>>(
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.get(
        `https://localhost/backend/auth/register/spotify`,
        options
    );
};

export const getAuthLoginSpotify = <TData = AxiosResponse<void>>(
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.get(`https://localhost/backend/auth/login/spotify`, options);
};

/**
 * Route to check whether the service is working.
 * @summary Ping!
 */
export const get = <TData = AxiosResponse<Get200>>(
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.get(`https://localhost/backend/`, options);
};

/**
 * @summary Get current state of application.
 */
export const getDebugSnapshot = <TData = AxiosResponse<GetDebugSnapshot200>>(
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.get(`https://localhost/backend/debug/snapshot`, options);
};

/**
 * @summary Reset the application state to a certain snapshot.
 */
export const putDebugSnapshot = <TData = AxiosResponse<PutDebugSnapshot200>>(
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.put(
        `https://localhost/backend/debug/snapshot`,
        undefined,
        options
    );
};

export const postDebugPlayground = <TData = AxiosResponse<void>>(
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.post(
        `https://localhost/backend/debug/playground`,
        undefined,
        options
    );
};

/**
 * @summary Get information about an artist
 */
export const getArtistsArtistMusixMatchId = <
    TData = AxiosResponse<GetArtistsArtistMusixMatchId200>,
>(
    artistMusixMatchId: number,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.get(
        `https://localhost/backend/artists/${artistMusixMatchId}`,
        options
    );
};

/**
 * Search for artists based on the query provided in the querystring.
 * @summary Search for artists by name
 */
export const getArtistsArtistName = <
    TData = AxiosResponse<GetArtistsArtistName200Item[]>,
>(
    params: GetArtistsArtistNameParams,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.get(`https://localhost/backend/artists/artistName`, {
        ...options,
        params: { ...params, ...options?.params },
    });
};

/**
 * We use a custom algorithm to determine which artists are most relevant, based off the query in the querystring.
 * @summary Search for available artists.
 */
export const getArtistsSearch = <
    TData = AxiosResponse<GetArtistsSearch200Item[]>,
>(
    params: GetArtistsSearchParams,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.get(`https://localhost/backend/artists/search`, {
        ...options,
        params: { ...params, ...options?.params },
    });
};

/**
 * @summary Fetches global leaderboard information.
 */
export const getLeaderboards = <TData = AxiosResponse<GetLeaderboards200>>(
    params: GetLeaderboardsParams,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.get(`https://localhost/backend/leaderboards/`, {
        ...options,
        params: { ...params, ...options?.params },
    });
};

/**
 * This endpoint retrieves the lyrics for a given track using its Musixmatch ID
 * @summary Get lyrics for a specific track
 */
export const getLyricsTrackMusixMatchId = <
    TData = AxiosResponse<GetLyricsTrackMusixMatchId200>,
>(
    trackMusixMatchId: number,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.get(
        `https://localhost/backend/lyrics/${trackMusixMatchId}`,
        options
    );
};

/**
 * Get the svg for a certain user icon. The selection of user icons is fixed.
 * @summary Get a user icon.
 */
export const getPublicIconsFilename = <TData = AxiosResponse<Blob>>(
    filename: string,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.get(`https://localhost/backend/public/icons/${filename}`, {
        responseType: "blob",
        ...options,
    });
};

/**
 * @summary Get information about all user icons.
 */
export const getPublicIcons = <TData = AxiosResponse<GetPublicIcons200Item[]>>(
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.get(`https://localhost/backend/public/icons`, options);
};

/**
 * Authentication is not needed to see public user information.
 * @summary Get public information from some user.
 */
export const getUsersUserId = <TData = AxiosResponse<GetUsersUserId200>>(
    userId: number,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.get(`https://localhost/backend/users/${userId}`, options);
};

/**
 * @summary Search users through their public information.
 */
export const getUsersSearch = <TData = AxiosResponse<GetUsersSearch200>>(
    params: GetUsersSearchParams,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.get(`https://localhost/backend/users/search`, {
        ...options,
        params: { ...params, ...options?.params },
    });
};

/**
 * @summary Check if some user data already exists
 */
export const getUsersCheck = <TData = AxiosResponse<GetUsersCheck200>>(
    params?: GetUsersCheckParams,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.get(`https://localhost/backend/users/check`, {
        ...options,
        params: { ...params, ...options?.params },
    });
};

/**
 * @summary Fetch a user's jwt token.
 */
export const postAuthLogin = <TData = AxiosResponse<PostAuthLogin200>>(
    postAuthLoginBody: PostAuthLoginBody,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.post(
        `https://localhost/backend/auth/login`,
        postAuthLoginBody,
        options
    );
};

/**
 * Creates a new user with the given credentials if possible.
 * @summary Create a user.
 */
export const postAuthRegister = <TData = AxiosResponse<PostAuthRegister200>>(
    postAuthRegisterBody: PostAuthRegisterBody,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.post(
        `https://localhost/backend/auth/register`,
        postAuthRegisterBody,
        options
    );
};

/**
 * All fake users have Fake123! as their password.
 * @summary Returns random, believable credentials for a user.
 */
export const getDebugFakeUser = <TData = AxiosResponse<GetDebugFakeUser200>>(
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.get(`https://localhost/backend/debug/fake/user`, options);
};

/**
 * We do not check if the user already exists, so this route may error. On error, we roll back any changes.
 * @summary Create a certain number of fake users.
 */
export const postDebugFakeUsers = <
    TData = AxiosResponse<PostDebugFakeUsers201Item[]>,
>(
    postDebugFakeUsersBody: PostDebugFakeUsersBody,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.post(
        `https://localhost/backend/debug/fake/users`,
        postDebugFakeUsersBody,
        options
    );
};

/**
 * @summary Login through spotify.
 */
export const getAuthLoginSpotifyCallback = <TData = AxiosResponse<unknown>>(
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.get(
        `https://localhost/backend/auth/login/spotify/callback`,
        options
    );
};

/**
 * The actual url you should use is this one removing /callback
> !) Eventually this schema will change.
 * @summary Register a user through a spotify callback.
 */
export const getAuthRegisterSpotifyCallback = <TData = AxiosResponse<unknown>>(
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.get(
        `https://localhost/backend/auth/register/spotify/callback`,
        options
    );
};

/**
 * This is the route that exposes the most information about a user.
 * @summary Get your user information.
 */
export const getUsersSelfSelfId = <
    TData = AxiosResponse<GetUsersSelfSelfId200>,
>(
    selfId: number,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.get(`https://localhost/backend/users/self/${selfId}`, options);
};

/**
 * @summary Update your user information.
 */
export const putUsersSelfSelfId = <
    TData = AxiosResponse<PutUsersSelfSelfId200>,
>(
    selfId: number,
    putUsersSelfSelfIdBody: PutUsersSelfSelfIdBody,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.put(
        `https://localhost/backend/users/self/${selfId}`,
        putUsersSelfSelfIdBody,
        options
    );
};

/**
 * The cascading deletion will be more thoroughly implemented once other resources are implemented.
 * @summary Delete your own user and all their associated information.
 */
export const deleteUsersSelfSelfId = <
    TData = AxiosResponse<DeleteUsersSelfSelfId200>,
>(
    selfId: number,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.delete(
        `https://localhost/backend/users/self/${selfId}`,
        options
    );
};

/**
 * @summary Get all the artists in a user's home.
 */
export const getUsersSelfSelfIdArtists = <
    TData = AxiosResponse<GetUsersSelfSelfIdArtists200Item[]>,
>(
    selfId: number,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.get(
        `https://localhost/backend/users/self/${selfId}/artists`,
        options
    );
};

/**
 * @summary Get saved user configurations.
 */
export const getUsersSelfSelfIdConfigs = <
    TData = AxiosResponse<GetUsersSelfSelfIdConfigs200Item[]>,
>(
    selfId: number,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.get(
        `https://localhost/backend/users/self/${selfId}/configs`,
        options
    );
};

/**
 * @summary Add a new configuration preset.
 */
export const postUsersSelfSelfIdConfigs = <
    TData = AxiosResponse<PostUsersSelfSelfIdConfigs200>,
>(
    selfId: number,
    postUsersSelfSelfIdConfigsBody: PostUsersSelfSelfIdConfigsBody,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.post(
        `https://localhost/backend/users/self/${selfId}/configs`,
        postUsersSelfSelfIdConfigsBody,
        options
    );
};

/**
 * @summary Delete a configuration preset.
 */
export const deleteUsersSelfSelfIdConfigsMelodleConfigId = <
    TData = AxiosResponse<DeleteUsersSelfSelfIdConfigsMelodleConfigId200>,
>(
    selfId: number,
    melodleConfigId: number,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.delete(
        `https://localhost/backend/users/self/${selfId}/configs/${melodleConfigId}`,
        options
    );
};

/**
 * @summary Update a configuration preset.
 */
export const putUsersSelfSelfIdConfigsMelodleConfigId = <
    TData = AxiosResponse<PutUsersSelfSelfIdConfigsMelodleConfigId200>,
>(
    selfId: number,
    melodleConfigId: number,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.put(
        `https://localhost/backend/users/self/${selfId}/configs/${melodleConfigId}`,
        undefined,
        options
    );
};

/**
 * TODO: Discuss whether we should ask for the id or make the frontend fetch the data and pass it to us.
 * @summary Ask for a configuration suggestion based off of the user's spotify information.
 */
export const getUsersSelfSelfIdConfigsSuggest = <
    TData = AxiosResponse<GetUsersSelfSelfIdConfigsSuggest200Item[]>,
>(
    selfId: number,
    params: GetUsersSelfSelfIdConfigsSuggestParams,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.get(
        `https://localhost/backend/users/self/${selfId}/configs/suggest`,
        {
            ...options,
            params: { ...params, ...options?.params },
        }
    );
};

/**
 * @summary Get every user currently blocked by self.
 */
export const getUsersSelfSelfIdBlocking = <
    TData = AxiosResponse<GetUsersSelfSelfIdBlocking200Item[]>,
>(
    selfId: number,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.get(
        `https://localhost/backend/users/self/${selfId}/blocking`,
        options
    );
};

/**
 * @summary Get all friends from a user.
 */
export const getUsersSelfSelfIdFriends = <
    TData = AxiosResponse<GetUsersSelfSelfIdFriends200Item[]>,
>(
    selfId: number,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.get(
        `https://localhost/backend/users/self/${selfId}/friends`,
        options
    );
};

/**
 * @summary Start a new melodle game.
 */
export const postUsersSelfSelfIdMelodle = <
    TData = AxiosResponse<PostUsersSelfSelfIdMelodle200>,
>(
    selfId: number,
    postUsersSelfSelfIdMelodleBody: PostUsersSelfSelfIdMelodleBody,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.post(
        `https://localhost/backend/users/self/${selfId}/melodle`,
        postUsersSelfSelfIdMelodleBody,
        options
    );
};

/**
 * @summary Get a history of your own games.
 */
export const getUsersSelfSelfIdMelodleHistory = <
    TData = AxiosResponse<GetUsersSelfSelfIdMelodleHistory200Item[]>,
>(
    selfId: number,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.get(
        `https://localhost/backend/users/self/${selfId}/melodle/history`,
        options
    );
};

/**
 * @summary Update whether a given artist is within you favorite ones.
 */
export const putUsersSelfSelfIdArtistsSpotifyArtistIdFavorite = <
    TData = AxiosResponse<PutUsersSelfSelfIdArtistsSpotifyArtistIdFavorite200>,
>(
    selfId: number,
    spotifyArtistId: string,
    putUsersSelfSelfIdArtistsSpotifyArtistIdFavoriteBody: PutUsersSelfSelfIdArtistsSpotifyArtistIdFavoriteBody,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.put(
        `https://localhost/backend/users/self/${selfId}/artists/${spotifyArtistId}/favorite`,
        putUsersSelfSelfIdArtistsSpotifyArtistIdFavoriteBody,
        options
    );
};

/**
 * @summary Add an artist to user's home page (for non-Spotify users mostly).
 */
export const postUsersSelfSelfIdArtistsSpotifyArtistId = <
    TData = AxiosResponse<PostUsersSelfSelfIdArtistsSpotifyArtistId200>,
>(
    selfId: number,
    spotifyArtistId: string,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.post(
        `https://localhost/backend/users/self/${selfId}/artists/${spotifyArtistId}`,
        undefined,
        options
    );
};

/**
 * @summary Delete an artist from user's home.
 */
export const deleteUsersSelfSelfIdArtistsSpotifyArtistId = <
    TData = AxiosResponse<DeleteUsersSelfSelfIdArtistsSpotifyArtistId200>,
>(
    selfId: number,
    spotifyArtistId: string,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.delete(
        `https://localhost/backend/users/self/${selfId}/artists/${spotifyArtistId}`,
        options
    );
};

/**
 * @summary Block a user.
 */
export const postUsersSelfSelfIdBlockingTargetUserId = <
    TData = AxiosResponse<PostUsersSelfSelfIdBlockingTargetUserId201>,
>(
    selfId: number,
    targetUserId: number,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.post(
        `https://localhost/backend/users/self/${selfId}/blocking/${targetUserId}`,
        undefined,
        options
    );
};

/**
 * @summary Unblock a user.
 */
export const deleteUsersSelfSelfIdBlockingTargetUserId = <
    TData = AxiosResponse<DeleteUsersSelfSelfIdBlockingTargetUserId200>,
>(
    selfId: number,
    targetUserId: number,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.delete(
        `https://localhost/backend/users/self/${selfId}/blocking/${targetUserId}`,
        options
    );
};

/**
 * It transforms the friend into a normal stranger.
 * @summary Removes a friend.
 */
export const deleteUsersSelfSelfIdFriendsTargetUserId = <
    TData = AxiosResponse<DeleteUsersSelfSelfIdFriendsTargetUserId200>,
>(
    selfId: number,
    targetUserId: number,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.delete(
        `https://localhost/backend/users/self/${selfId}/friends/${targetUserId}`,
        options
    );
};

/**
 * @summary Sends a friend request
 */
export const postUsersSelfSelfIdFriendsTargetUserId = <
    TData = AxiosResponse<PostUsersSelfSelfIdFriendsTargetUserId201>,
>(
    selfId: number,
    targetUserId: number,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.post(
        `https://localhost/backend/users/self/${selfId}/friends/${targetUserId}`,
        undefined,
        options
    );
};

/**
 * @summary It accepts a friend request.
 */
export const putUsersSelfSelfIdFriendsTargetUserId = <
    TData = AxiosResponse<PutUsersSelfSelfIdFriendsTargetUserId200>,
>(
    selfId: number,
    targetUserId: number,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.put(
        `https://localhost/backend/users/self/${selfId}/friends/${targetUserId}`,
        undefined,
        options
    );
};

/**
 * @summary Gets information about the user's friends leaderboard on the game mode.
 */
export const getUsersSelfSelfIdFriendsLeaderboards = <
    TData = AxiosResponse<GetUsersSelfSelfIdFriendsLeaderboards200>,
>(
    selfId: number,
    params: GetUsersSelfSelfIdFriendsLeaderboardsParams,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.get(
        `https://localhost/backend/users/self/${selfId}/friends/leaderboards/`,
        {
            ...options,
            params: { ...params, ...options?.params },
        }
    );
};

/**
 * @summary Get information about a melodle game.
 */
export const getUsersSelfSelfIdMelodleGuessSong = <
    TData = AxiosResponse<GetUsersSelfSelfIdMelodleGuessSong200>,
>(
    selfId: number,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.get(
        `https://localhost/backend/users/self/${selfId}/melodle/guessSong`,
        options
    );
};

/**
 * @summary Start a new melodle game.
 */
export const postUsersSelfSelfIdMelodleGuessSong = <
    TData = AxiosResponse<PostUsersSelfSelfIdMelodleGuessSong201>,
>(
    selfId: number,
    postUsersSelfSelfIdMelodleGuessSongBody: PostUsersSelfSelfIdMelodleGuessSongBody,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.post(
        `https://localhost/backend/users/self/${selfId}/melodle/guessSong`,
        postUsersSelfSelfIdMelodleGuessSongBody,
        options
    );
};

/**
 * @summary Get information about a melodle game.
 */
export const getUsersSelfSelfIdMelodleGuessLine = <
    TData = AxiosResponse<GetUsersSelfSelfIdMelodleGuessLine200>,
>(
    selfId: number,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.get(
        `https://localhost/backend/users/self/${selfId}/melodle/guessLine`,
        options
    );
};

/**
 * @summary Submit a guess for a melodle game.
 */
export const postUsersSelfSelfIdMelodleGuessSongGameIdAttempts = <
    TData = AxiosResponse<unknown>,
>(
    selfId: number,
    gameId: number,
    postUsersSelfSelfIdMelodleGuessSongGameIdAttemptsBody: PostUsersSelfSelfIdMelodleGuessSongGameIdAttemptsBody,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.post(
        `https://localhost/backend/users/self/${selfId}/melodle/guessSong/${gameId}/attempts`,
        postUsersSelfSelfIdMelodleGuessSongGameIdAttemptsBody,
        options
    );
};

/**
 * @summary Submit a guess for a melodle game.
 */
export const postUsersSelfSelfIdMelodleGuessLineGameIdAttempts = <
    TData = AxiosResponse<PostUsersSelfSelfIdMelodleGuessLineGameIdAttempts200>,
>(
    selfId: number,
    gameId: number,
    postUsersSelfSelfIdMelodleGuessLineGameIdAttemptsBody: PostUsersSelfSelfIdMelodleGuessLineGameIdAttemptsBody,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.post(
        `https://localhost/backend/users/self/${selfId}/melodle/guessLine/${gameId}/attempts`,
        postUsersSelfSelfIdMelodleGuessLineGameIdAttemptsBody,
        options
    );
};

export type GetAuthRegisterSpotifyResult = AxiosResponse<void>;
export type GetAuthLoginSpotifyResult = AxiosResponse<void>;
export type GetResult = AxiosResponse<Get200>;
export type GetDebugSnapshotResult = AxiosResponse<GetDebugSnapshot200>;
export type PutDebugSnapshotResult = AxiosResponse<PutDebugSnapshot200>;
export type PostDebugPlaygroundResult = AxiosResponse<void>;
export type GetArtistsArtistMusixMatchIdResult =
    AxiosResponse<GetArtistsArtistMusixMatchId200>;
export type GetArtistsArtistNameResult = AxiosResponse<
    GetArtistsArtistName200Item[]
>;
export type GetArtistsSearchResult = AxiosResponse<GetArtistsSearch200Item[]>;
export type GetLeaderboardsResult = AxiosResponse<GetLeaderboards200>;
export type GetLyricsTrackMusixMatchIdResult =
    AxiosResponse<GetLyricsTrackMusixMatchId200>;
export type GetPublicIconsFilenameResult = AxiosResponse<Blob>;
export type GetPublicIconsResult = AxiosResponse<GetPublicIcons200Item[]>;
export type GetUsersUserIdResult = AxiosResponse<GetUsersUserId200>;
export type GetUsersSearchResult = AxiosResponse<GetUsersSearch200>;
export type GetUsersCheckResult = AxiosResponse<GetUsersCheck200>;
export type PostAuthLoginResult = AxiosResponse<PostAuthLogin200>;
export type PostAuthRegisterResult = AxiosResponse<PostAuthRegister200>;
export type GetDebugFakeUserResult = AxiosResponse<GetDebugFakeUser200>;
export type PostDebugFakeUsersResult = AxiosResponse<
    PostDebugFakeUsers201Item[]
>;
export type GetAuthLoginSpotifyCallbackResult = AxiosResponse<unknown>;
export type GetAuthRegisterSpotifyCallbackResult = AxiosResponse<unknown>;
export type GetUsersSelfSelfIdResult = AxiosResponse<GetUsersSelfSelfId200>;
export type PutUsersSelfSelfIdResult = AxiosResponse<PutUsersSelfSelfId200>;
export type DeleteUsersSelfSelfIdResult =
    AxiosResponse<DeleteUsersSelfSelfId200>;
export type GetUsersSelfSelfIdArtistsResult = AxiosResponse<
    GetUsersSelfSelfIdArtists200Item[]
>;
export type GetUsersSelfSelfIdConfigsResult = AxiosResponse<
    GetUsersSelfSelfIdConfigs200Item[]
>;
export type PostUsersSelfSelfIdConfigsResult =
    AxiosResponse<PostUsersSelfSelfIdConfigs200>;
export type DeleteUsersSelfSelfIdConfigsMelodleConfigIdResult =
    AxiosResponse<DeleteUsersSelfSelfIdConfigsMelodleConfigId200>;
export type PutUsersSelfSelfIdConfigsMelodleConfigIdResult =
    AxiosResponse<PutUsersSelfSelfIdConfigsMelodleConfigId200>;
export type GetUsersSelfSelfIdConfigsSuggestResult = AxiosResponse<
    GetUsersSelfSelfIdConfigsSuggest200Item[]
>;
export type GetUsersSelfSelfIdBlockingResult = AxiosResponse<
    GetUsersSelfSelfIdBlocking200Item[]
>;
export type GetUsersSelfSelfIdFriendsResult = AxiosResponse<
    GetUsersSelfSelfIdFriends200Item[]
>;
export type PostUsersSelfSelfIdMelodleResult =
    AxiosResponse<PostUsersSelfSelfIdMelodle200>;
export type GetUsersSelfSelfIdMelodleHistoryResult = AxiosResponse<
    GetUsersSelfSelfIdMelodleHistory200Item[]
>;
export type PutUsersSelfSelfIdArtistsSpotifyArtistIdFavoriteResult =
    AxiosResponse<PutUsersSelfSelfIdArtistsSpotifyArtistIdFavorite200>;
export type PostUsersSelfSelfIdArtistsSpotifyArtistIdResult =
    AxiosResponse<PostUsersSelfSelfIdArtistsSpotifyArtistId200>;
export type DeleteUsersSelfSelfIdArtistsSpotifyArtistIdResult =
    AxiosResponse<DeleteUsersSelfSelfIdArtistsSpotifyArtistId200>;
export type PostUsersSelfSelfIdBlockingTargetUserIdResult =
    AxiosResponse<PostUsersSelfSelfIdBlockingTargetUserId201>;
export type DeleteUsersSelfSelfIdBlockingTargetUserIdResult =
    AxiosResponse<DeleteUsersSelfSelfIdBlockingTargetUserId200>;
export type DeleteUsersSelfSelfIdFriendsTargetUserIdResult =
    AxiosResponse<DeleteUsersSelfSelfIdFriendsTargetUserId200>;
export type PostUsersSelfSelfIdFriendsTargetUserIdResult =
    AxiosResponse<PostUsersSelfSelfIdFriendsTargetUserId201>;
export type PutUsersSelfSelfIdFriendsTargetUserIdResult =
    AxiosResponse<PutUsersSelfSelfIdFriendsTargetUserId200>;
export type GetUsersSelfSelfIdFriendsLeaderboardsResult =
    AxiosResponse<GetUsersSelfSelfIdFriendsLeaderboards200>;
export type GetUsersSelfSelfIdMelodleGuessSongResult =
    AxiosResponse<GetUsersSelfSelfIdMelodleGuessSong200>;
export type PostUsersSelfSelfIdMelodleGuessSongResult =
    AxiosResponse<PostUsersSelfSelfIdMelodleGuessSong201>;
export type GetUsersSelfSelfIdMelodleGuessLineResult =
    AxiosResponse<GetUsersSelfSelfIdMelodleGuessLine200>;
export type PostUsersSelfSelfIdMelodleGuessSongGameIdAttemptsResult =
    AxiosResponse<unknown>;
export type PostUsersSelfSelfIdMelodleGuessLineGameIdAttemptsResult =
    AxiosResponse<PostUsersSelfSelfIdMelodleGuessLineGameIdAttempts200>;
