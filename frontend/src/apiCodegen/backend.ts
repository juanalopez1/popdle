/**
 * Generated by orval v7.1.0 üç∫
 * Do not edit manually.
 * Melodle API
 * ---
## Documentation for Melodle's devs.
```(
 AAAAAaaaaaaaa!
              (   ()   )
    ) ________    //  )
 ()  |\       \  //
( \\__ \ ______\//
   \__) |       |
     |  |       |
      \ |       |
       \|_______|
       //    \\
      ((     ||
       \\    ||
     ( ()    ||
      (      () ) )
```
 * OpenAPI spec version: 0.1.0
 */
import axios from "axios";
import type { AxiosRequestConfig, AxiosResponse } from "axios";
export type PostUsersSelfSelfIdMelodleGameIdGuessSongAttempts404StatusCode =
    (typeof PostUsersSelfSelfIdMelodleGameIdGuessSongAttempts404StatusCode)[keyof typeof PostUsersSelfSelfIdMelodleGameIdGuessSongAttempts404StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostUsersSelfSelfIdMelodleGameIdGuessSongAttempts404StatusCode = {
    NUMBER_404: 404,
} as const;

/**
 * notFound
 */
export type PostUsersSelfSelfIdMelodleGameIdGuessSongAttempts404 = {
    error: string;
    message: string;
    statusCode: PostUsersSelfSelfIdMelodleGameIdGuessSongAttempts404StatusCode;
    [key: string]: unknown;
};

export type PostUsersSelfSelfIdMelodleGameIdGuessSongAttempts401StatusCode =
    (typeof PostUsersSelfSelfIdMelodleGameIdGuessSongAttempts401StatusCode)[keyof typeof PostUsersSelfSelfIdMelodleGameIdGuessSongAttempts401StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostUsersSelfSelfIdMelodleGameIdGuessSongAttempts401StatusCode = {
    NUMBER_401: 401,
} as const;

/**
 * unauthorized
 */
export type PostUsersSelfSelfIdMelodleGameIdGuessSongAttempts401 = {
    error: string;
    message: string;
    statusCode: PostUsersSelfSelfIdMelodleGameIdGuessSongAttempts401StatusCode;
    [key: string]: unknown;
};

export type PostUsersSelfSelfIdMelodleGameIdGuessSongAttempts200 = {
    correctAlbum: boolean;
    correctArtist: boolean;
    correctBand: boolean;
    won: boolean;
};

export type PostUsersSelfSelfIdMelodleGameIdGuessSongAttemptsBody = {
    /** Identifier which can be used to fetch artist data from MusixMatch. */
    guessedSongId: string;
};

export type PostUsersSelfSelfIdMelodleGameIdGuessLineAttempts404StatusCode =
    (typeof PostUsersSelfSelfIdMelodleGameIdGuessLineAttempts404StatusCode)[keyof typeof PostUsersSelfSelfIdMelodleGameIdGuessLineAttempts404StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostUsersSelfSelfIdMelodleGameIdGuessLineAttempts404StatusCode = {
    NUMBER_404: 404,
} as const;

/**
 * notFound
 */
export type PostUsersSelfSelfIdMelodleGameIdGuessLineAttempts404 = {
    error: string;
    message: string;
    statusCode: PostUsersSelfSelfIdMelodleGameIdGuessLineAttempts404StatusCode;
    [key: string]: unknown;
};

export type PostUsersSelfSelfIdMelodleGameIdGuessLineAttempts401StatusCode =
    (typeof PostUsersSelfSelfIdMelodleGameIdGuessLineAttempts401StatusCode)[keyof typeof PostUsersSelfSelfIdMelodleGameIdGuessLineAttempts401StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostUsersSelfSelfIdMelodleGameIdGuessLineAttempts401StatusCode = {
    NUMBER_401: 401,
} as const;

/**
 * unauthorized
 */
export type PostUsersSelfSelfIdMelodleGameIdGuessLineAttempts401 = {
    error: string;
    message: string;
    statusCode: PostUsersSelfSelfIdMelodleGameIdGuessLineAttempts401StatusCode;
    [key: string]: unknown;
};

export type PostUsersSelfSelfIdMelodleGameIdGuessLineAttempts200 = {
    /** For every letter given returns a hint, in order. */
    guessLineHints: string[];
    input: string;
    won: boolean;
};

export type PostUsersSelfSelfIdMelodleGameIdGuessLineAttemptsBody = {
    /**
     * A line to match against the actual line of the song.
     * @maxLength 1000
     */
    guessedLine: string;
};

export type GetUsersSelfSelfIdMelodleGameId404StatusCode =
    (typeof GetUsersSelfSelfIdMelodleGameId404StatusCode)[keyof typeof GetUsersSelfSelfIdMelodleGameId404StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetUsersSelfSelfIdMelodleGameId404StatusCode = {
    NUMBER_404: 404,
} as const;

/**
 * notFound
 */
export type GetUsersSelfSelfIdMelodleGameId404 = {
    error: string;
    message: string;
    statusCode: GetUsersSelfSelfIdMelodleGameId404StatusCode;
    [key: string]: unknown;
};

export type GetUsersSelfSelfIdMelodleGameId401StatusCode =
    (typeof GetUsersSelfSelfIdMelodleGameId401StatusCode)[keyof typeof GetUsersSelfSelfIdMelodleGameId401StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetUsersSelfSelfIdMelodleGameId401StatusCode = {
    NUMBER_401: 401,
} as const;

/**
 * unauthorized
 */
export type GetUsersSelfSelfIdMelodleGameId401 = {
    error: string;
    message: string;
    statusCode: GetUsersSelfSelfIdMelodleGameId401StatusCode;
    [key: string]: unknown;
};

export type GetUsersSelfSelfIdMelodleGameId200ConfigFromArtistsItem = {
    /** Identifier for an artist given by MusixMatch */
    musixmatchArtistId: string;
};

export type GetUsersSelfSelfIdMelodleGameId200Config = {
    /** The artists we can choose from. If empty, it means this filter does not do anything. */
    fromArtists: GetUsersSelfSelfIdMelodleGameId200ConfigFromArtistsItem[];
    /** Unique identifier for a config. */
    id: number;
    /** @pattern ^(Guess Line|Guess Song)$ */
    mode: string;
    /** Whether to pick from any artist or only favorited ones. */
    onlyFavoriteArtists: boolean;
};

export type GetUsersSelfSelfIdMelodleGameId200 = {
    attempts: GetUsersSelfSelfIdMelodleGameId200Attempts;
    config: GetUsersSelfSelfIdMelodleGameId200Config;
    endingTime?: string;
    /** A unique identifier for a melodle game. */
    gameId: number;
    /** @pattern ^(Guess Line|Guess Song)$ */
    gameMode: string;
    /** A numeric identifier for a user. Generated by the backend, unique and unchangeable. */
    userId: number;
    won?: boolean;
};

export type GetUsersSelfSelfIdMelodleGameId200AttemptsAnyOfTwoItem = {
    guessedAt: string;
    /**
     * A line to match against the actual line of the song.
     * @maxLength 1000
     */
    guessedLine: string;
};

export type GetUsersSelfSelfIdMelodleGameId200AttemptsAnyOfItem = {
    guessedAt: string;
    /** Identifier which can be used to fetch artist data from MusixMatch. */
    guessedSongId: string;
};

export type GetUsersSelfSelfIdMelodleGameId200Attempts =
    | GetUsersSelfSelfIdMelodleGameId200AttemptsAnyOfItem[]
    | GetUsersSelfSelfIdMelodleGameId200AttemptsAnyOfTwoItem[];

export type GetUsersSelfSelfIdFriendsLeaderboards401StatusCode =
    (typeof GetUsersSelfSelfIdFriendsLeaderboards401StatusCode)[keyof typeof GetUsersSelfSelfIdFriendsLeaderboards401StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetUsersSelfSelfIdFriendsLeaderboards401StatusCode = {
    NUMBER_401: 401,
} as const;

/**
 * unauthorized
 */
export type GetUsersSelfSelfIdFriendsLeaderboards401 = {
    error: string;
    message: string;
    statusCode: GetUsersSelfSelfIdFriendsLeaderboards401StatusCode;
    [key: string]: unknown;
};

export type GetUsersSelfSelfIdFriendsLeaderboards200LeaderboardItemAllOfTwo = {
    /** Players' position ordered from higest to lowest score. */
    rank: number;
    /** Score calculated by user performance within their games. */
    score: number;
};

export type GetUsersSelfSelfIdFriendsLeaderboards200LeaderboardItemAllOf = {
    /** A numeric identifier for a user. Generated by the backend, unique and unchangeable. */
    id: number;
    /**
     * The user's display name. It does not need to be unique.
     * @minLength 1
     * @maxLength 25
     */
    name: string;
    /** File name required to fetch the image from the route to get specific user icons. */
    profilePictureFilename: string;
    /**
   * The id to display to users. They must be unique, but the users can choose and change them.
### Rules
- Only accepts letters, digits and '.', '-', '_'.
   * @minLength 3
   * @maxLength 50
   * @pattern ^[a-zA-Z0-9\.-_]+$
   */
    username: string;
};

export type GetUsersSelfSelfIdFriendsLeaderboards200LeaderboardItem =
    GetUsersSelfSelfIdFriendsLeaderboards200LeaderboardItemAllOf &
        GetUsersSelfSelfIdFriendsLeaderboards200LeaderboardItemAllOfTwo;

/**
 * A leaderboard of melodle users.
 */
export type GetUsersSelfSelfIdFriendsLeaderboards200 = {
    leaderboard: GetUsersSelfSelfIdFriendsLeaderboards200LeaderboardItem[];
};

export type GetUsersSelfSelfIdFriendsLeaderboardsParams = {
    /**
     * States when a range starts.
     */
    start: number;
    /**
     * A number which defines range size.
     */
    amount: number;
    gameModes: string[];
};

export type PutUsersSelfSelfIdFriendsTargetUserId428StatusCode =
    (typeof PutUsersSelfSelfIdFriendsTargetUserId428StatusCode)[keyof typeof PutUsersSelfSelfIdFriendsTargetUserId428StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PutUsersSelfSelfIdFriendsTargetUserId428StatusCode = {
    NUMBER_428: 428,
} as const;

/**
 * preconditionRequired
 */
export type PutUsersSelfSelfIdFriendsTargetUserId428 = {
    error: string;
    message: string;
    statusCode: PutUsersSelfSelfIdFriendsTargetUserId428StatusCode;
    [key: string]: unknown;
};

export type PutUsersSelfSelfIdFriendsTargetUserId404StatusCode =
    (typeof PutUsersSelfSelfIdFriendsTargetUserId404StatusCode)[keyof typeof PutUsersSelfSelfIdFriendsTargetUserId404StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PutUsersSelfSelfIdFriendsTargetUserId404StatusCode = {
    NUMBER_404: 404,
} as const;

/**
 * notFound
 */
export type PutUsersSelfSelfIdFriendsTargetUserId404 = {
    error: string;
    message: string;
    statusCode: PutUsersSelfSelfIdFriendsTargetUserId404StatusCode;
    [key: string]: unknown;
};

export type PutUsersSelfSelfIdFriendsTargetUserId403StatusCode =
    (typeof PutUsersSelfSelfIdFriendsTargetUserId403StatusCode)[keyof typeof PutUsersSelfSelfIdFriendsTargetUserId403StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PutUsersSelfSelfIdFriendsTargetUserId403StatusCode = {
    NUMBER_403: 403,
} as const;

/**
 * forbidden
 */
export type PutUsersSelfSelfIdFriendsTargetUserId403 = {
    error: string;
    message: string;
    statusCode: PutUsersSelfSelfIdFriendsTargetUserId403StatusCode;
    [key: string]: unknown;
};

export type PutUsersSelfSelfIdFriendsTargetUserId401StatusCode =
    (typeof PutUsersSelfSelfIdFriendsTargetUserId401StatusCode)[keyof typeof PutUsersSelfSelfIdFriendsTargetUserId401StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PutUsersSelfSelfIdFriendsTargetUserId401StatusCode = {
    NUMBER_401: 401,
} as const;

/**
 * unauthorized
 */
export type PutUsersSelfSelfIdFriendsTargetUserId401 = {
    error: string;
    message: string;
    statusCode: PutUsersSelfSelfIdFriendsTargetUserId401StatusCode;
    [key: string]: unknown;
};

export type PutUsersSelfSelfIdFriendsTargetUserId400StatusCode =
    (typeof PutUsersSelfSelfIdFriendsTargetUserId400StatusCode)[keyof typeof PutUsersSelfSelfIdFriendsTargetUserId400StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PutUsersSelfSelfIdFriendsTargetUserId400StatusCode = {
    NUMBER_400: 400,
} as const;

/**
 * badRequest
 */
export type PutUsersSelfSelfIdFriendsTargetUserId400 = {
    error: string;
    message: string;
    statusCode: PutUsersSelfSelfIdFriendsTargetUserId400StatusCode;
    [key: string]: unknown;
};

export type PutUsersSelfSelfIdFriendsTargetUserId200 = {
    /** @pattern ^(pending|blocked|accepted)$ */
    status: string;
};

export type PostUsersSelfSelfIdFriendsTargetUserId404StatusCode =
    (typeof PostUsersSelfSelfIdFriendsTargetUserId404StatusCode)[keyof typeof PostUsersSelfSelfIdFriendsTargetUserId404StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostUsersSelfSelfIdFriendsTargetUserId404StatusCode = {
    NUMBER_404: 404,
} as const;

/**
 * notFound
 */
export type PostUsersSelfSelfIdFriendsTargetUserId404 = {
    error: string;
    message: string;
    statusCode: PostUsersSelfSelfIdFriendsTargetUserId404StatusCode;
    [key: string]: unknown;
};

export type PostUsersSelfSelfIdFriendsTargetUserId403StatusCode =
    (typeof PostUsersSelfSelfIdFriendsTargetUserId403StatusCode)[keyof typeof PostUsersSelfSelfIdFriendsTargetUserId403StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostUsersSelfSelfIdFriendsTargetUserId403StatusCode = {
    NUMBER_403: 403,
} as const;

/**
 * forbidden
 */
export type PostUsersSelfSelfIdFriendsTargetUserId403 = {
    error: string;
    message: string;
    statusCode: PostUsersSelfSelfIdFriendsTargetUserId403StatusCode;
    [key: string]: unknown;
};

export type PostUsersSelfSelfIdFriendsTargetUserId401StatusCode =
    (typeof PostUsersSelfSelfIdFriendsTargetUserId401StatusCode)[keyof typeof PostUsersSelfSelfIdFriendsTargetUserId401StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostUsersSelfSelfIdFriendsTargetUserId401StatusCode = {
    NUMBER_401: 401,
} as const;

/**
 * unauthorized
 */
export type PostUsersSelfSelfIdFriendsTargetUserId401 = {
    error: string;
    message: string;
    statusCode: PostUsersSelfSelfIdFriendsTargetUserId401StatusCode;
    [key: string]: unknown;
};

export type PostUsersSelfSelfIdFriendsTargetUserId400StatusCode =
    (typeof PostUsersSelfSelfIdFriendsTargetUserId400StatusCode)[keyof typeof PostUsersSelfSelfIdFriendsTargetUserId400StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostUsersSelfSelfIdFriendsTargetUserId400StatusCode = {
    NUMBER_400: 400,
} as const;

/**
 * badRequest
 */
export type PostUsersSelfSelfIdFriendsTargetUserId400 = {
    error: string;
    message: string;
    statusCode: PostUsersSelfSelfIdFriendsTargetUserId400StatusCode;
    [key: string]: unknown;
};

export type PostUsersSelfSelfIdFriendsTargetUserId201 = {
    /** @pattern ^(pending|blocked|accepted)$ */
    status: string;
};

export type DeleteUsersSelfSelfIdFriendsTargetUserId404StatusCode =
    (typeof DeleteUsersSelfSelfIdFriendsTargetUserId404StatusCode)[keyof typeof DeleteUsersSelfSelfIdFriendsTargetUserId404StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteUsersSelfSelfIdFriendsTargetUserId404StatusCode = {
    NUMBER_404: 404,
} as const;

/**
 * notFound
 */
export type DeleteUsersSelfSelfIdFriendsTargetUserId404 = {
    error: string;
    message: string;
    statusCode: DeleteUsersSelfSelfIdFriendsTargetUserId404StatusCode;
    [key: string]: unknown;
};

export type DeleteUsersSelfSelfIdFriendsTargetUserId401StatusCode =
    (typeof DeleteUsersSelfSelfIdFriendsTargetUserId401StatusCode)[keyof typeof DeleteUsersSelfSelfIdFriendsTargetUserId401StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteUsersSelfSelfIdFriendsTargetUserId401StatusCode = {
    NUMBER_401: 401,
} as const;

/**
 * unauthorized
 */
export type DeleteUsersSelfSelfIdFriendsTargetUserId401 = {
    error: string;
    message: string;
    statusCode: DeleteUsersSelfSelfIdFriendsTargetUserId401StatusCode;
    [key: string]: unknown;
};

export type DeleteUsersSelfSelfIdFriendsTargetUserId400StatusCode =
    (typeof DeleteUsersSelfSelfIdFriendsTargetUserId400StatusCode)[keyof typeof DeleteUsersSelfSelfIdFriendsTargetUserId400StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteUsersSelfSelfIdFriendsTargetUserId400StatusCode = {
    NUMBER_400: 400,
} as const;

/**
 * badRequest
 */
export type DeleteUsersSelfSelfIdFriendsTargetUserId400 = {
    error: string;
    message: string;
    statusCode: DeleteUsersSelfSelfIdFriendsTargetUserId400StatusCode;
    [key: string]: unknown;
};

export type DeleteUsersSelfSelfIdFriendsTargetUserId204Message =
    (typeof DeleteUsersSelfSelfIdFriendsTargetUserId204Message)[keyof typeof DeleteUsersSelfSelfIdFriendsTargetUserId204Message];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteUsersSelfSelfIdFriendsTargetUserId204Message = {
    "Deleted_friend_successfully!": "Deleted friend successfully!",
} as const;

export type DeleteUsersSelfSelfIdFriendsTargetUserId204 = {
    message: DeleteUsersSelfSelfIdFriendsTargetUserId204Message;
};

export type DeleteUsersSelfSelfIdBlocksTargetUserId404StatusCode =
    (typeof DeleteUsersSelfSelfIdBlocksTargetUserId404StatusCode)[keyof typeof DeleteUsersSelfSelfIdBlocksTargetUserId404StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteUsersSelfSelfIdBlocksTargetUserId404StatusCode = {
    NUMBER_404: 404,
} as const;

/**
 * notFound
 */
export type DeleteUsersSelfSelfIdBlocksTargetUserId404 = {
    error: string;
    message: string;
    statusCode: DeleteUsersSelfSelfIdBlocksTargetUserId404StatusCode;
    [key: string]: unknown;
};

export type DeleteUsersSelfSelfIdBlocksTargetUserId401StatusCode =
    (typeof DeleteUsersSelfSelfIdBlocksTargetUserId401StatusCode)[keyof typeof DeleteUsersSelfSelfIdBlocksTargetUserId401StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteUsersSelfSelfIdBlocksTargetUserId401StatusCode = {
    NUMBER_401: 401,
} as const;

/**
 * unauthorized
 */
export type DeleteUsersSelfSelfIdBlocksTargetUserId401 = {
    error: string;
    message: string;
    statusCode: DeleteUsersSelfSelfIdBlocksTargetUserId401StatusCode;
    [key: string]: unknown;
};

export type DeleteUsersSelfSelfIdBlocksTargetUserId400StatusCode =
    (typeof DeleteUsersSelfSelfIdBlocksTargetUserId400StatusCode)[keyof typeof DeleteUsersSelfSelfIdBlocksTargetUserId400StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteUsersSelfSelfIdBlocksTargetUserId400StatusCode = {
    NUMBER_400: 400,
} as const;

/**
 * badRequest
 */
export type DeleteUsersSelfSelfIdBlocksTargetUserId400 = {
    error: string;
    message: string;
    statusCode: DeleteUsersSelfSelfIdBlocksTargetUserId400StatusCode;
    [key: string]: unknown;
};

export type DeleteUsersSelfSelfIdBlocksTargetUserId200 = {
    blocked: boolean;
};

export type PostUsersSelfSelfIdBlocksTargetUserId404StatusCode =
    (typeof PostUsersSelfSelfIdBlocksTargetUserId404StatusCode)[keyof typeof PostUsersSelfSelfIdBlocksTargetUserId404StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostUsersSelfSelfIdBlocksTargetUserId404StatusCode = {
    NUMBER_404: 404,
} as const;

/**
 * notFound
 */
export type PostUsersSelfSelfIdBlocksTargetUserId404 = {
    error: string;
    message: string;
    statusCode: PostUsersSelfSelfIdBlocksTargetUserId404StatusCode;
    [key: string]: unknown;
};

export type PostUsersSelfSelfIdBlocksTargetUserId403StatusCode =
    (typeof PostUsersSelfSelfIdBlocksTargetUserId403StatusCode)[keyof typeof PostUsersSelfSelfIdBlocksTargetUserId403StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostUsersSelfSelfIdBlocksTargetUserId403StatusCode = {
    NUMBER_403: 403,
} as const;

/**
 * forbidden
 */
export type PostUsersSelfSelfIdBlocksTargetUserId403 = {
    error: string;
    message: string;
    statusCode: PostUsersSelfSelfIdBlocksTargetUserId403StatusCode;
    [key: string]: unknown;
};

export type PostUsersSelfSelfIdBlocksTargetUserId401StatusCode =
    (typeof PostUsersSelfSelfIdBlocksTargetUserId401StatusCode)[keyof typeof PostUsersSelfSelfIdBlocksTargetUserId401StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostUsersSelfSelfIdBlocksTargetUserId401StatusCode = {
    NUMBER_401: 401,
} as const;

/**
 * unauthorized
 */
export type PostUsersSelfSelfIdBlocksTargetUserId401 = {
    error: string;
    message: string;
    statusCode: PostUsersSelfSelfIdBlocksTargetUserId401StatusCode;
    [key: string]: unknown;
};

export type PostUsersSelfSelfIdBlocksTargetUserId400StatusCode =
    (typeof PostUsersSelfSelfIdBlocksTargetUserId400StatusCode)[keyof typeof PostUsersSelfSelfIdBlocksTargetUserId400StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostUsersSelfSelfIdBlocksTargetUserId400StatusCode = {
    NUMBER_400: 400,
} as const;

/**
 * badRequest
 */
export type PostUsersSelfSelfIdBlocksTargetUserId400 = {
    error: string;
    message: string;
    statusCode: PostUsersSelfSelfIdBlocksTargetUserId400StatusCode;
    [key: string]: unknown;
};

export type PostUsersSelfSelfIdBlocksTargetUserId201 = {
    blocked: boolean;
};

export type PutUsersSelfSelfIdArtistsArtistMusixMatchIdFavorite404StatusCode =
    (typeof PutUsersSelfSelfIdArtistsArtistMusixMatchIdFavorite404StatusCode)[keyof typeof PutUsersSelfSelfIdArtistsArtistMusixMatchIdFavorite404StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PutUsersSelfSelfIdArtistsArtistMusixMatchIdFavorite404StatusCode =
    {
        NUMBER_404: 404,
    } as const;

/**
 * notFound
 */
export type PutUsersSelfSelfIdArtistsArtistMusixMatchIdFavorite404 = {
    error: string;
    message: string;
    statusCode: PutUsersSelfSelfIdArtistsArtistMusixMatchIdFavorite404StatusCode;
    [key: string]: unknown;
};

export type PutUsersSelfSelfIdArtistsArtistMusixMatchIdFavorite401StatusCode =
    (typeof PutUsersSelfSelfIdArtistsArtistMusixMatchIdFavorite401StatusCode)[keyof typeof PutUsersSelfSelfIdArtistsArtistMusixMatchIdFavorite401StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PutUsersSelfSelfIdArtistsArtistMusixMatchIdFavorite401StatusCode =
    {
        NUMBER_401: 401,
    } as const;

/**
 * unauthorized
 */
export type PutUsersSelfSelfIdArtistsArtistMusixMatchIdFavorite401 = {
    error: string;
    message: string;
    statusCode: PutUsersSelfSelfIdArtistsArtistMusixMatchIdFavorite401StatusCode;
    [key: string]: unknown;
};

export type PutUsersSelfSelfIdArtistsArtistMusixMatchIdFavorite200 = {
    isFavorite: boolean;
};

export type PutUsersSelfSelfIdArtistsArtistMusixMatchIdFavoriteBody = {
    isFavorite: boolean;
};

export type GetUsersSelfSelfIdMelodleHistory401StatusCode =
    (typeof GetUsersSelfSelfIdMelodleHistory401StatusCode)[keyof typeof GetUsersSelfSelfIdMelodleHistory401StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetUsersSelfSelfIdMelodleHistory401StatusCode = {
    NUMBER_401: 401,
} as const;

/**
 * unauthorized
 */
export type GetUsersSelfSelfIdMelodleHistory401 = {
    error: string;
    message: string;
    statusCode: GetUsersSelfSelfIdMelodleHistory401StatusCode;
    [key: string]: unknown;
};

export type GetUsersSelfSelfIdMelodleHistory200ItemConfigFromArtistsItem = {
    /** Identifier for an artist given by MusixMatch */
    musixmatchArtistId: string;
};

export type GetUsersSelfSelfIdMelodleHistory200ItemConfig = {
    /** The artists we can choose from. If empty, it means this filter does not do anything. */
    fromArtists: GetUsersSelfSelfIdMelodleHistory200ItemConfigFromArtistsItem[];
    /** Unique identifier for a config. */
    id: number;
    /** @pattern ^(Guess Line|Guess Song)$ */
    mode: string;
    /** Whether to pick from any artist or only favorited ones. */
    onlyFavoriteArtists: boolean;
};

export type GetUsersSelfSelfIdMelodleHistory200Item = {
    attempts: GetUsersSelfSelfIdMelodleHistory200ItemAttempts;
    config: GetUsersSelfSelfIdMelodleHistory200ItemConfig;
    endingTime?: string;
    /** A unique identifier for a melodle game. */
    gameId: number;
    /** @pattern ^(Guess Line|Guess Song)$ */
    gameMode: string;
    /** A numeric identifier for a user. Generated by the backend, unique and unchangeable. */
    userId: number;
    won?: boolean;
};

export type GetUsersSelfSelfIdMelodleHistory200ItemAttemptsAnyOfTwoItem = {
    guessedAt: string;
    /**
     * A line to match against the actual line of the song.
     * @maxLength 1000
     */
    guessedLine: string;
};

export type GetUsersSelfSelfIdMelodleHistory200ItemAttemptsAnyOfItem = {
    guessedAt: string;
    /** Identifier which can be used to fetch artist data from MusixMatch. */
    guessedSongId: string;
};

export type GetUsersSelfSelfIdMelodleHistory200ItemAttempts =
    | GetUsersSelfSelfIdMelodleHistory200ItemAttemptsAnyOfItem[]
    | GetUsersSelfSelfIdMelodleHistory200ItemAttemptsAnyOfTwoItem[];

export type PostUsersSelfSelfIdMelodle425StatusCode =
    (typeof PostUsersSelfSelfIdMelodle425StatusCode)[keyof typeof PostUsersSelfSelfIdMelodle425StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostUsersSelfSelfIdMelodle425StatusCode = {
    NUMBER_425: 425,
} as const;

/**
 * tooEarly
 */
export type PostUsersSelfSelfIdMelodle425 = {
    error: string;
    message: string;
    statusCode: PostUsersSelfSelfIdMelodle425StatusCode;
    [key: string]: unknown;
};

export type PostUsersSelfSelfIdMelodle401StatusCode =
    (typeof PostUsersSelfSelfIdMelodle401StatusCode)[keyof typeof PostUsersSelfSelfIdMelodle401StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostUsersSelfSelfIdMelodle401StatusCode = {
    NUMBER_401: 401,
} as const;

/**
 * unauthorized
 */
export type PostUsersSelfSelfIdMelodle401 = {
    error: string;
    message: string;
    statusCode: PostUsersSelfSelfIdMelodle401StatusCode;
    [key: string]: unknown;
};

export type PostUsersSelfSelfIdMelodle200Config = {
    /** The artists we can choose from. If empty, it means this filter does not do anything. */
    fromArtists: PostUsersSelfSelfIdMelodle200ConfigFromArtistsItem[];
    /** Unique identifier for a config. */
    id: number;
    /** @pattern ^(Guess Line|Guess Song)$ */
    mode: string;
    /** Whether to pick from any artist or only favorited ones. */
    onlyFavoriteArtists: boolean;
};

export type PostUsersSelfSelfIdMelodle200 = {
    config: PostUsersSelfSelfIdMelodle200Config;
    /** A unique identifier for a melodle game. */
    gameId: number;
};

export type PostUsersSelfSelfIdMelodle200ConfigFromArtistsItem = {
    /** Identifier for an artist given by MusixMatch */
    musixmatchArtistId: string;
};

export type PostUsersSelfSelfIdMelodleBodyFromArtistsItem = {
    /** Identifier for an artist given by MusixMatch */
    musixmatchArtistId: string;
};

export type PostUsersSelfSelfIdMelodleBody = {
    /** The artists we can choose from. If empty, it means this filter does not do anything. */
    fromArtists: PostUsersSelfSelfIdMelodleBodyFromArtistsItem[];
    /** Unique identifier for a config. */
    id: number;
    /** @pattern ^(Guess Line|Guess Song)$ */
    mode: string;
    /** Whether to pick from any artist or only favorited ones. */
    onlyFavoriteArtists: boolean;
};

export type GetUsersSelfSelfIdFriends401StatusCode =
    (typeof GetUsersSelfSelfIdFriends401StatusCode)[keyof typeof GetUsersSelfSelfIdFriends401StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetUsersSelfSelfIdFriends401StatusCode = {
    NUMBER_401: 401,
} as const;

/**
 * unauthorized
 */
export type GetUsersSelfSelfIdFriends401 = {
    error: string;
    message: string;
    statusCode: GetUsersSelfSelfIdFriends401StatusCode;
    [key: string]: unknown;
};

export type GetUsersSelfSelfIdFriends200ItemAllOfTwo = {
    /** @pattern ^(pending|blocked|accepted)$ */
    status: string;
};

export type GetUsersSelfSelfIdFriends200ItemAllOf = {
    /** A numeric identifier for a user. Generated by the backend, unique and unchangeable. */
    id: number;
    /**
     * The user's display name. It does not need to be unique.
     * @minLength 1
     * @maxLength 25
     */
    name: string;
    /** File name required to fetch the image from the route to get specific user icons. */
    profilePictureFilename: string;
    /** The id to the profile picture of the user. These pictures cannot be uploaded, we store the options manually. */
    profilePictureId: number;
    /**
   * The id to display to users. They must be unique, but the users can choose and change them.
### Rules
- Only accepts letters, digits and '.', '-', '_'.
   * @minLength 3
   * @maxLength 50
   * @pattern ^[a-zA-Z0-9\.-_]+$
   */
    username: string;
};

export type GetUsersSelfSelfIdFriends200Item =
    GetUsersSelfSelfIdFriends200ItemAllOf &
        GetUsersSelfSelfIdFriends200ItemAllOfTwo;

export type GetUsersSelfSelfIdConfigsSuggest401StatusCode =
    (typeof GetUsersSelfSelfIdConfigsSuggest401StatusCode)[keyof typeof GetUsersSelfSelfIdConfigsSuggest401StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetUsersSelfSelfIdConfigsSuggest401StatusCode = {
    NUMBER_401: 401,
} as const;

/**
 * unauthorized
 */
export type GetUsersSelfSelfIdConfigsSuggest401 = {
    error: string;
    message: string;
    statusCode: GetUsersSelfSelfIdConfigsSuggest401StatusCode;
    [key: string]: unknown;
};

export type GetUsersSelfSelfIdConfigsSuggest200ItemFromArtistsItem = {
    /** Identifier for an artist given by MusixMatch */
    musixmatchArtistId: string;
};

export type GetUsersSelfSelfIdConfigsSuggest200Item = {
    /** The artists we can choose from. If empty, it means this filter does not do anything. */
    fromArtists: GetUsersSelfSelfIdConfigsSuggest200ItemFromArtistsItem[];
    /** @pattern ^(Guess Line|Guess Song)$ */
    mode: string;
    /** Whether to pick from any artist or only favorited ones. */
    onlyFavoriteArtists: boolean;
};

export type GetUsersSelfSelfIdConfigsSuggestParams = {
    /**
     * The user's id to use to connect with spotify services. It is not stored within the database, but some requests need it to function.
     */
    spotifyId: string;
};

export type PutUsersSelfSelfIdConfigsMelodleConfigId404StatusCode =
    (typeof PutUsersSelfSelfIdConfigsMelodleConfigId404StatusCode)[keyof typeof PutUsersSelfSelfIdConfigsMelodleConfigId404StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PutUsersSelfSelfIdConfigsMelodleConfigId404StatusCode = {
    NUMBER_404: 404,
} as const;

/**
 * notFound
 */
export type PutUsersSelfSelfIdConfigsMelodleConfigId404 = {
    error: string;
    message: string;
    statusCode: PutUsersSelfSelfIdConfigsMelodleConfigId404StatusCode;
    [key: string]: unknown;
};

export type PutUsersSelfSelfIdConfigsMelodleConfigId401StatusCode =
    (typeof PutUsersSelfSelfIdConfigsMelodleConfigId401StatusCode)[keyof typeof PutUsersSelfSelfIdConfigsMelodleConfigId401StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PutUsersSelfSelfIdConfigsMelodleConfigId401StatusCode = {
    NUMBER_401: 401,
} as const;

/**
 * unauthorized
 */
export type PutUsersSelfSelfIdConfigsMelodleConfigId401 = {
    error: string;
    message: string;
    statusCode: PutUsersSelfSelfIdConfigsMelodleConfigId401StatusCode;
    [key: string]: unknown;
};

export type PutUsersSelfSelfIdConfigsMelodleConfigId200FromArtistsItem = {
    /** Identifier for an artist given by MusixMatch */
    musixmatchArtistId: string;
};

export type PutUsersSelfSelfIdConfigsMelodleConfigId200 = {
    /** The artists we can choose from. If empty, it means this filter does not do anything. */
    fromArtists: PutUsersSelfSelfIdConfigsMelodleConfigId200FromArtistsItem[];
    /** Unique identifier for a config. */
    id: number;
    /** @pattern ^(Guess Line|Guess Song)$ */
    mode: string;
    /** Whether to pick from any artist or only favorited ones. */
    onlyFavoriteArtists: boolean;
};

export type DeleteUsersSelfSelfIdConfigsMelodleConfigId404StatusCode =
    (typeof DeleteUsersSelfSelfIdConfigsMelodleConfigId404StatusCode)[keyof typeof DeleteUsersSelfSelfIdConfigsMelodleConfigId404StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteUsersSelfSelfIdConfigsMelodleConfigId404StatusCode = {
    NUMBER_404: 404,
} as const;

/**
 * notFound
 */
export type DeleteUsersSelfSelfIdConfigsMelodleConfigId404 = {
    error: string;
    message: string;
    statusCode: DeleteUsersSelfSelfIdConfigsMelodleConfigId404StatusCode;
    [key: string]: unknown;
};

export type DeleteUsersSelfSelfIdConfigsMelodleConfigId401StatusCode =
    (typeof DeleteUsersSelfSelfIdConfigsMelodleConfigId401StatusCode)[keyof typeof DeleteUsersSelfSelfIdConfigsMelodleConfigId401StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteUsersSelfSelfIdConfigsMelodleConfigId401StatusCode = {
    NUMBER_401: 401,
} as const;

/**
 * unauthorized
 */
export type DeleteUsersSelfSelfIdConfigsMelodleConfigId401 = {
    error: string;
    message: string;
    statusCode: DeleteUsersSelfSelfIdConfigsMelodleConfigId401StatusCode;
    [key: string]: unknown;
};

export type DeleteUsersSelfSelfIdConfigsMelodleConfigId200FromArtistsItem = {
    /** Identifier for an artist given by MusixMatch */
    musixmatchArtistId: string;
};

export type DeleteUsersSelfSelfIdConfigsMelodleConfigId200 = {
    /** The artists we can choose from. If empty, it means this filter does not do anything. */
    fromArtists: DeleteUsersSelfSelfIdConfigsMelodleConfigId200FromArtistsItem[];
    /** Unique identifier for a config. */
    id: number;
    /** @pattern ^(Guess Line|Guess Song)$ */
    mode: string;
    /** Whether to pick from any artist or only favorited ones. */
    onlyFavoriteArtists: boolean;
};

export type PostUsersSelfSelfIdConfigs401StatusCode =
    (typeof PostUsersSelfSelfIdConfigs401StatusCode)[keyof typeof PostUsersSelfSelfIdConfigs401StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostUsersSelfSelfIdConfigs401StatusCode = {
    NUMBER_401: 401,
} as const;

/**
 * unauthorized
 */
export type PostUsersSelfSelfIdConfigs401 = {
    error: string;
    message: string;
    statusCode: PostUsersSelfSelfIdConfigs401StatusCode;
    [key: string]: unknown;
};

export type PostUsersSelfSelfIdConfigs200FromArtistsItem = {
    /** Identifier for an artist given by MusixMatch */
    musixmatchArtistId: string;
};

export type PostUsersSelfSelfIdConfigs200 = {
    /** The artists we can choose from. If empty, it means this filter does not do anything. */
    fromArtists: PostUsersSelfSelfIdConfigs200FromArtistsItem[];
    /** Unique identifier for a config. */
    id: number;
    /** @pattern ^(Guess Line|Guess Song)$ */
    mode: string;
    /** Whether to pick from any artist or only favorited ones. */
    onlyFavoriteArtists: boolean;
};

export type PostUsersSelfSelfIdConfigsBodyFromArtistsItem = {
    /** Identifier for an artist given by MusixMatch */
    musixmatchArtistId: string;
};

export type PostUsersSelfSelfIdConfigsBody = {
    /** The artists we can choose from. If empty, it means this filter does not do anything. */
    fromArtists: PostUsersSelfSelfIdConfigsBodyFromArtistsItem[];
    /** @pattern ^(Guess Line|Guess Song)$ */
    mode: string;
    /** Whether to pick from any artist or only favorited ones. */
    onlyFavoriteArtists: boolean;
};

export type GetUsersSelfSelfIdConfigs401StatusCode =
    (typeof GetUsersSelfSelfIdConfigs401StatusCode)[keyof typeof GetUsersSelfSelfIdConfigs401StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetUsersSelfSelfIdConfigs401StatusCode = {
    NUMBER_401: 401,
} as const;

/**
 * unauthorized
 */
export type GetUsersSelfSelfIdConfigs401 = {
    error: string;
    message: string;
    statusCode: GetUsersSelfSelfIdConfigs401StatusCode;
    [key: string]: unknown;
};

export type GetUsersSelfSelfIdConfigs200ItemFromArtistsItem = {
    /** Identifier for an artist given by MusixMatch */
    musixmatchArtistId: string;
};

export type GetUsersSelfSelfIdConfigs200Item = {
    /** The artists we can choose from. If empty, it means this filter does not do anything. */
    fromArtists: GetUsersSelfSelfIdConfigs200ItemFromArtistsItem[];
    /** Unique identifier for a config. */
    id: number;
    /** @pattern ^(Guess Line|Guess Song)$ */
    mode: string;
    /** Whether to pick from any artist or only favorited ones. */
    onlyFavoriteArtists: boolean;
};

export type DeleteUsersSelfSelfId404StatusCode =
    (typeof DeleteUsersSelfSelfId404StatusCode)[keyof typeof DeleteUsersSelfSelfId404StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteUsersSelfSelfId404StatusCode = {
    NUMBER_404: 404,
} as const;

/**
 * notFound
 */
export type DeleteUsersSelfSelfId404 = {
    error: string;
    message: string;
    statusCode: DeleteUsersSelfSelfId404StatusCode;
    [key: string]: unknown;
};

export type DeleteUsersSelfSelfId401StatusCode =
    (typeof DeleteUsersSelfSelfId401StatusCode)[keyof typeof DeleteUsersSelfSelfId401StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteUsersSelfSelfId401StatusCode = {
    NUMBER_401: 401,
} as const;

/**
 * unauthorized
 */
export type DeleteUsersSelfSelfId401 = {
    error: string;
    message: string;
    statusCode: DeleteUsersSelfSelfId401StatusCode;
    [key: string]: unknown;
};

export type DeleteUsersSelfSelfId200 = {
    /**
   * The id to display to users. They must be unique, but the users can choose and change them.
### Rules
- Only accepts letters, digits and '.', '-', '_'.
   * @minLength 3
   * @maxLength 50
   * @pattern ^[a-zA-Z0-9\.-_]+$
   */
    username: string;
};

export type PutUsersSelfSelfId401StatusCode =
    (typeof PutUsersSelfSelfId401StatusCode)[keyof typeof PutUsersSelfSelfId401StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PutUsersSelfSelfId401StatusCode = {
    NUMBER_401: 401,
} as const;

/**
 * unauthorized
 */
export type PutUsersSelfSelfId401 = {
    error: string;
    message: string;
    statusCode: PutUsersSelfSelfId401StatusCode;
    [key: string]: unknown;
};

export type PutUsersSelfSelfId200 = {
    /**
     * The user's email.
     * @maxLength 254
     * @pattern ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}$
     */
    email: string;
    /**
     * The user's display name. It does not need to be unique.
     * @minLength 1
     * @maxLength 25
     */
    name: string;
    /**
     * A password.
     * @minLength 3
     * @maxLength 20
     */
    password: string;
    /** The id to the profile picture of the user. These pictures cannot be uploaded, we store the options manually. */
    profilePictureId: number;
    /**
   * The id to display to users. They must be unique, but the users can choose and change them.
### Rules
- Only accepts letters, digits and '.', '-', '_'.
   * @minLength 3
   * @maxLength 50
   * @pattern ^[a-zA-Z0-9\.-_]+$
   */
    username: string;
};

export type PutUsersSelfSelfIdBody = {
    /**
     * The user's email.
     * @maxLength 254
     * @pattern ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}$
     */
    email: string;
    /**
     * The user's display name. It does not need to be unique.
     * @minLength 1
     * @maxLength 25
     */
    name: string;
    /**
     * A password.
     * @minLength 3
     * @maxLength 20
     */
    password: string;
    /** The id to the profile picture of the user. These pictures cannot be uploaded, we store the options manually. */
    profilePictureId: number;
    /**
   * The id to display to users. They must be unique, but the users can choose and change them.
### Rules
- Only accepts letters, digits and '.', '-', '_'.
   * @minLength 3
   * @maxLength 50
   * @pattern ^[a-zA-Z0-9\.-_]+$
   */
    username: string;
};

export type GetUsersSelfSelfId401StatusCode =
    (typeof GetUsersSelfSelfId401StatusCode)[keyof typeof GetUsersSelfSelfId401StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetUsersSelfSelfId401StatusCode = {
    NUMBER_401: 401,
} as const;

/**
 * unauthorized
 */
export type GetUsersSelfSelfId401 = {
    error: string;
    message: string;
    statusCode: GetUsersSelfSelfId401StatusCode;
    [key: string]: unknown;
};

export type GetUsersSelfSelfId200 = {
    /**
     * The user's email.
     * @maxLength 254
     * @pattern ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}$
     */
    email: string;
    /** A numeric identifier for a user. Generated by the backend, unique and unchangeable. */
    id: number;
    /**
     * The user's display name. It does not need to be unique.
     * @minLength 1
     * @maxLength 25
     */
    name: string;
    /** File name required to fetch the image from the route to get specific user icons. */
    profilePictureFile: string;
    /**
   * The id to display to users. They must be unique, but the users can choose and change them.
### Rules
- Only accepts letters, digits and '.', '-', '_'.
   * @minLength 3
   * @maxLength 50
   * @pattern ^[a-zA-Z0-9\.-_]+$
   */
    username: string;
};

export type PostDebugFakeUsers201Item = {
    /**
     * The user's email.
     * @maxLength 254
     * @pattern ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}$
     */
    email: string;
    /**
     * The user's display name. It does not need to be unique.
     * @minLength 1
     * @maxLength 25
     */
    name: string;
    /**
     * A password.
     * @minLength 3
     * @maxLength 20
     */
    password: string;
    /** The id to the profile picture of the user. These pictures cannot be uploaded, we store the options manually. */
    profilePictureId: number;
    /**
   * The id to display to users. They must be unique, but the users can choose and change them.
### Rules
- Only accepts letters, digits and '.', '-', '_'.
   * @minLength 3
   * @maxLength 50
   * @pattern ^[a-zA-Z0-9\.-_]+$
   */
    username: string;
};

export type PostDebugFakeUsersBody = {
    /** The amount of users to generate. */
    amount: number;
};

export type GetDebugFakeUser200 = {
    /**
     * The user's email.
     * @maxLength 254
     * @pattern ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}$
     */
    email: string;
    /**
     * The user's display name. It does not need to be unique.
     * @minLength 1
     * @maxLength 25
     */
    name: string;
    /**
     * A password.
     * @minLength 3
     * @maxLength 20
     */
    password: string;
    /** The id to the profile picture of the user. These pictures cannot be uploaded, we store the options manually. */
    profilePictureId: number;
    /**
   * The id to display to users. They must be unique, but the users can choose and change them.
### Rules
- Only accepts letters, digits and '.', '-', '_'.
   * @minLength 3
   * @maxLength 50
   * @pattern ^[a-zA-Z0-9\.-_]+$
   */
    username: string;
};

export type PostAuthRegister400StatusCode =
    (typeof PostAuthRegister400StatusCode)[keyof typeof PostAuthRegister400StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostAuthRegister400StatusCode = {
    NUMBER_400: 400,
} as const;

/**
 * badRequest
 */
export type PostAuthRegister400 = {
    error: string;
    message: string;
    statusCode: PostAuthRegister400StatusCode;
    [key: string]: unknown;
};

export type PostAuthRegister200 = {
    /** A numeric identifier for a user. Generated by the backend, unique and unchangeable. */
    id: number;
    /** The 'encrypted' jwt token. It is easily decryptable, so no sensitive information is stored there. */
    jwtToken: string;
};

export type PostAuthRegisterBody = {
    /**
     * The user's email.
     * @maxLength 254
     * @pattern ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}$
     */
    email: string;
    /**
     * The user's display name. It does not need to be unique.
     * @minLength 1
     * @maxLength 25
     */
    name: string;
    /**
     * A password.
     * @minLength 3
     * @maxLength 20
     */
    password: string;
    /** The id to the profile picture of the user. These pictures cannot be uploaded, we store the options manually. */
    profilePictureId: number;
    /**
   * The id to display to users. They must be unique, but the users can choose and change them.
### Rules
- Only accepts letters, digits and '.', '-', '_'.
   * @minLength 3
   * @maxLength 50
   * @pattern ^[a-zA-Z0-9\.-_]+$
   */
    username: string;
};

export type PostAuthLogin404StatusCode =
    (typeof PostAuthLogin404StatusCode)[keyof typeof PostAuthLogin404StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostAuthLogin404StatusCode = {
    NUMBER_404: 404,
} as const;

/**
 * notFound
 */
export type PostAuthLogin404 = {
    error: string;
    message: string;
    statusCode: PostAuthLogin404StatusCode;
    [key: string]: unknown;
};

export type PostAuthLogin200 = {
    /** A numeric identifier for a user. Generated by the backend, unique and unchangeable. */
    id: number;
    /** The 'encrypted' jwt token. It is easily decryptable, so no sensitive information is stored there. */
    jwtToken: string;
};

export type PostAuthLoginBody = {
    /** @maxLength 254 */
    emailOrUsername: string;
    /**
     * A password.
     * @minLength 3
     * @maxLength 20
     */
    password: string;
};

export type GetUsersCheck200 = {
    emailExists: boolean;
    usernameExists: boolean;
};

export type GetUsersCheckParams = {
    /**
 * The id to display to users. They must be unique, but the users can choose and change them.
### Rules
- Only accepts letters, digits and '.', '-', '_'.
 */
    username?: string;
    /**
     * The user's email.
     */
    email?: string;
};

export type GetUsersSearch200MatchesItem = {
    /** A numeric identifier for a user. Generated by the backend, unique and unchangeable. */
    id: number;
    /**
     * The user's display name. It does not need to be unique.
     * @minLength 1
     * @maxLength 25
     */
    name: string;
    /** File name required to fetch the image from the route to get specific user icons. */
    profilePictureFilename: string;
    /** The id to the profile picture of the user. These pictures cannot be uploaded, we store the options manually. */
    profilePictureId: number;
    /** Similarity ranking, from 0 to 1, 1 meaning equal. */
    rank: number;
    /**
   * The id to display to users. They must be unique, but the users can choose and change them.
### Rules
- Only accepts letters, digits and '.', '-', '_'.
   * @minLength 3
   * @maxLength 50
   * @pattern ^[a-zA-Z0-9\.-_]+$
   */
    username: string;
};

export type GetUsersSearch200 = {
    /** An array of near-matches, sorted from most relevant to least. */
    matches: GetUsersSearch200MatchesItem[];
    /** The total number of pages found with current sent query and page size. */
    totalPages: number;
};

export type GetUsersSearchParams = {
    /**
     * A query to search for an element with a fuzzy algorithm.
     */
    query: string;
    /**
     * The size of page with which to split results.
     */
    pageSize: number;
    /**
     * The page to index into, starting at 0.
     */
    page: number;
};

export type GetUsersUserId200 = {
    /**
     * The user's display name. It does not need to be unique.
     * @minLength 1
     * @maxLength 25
     */
    name: string;
    /** File name required to fetch the image from the route to get specific user icons. */
    profilePictureFilename: string;
    /**
   * The id to display to users. They must be unique, but the users can choose and change them.
### Rules
- Only accepts letters, digits and '.', '-', '_'.
   * @minLength 3
   * @maxLength 50
   * @pattern ^[a-zA-Z0-9\.-_]+$
   */
    username: string;
};

/**
 * Information to identify and describe an icon.
 */
export type GetPublicIcons200Item = {
    /** File name required to fetch the image from the route to get specific user icons. */
    filename: string;
    /** Identifier for the icon. */
    id: number;
};

export type GetPublicIconsFilename404StatusCode =
    (typeof GetPublicIconsFilename404StatusCode)[keyof typeof GetPublicIconsFilename404StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetPublicIconsFilename404StatusCode = {
    NUMBER_404: 404,
} as const;

/**
 * notFound
 */
export type GetPublicIconsFilename404 = {
    error: string;
    message: string;
    statusCode: GetPublicIconsFilename404StatusCode;
    [key: string]: unknown;
};

export type GetLyricsTrackMusixMatchId200 = {
    /** Copyright information for the lyrics, if available. */
    copyright?: string;
    /** Indicates if the lyrics contain explicit content. */
    explicit: boolean;
    /** The language in which the lyrics are written. */
    language: string;
    /** The full lyrics of the track. */
    lyricsBody: string;
    /** Identifier for the lyrics provided by MusixMatch. */
    lyricsId: string;
    /** Identifier for the track associated with these lyrics on MusixMatch. */
    trackId: string;
};

export type PutDebugSnapshot200 =
    (typeof PutDebugSnapshot200)[keyof typeof PutDebugSnapshot200];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PutDebugSnapshot200 = {
    "TODO!": "TODO!",
} as const;

export type GetDebugSnapshot200UsersItem = {
    /**
     * The user's email.
     * @maxLength 254
     * @pattern ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}$
     */
    email: string;
    /**
     * The user's display name. It does not need to be unique.
     * @minLength 1
     * @maxLength 25
     */
    name: string;
    /** The id to the profile picture of the user. These pictures cannot be uploaded, we store the options manually. */
    profilePictureId: number;
    /** The user's id to use to connect with spotify services. It is not stored within the database, but some requests need it to function. */
    spotifyId?: string;
    /**
   * The id to display to users. They must be unique, but the users can choose and change them.
### Rules
- Only accepts letters, digits and '.', '-', '_'.
   * @minLength 3
   * @maxLength 50
   * @pattern ^[a-zA-Z0-9\.-_]+$
   */
    username: string;
};

export type GetDebugSnapshot200FriendsItem = {
    createdAt: string;
    /**
   * The id to display to users. They must be unique, but the users can choose and change them.
### Rules
- Only accepts letters, digits and '.', '-', '_'.
   * @minLength 3
   * @maxLength 50
   * @pattern ^[a-zA-Z0-9\.-_]+$
   */
    friendUsername: string;
    /** @pattern ^(pending|blocked|accepted)$ */
    status: string;
    /**
   * The id to display to users. They must be unique, but the users can choose and change them.
### Rules
- Only accepts letters, digits and '.', '-', '_'.
   * @minLength 3
   * @maxLength 50
   * @pattern ^[a-zA-Z0-9\.-_]+$
   */
    userUsername: string;
};

export type GetDebugSnapshot200 = {
    friends: GetDebugSnapshot200FriendsItem[];
    users: GetDebugSnapshot200UsersItem[];
};

export type GetLeaderboards200LeaderboardItemAllOfTwo = {
    /** Players' position ordered from higest to lowest score. */
    rank: number;
    /** Score calculated by user performance within their games. */
    score: number;
};

export type GetLeaderboards200LeaderboardItemAllOf = {
    /** A numeric identifier for a user. Generated by the backend, unique and unchangeable. */
    id: number;
    /**
     * The user's display name. It does not need to be unique.
     * @minLength 1
     * @maxLength 25
     */
    name: string;
    /** File name required to fetch the image from the route to get specific user icons. */
    profilePictureFilename: string;
    /**
   * The id to display to users. They must be unique, but the users can choose and change them.
### Rules
- Only accepts letters, digits and '.', '-', '_'.
   * @minLength 3
   * @maxLength 50
   * @pattern ^[a-zA-Z0-9\.-_]+$
   */
    username: string;
};

export type GetLeaderboards200LeaderboardItem =
    GetLeaderboards200LeaderboardItemAllOf &
        GetLeaderboards200LeaderboardItemAllOfTwo;

/**
 * A leaderboard of melodle users.
 */
export type GetLeaderboards200 = {
    leaderboard: GetLeaderboards200LeaderboardItem[];
};

export type GetLeaderboardsParams = {
    gameModes: string[];
    /**
     * States when a range starts.
     */
    start: number;
    /**
     * A number which defines range size.
     */
    amount: number;
};

export type GetArtistsSearch200Item = {
    /** Url to download the artist's portrait image, if available. */
    imageUrl?: string;
    /** Identifier for an artist given by MusixMatch */
    musixmatchArtistId: string;
    /** Name of the artist, does not have to be unique. */
    name: string;
};

export type GetArtistsSearchParams = {
    query: string;
};

export type GetArtistsArtistName200Item = {
    /** Url to download the artist's portrait image, if available. */
    imageUrl?: string;
    /** Identifier for an artist given by MusixMatch */
    musixmatchArtistId: string;
    /** Name of the artist, does not have to be unique. */
    name: string;
};

export type GetArtistsArtistNameParams = {
    query: string;
};

export type GetArtistsArtistMusixMatchId404StatusCode =
    (typeof GetArtistsArtistMusixMatchId404StatusCode)[keyof typeof GetArtistsArtistMusixMatchId404StatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetArtistsArtistMusixMatchId404StatusCode = {
    NUMBER_404: 404,
} as const;

/**
 * notFound
 */
export type GetArtistsArtistMusixMatchId404 = {
    error: string;
    message: string;
    statusCode: GetArtistsArtistMusixMatchId404StatusCode;
    [key: string]: unknown;
};

export type GetArtistsArtistMusixMatchId200 = {
    /** Url to download the artist's portrait image, if available. */
    imageUrl?: string;
    /** Identifier for an artist given by MusixMatch */
    musixmatchArtistId: string;
    /** Name of the artist, does not have to be unique. */
    name: string;
};

export type Get200Ping = (typeof Get200Ping)[keyof typeof Get200Ping];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const Get200Ping = {
    "Pong!": "Pong!",
} as const;

export type Get200 = {
    ping: Get200Ping;
    root: boolean;
};

/**
 * A leaderboard of melodle users.
 */
export interface Def3 {
    leaderboard: Def3LeaderboardItem[];
}

export type Def3LeaderboardItemAllOfTwo = {
    /** Players' position ordered from higest to lowest score. */
    rank: number;
    /** Score calculated by user performance within their games. */
    score: number;
};

export type Def3LeaderboardItemAllOf = {
    /** A numeric identifier for a user. Generated by the backend, unique and unchangeable. */
    id: number;
    /**
     * The user's display name. It does not need to be unique.
     * @minLength 1
     * @maxLength 25
     */
    name: string;
    /** File name required to fetch the image from the route to get specific user icons. */
    profilePictureFilename: string;
    /**
   * The id to display to users. They must be unique, but the users can choose and change them.
### Rules
- Only accepts letters, digits and '.', '-', '_'.
   * @minLength 3
   * @maxLength 50
   * @pattern ^[a-zA-Z0-9\.-_]+$
   */
    username: string;
};

export type Def3LeaderboardItem = Def3LeaderboardItemAllOf &
    Def3LeaderboardItemAllOfTwo;

/**
 * A token which will serve to authenticate a user.
 */
export interface Def2 {
    /** The 'encrypted' jwt token. It is easily decryptable, so no sensitive information is stored there. */
    jwtToken: string;
}

export interface Def1 {
    /** A numeric identifier for an artist. Generated by the backend, unique and unchangeable. */
    id: number;
    /** Url to download the artist's portrait image, if available. */
    imageUrl?: string;
    /** Identifier for an artist given by MusixMatch */
    musixmatchArtistId: string;
    /** Name of the artist, does not have to be unique. */
    name: string;
}

export type Def0FavoriteArtistsItem = {
    /** A numeric identifier for an artist. Generated by the backend, unique and unchangeable. */
    id: number;
    /** Url to download the artist's portrait image, if available. */
    imageUrl?: string;
    /** Identifier for an artist given by MusixMatch */
    musixmatchArtistId: string;
    /** Name of the artist, does not have to be unique. */
    name: string;
};

export interface Def0 {
    /**
     * The user's email.
     * @maxLength 254
     * @pattern ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}$
     */
    email: string;
    /** An array of every artist currently favorited by the user. */
    favoriteArtists: Def0FavoriteArtistsItem[];
    /** A numeric identifier for a user. Generated by the backend, unique and unchangeable. */
    id: number;
    /**
     * The user's display name. It does not need to be unique.
     * @minLength 1
     * @maxLength 25
     */
    name: string;
    /**
     * A password.
     * @minLength 3
     * @maxLength 20
     */
    password: string;
    /** File name required to fetch the image from the route to get specific user icons. */
    profilePictureFilename: string;
    /** The id to the profile picture of the user. These pictures cannot be uploaded, we store the options manually. */
    profilePictureId: number;
    /** The user's id to use to connect with spotify services. It is not stored within the database, but some requests need it to function. */
    spotifyId: string;
    /**
   * The id to display to users. They must be unique, but the users can choose and change them.
### Rules
- Only accepts letters, digits and '.', '-', '_'.
   * @minLength 3
   * @maxLength 50
   * @pattern ^[a-zA-Z0-9\.-_]+$
   */
    username: string;
}

export const getAuthRegisterSpotify = <TData = AxiosResponse<void>>(
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.get(
        `https://localhost/backend/auth/register/spotify`,
        options
    );
};

export const getAuthLoginSpotify = <TData = AxiosResponse<void>>(
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.get(`https://localhost/backend/auth/login/spotify`, options);
};

/**
 * Route to check whether the service is working.
 * @summary Ping!
 */
export const get = <TData = AxiosResponse<Get200>>(
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.get(`https://localhost/backend/`, options);
};

/**
 * @summary Get information about an artist
 */
export const getArtistsArtistMusixMatchId = <
    TData = AxiosResponse<GetArtistsArtistMusixMatchId200>,
>(
    artistMusixMatchId: string,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.get(
        `https://localhost/backend/artists/${artistMusixMatchId}`,
        options
    );
};

/**
 * Search for artists based on the query provided in the querystring.
 * @summary Search for artists by name
 */
export const getArtistsArtistName = <
    TData = AxiosResponse<GetArtistsArtistName200Item[]>,
>(
    params: GetArtistsArtistNameParams,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.get(`https://localhost/backend/artists/artistName`, {
        ...options,
        params: { ...params, ...options?.params },
    });
};

/**
 * We use a custom algorithm to determine which artists are most relevant, based off the query in the querystring.
 * @summary Search for available artists.
 */
export const getArtistsSearch = <
    TData = AxiosResponse<GetArtistsSearch200Item[]>,
>(
    params: GetArtistsSearchParams,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.get(`https://localhost/backend/artists/search`, {
        ...options,
        params: { ...params, ...options?.params },
    });
};

/**
 * @summary Fetches global leaderboard information.
 */
export const getLeaderboards = <TData = AxiosResponse<GetLeaderboards200>>(
    params: GetLeaderboardsParams,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.get(`https://localhost/backend/leaderboards/`, {
        ...options,
        params: { ...params, ...options?.params },
    });
};

/**
 * @summary Get current state of application.
 */
export const getDebugSnapshot = <TData = AxiosResponse<GetDebugSnapshot200>>(
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.get(`https://localhost/backend/debug/snapshot`, options);
};

/**
 * @summary Reset the application state to a certain snapshot.
 */
export const putDebugSnapshot = <TData = AxiosResponse<PutDebugSnapshot200>>(
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.put(
        `https://localhost/backend/debug/snapshot`,
        undefined,
        options
    );
};

/**
 * This endpoint retrieves the lyrics for a given track using its Musixmatch ID
 * @summary Get lyrics for a specific track
 */
export const getLyricsTrackMusixMatchId = <
    TData = AxiosResponse<GetLyricsTrackMusixMatchId200>,
>(
    trackMusixMatchId: string,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.get(
        `https://localhost/backend/lyrics/${trackMusixMatchId}`,
        options
    );
};

/**
 * Get the svg for a certain user icon. The selection of user icons is fixed.
 * @summary Get a user icon.
 */
export const getPublicIconsFilename = <TData = AxiosResponse<Blob>>(
    filename: string,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.get(`https://localhost/backend/public/icons/${filename}`, {
        responseType: "blob",
        ...options,
    });
};

/**
 * @summary Get information about all user icons.
 */
export const getPublicIcons = <TData = AxiosResponse<GetPublicIcons200Item[]>>(
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.get(`https://localhost/backend/public/icons`, options);
};

/**
 * Authentication is not needed to see public user information.
 * @summary Get public information from some user.
 */
export const getUsersUserId = <TData = AxiosResponse<GetUsersUserId200>>(
    userId: number,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.get(`https://localhost/backend/users/${userId}`, options);
};

/**
 * @summary Search users through their public information.
 */
export const getUsersSearch = <TData = AxiosResponse<GetUsersSearch200>>(
    params: GetUsersSearchParams,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.get(`https://localhost/backend/users/search`, {
        ...options,
        params: { ...params, ...options?.params },
    });
};

/**
 * @summary Check if some user data already exists
 */
export const getUsersCheck = <TData = AxiosResponse<GetUsersCheck200>>(
    params?: GetUsersCheckParams,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.get(`https://localhost/backend/users/check`, {
        ...options,
        params: { ...params, ...options?.params },
    });
};

/**
 * @summary Fetch a user's jwt token.
 */
export const postAuthLogin = <TData = AxiosResponse<PostAuthLogin200>>(
    postAuthLoginBody: PostAuthLoginBody,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.post(
        `https://localhost/backend/auth/login`,
        postAuthLoginBody,
        options
    );
};

/**
 * Creates a new user with the given credentials if possible.
 * @summary Create a user.
 */
export const postAuthRegister = <TData = AxiosResponse<PostAuthRegister200>>(
    postAuthRegisterBody: PostAuthRegisterBody,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.post(
        `https://localhost/backend/auth/register`,
        postAuthRegisterBody,
        options
    );
};

/**
 * All fake users have Fake123! as their password.
 * @summary Returns random, believable credentials for a user.
 */
export const getDebugFakeUser = <TData = AxiosResponse<GetDebugFakeUser200>>(
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.get(`https://localhost/backend/debug/fake/user`, options);
};

/**
 * We do not check if the user already exists, so this route may error. On error, we roll back any changes.
 * @summary Create a certain number of fake users.
 */
export const postDebugFakeUsers = <
    TData = AxiosResponse<PostDebugFakeUsers201Item[]>,
>(
    postDebugFakeUsersBody: PostDebugFakeUsersBody,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.post(
        `https://localhost/backend/debug/fake/users`,
        postDebugFakeUsersBody,
        options
    );
};

/**
 * @summary Login through spotify.
 */
export const getAuthLoginSpotifyCallback = <TData = AxiosResponse<unknown>>(
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.get(
        `https://localhost/backend/auth/login/spotify/callback`,
        options
    );
};

/**
 * The actual url you should use is this one removing /callback
> !) Eventually this schema will change.
 * @summary Register a user through a spotify callback.
 */
export const getAuthRegisterSpotifyCallback = <TData = AxiosResponse<unknown>>(
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.get(
        `https://localhost/backend/auth/register/spotify/callback`,
        options
    );
};

/**
 * This is the route that exposes the most information about a user.
 * @summary Get your user information.
 */
export const getUsersSelfSelfId = <
    TData = AxiosResponse<GetUsersSelfSelfId200>,
>(
    selfId: number,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.get(`https://localhost/backend/users/self/${selfId}`, options);
};

/**
 * @summary Update your user information.
 */
export const putUsersSelfSelfId = <
    TData = AxiosResponse<PutUsersSelfSelfId200>,
>(
    selfId: number,
    putUsersSelfSelfIdBody: PutUsersSelfSelfIdBody,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.put(
        `https://localhost/backend/users/self/${selfId}`,
        putUsersSelfSelfIdBody,
        options
    );
};

/**
 * The cascading deletion will be more thoroughly implemented once other resources are implemented.
 * @summary Delete your own user and all their associated information.
 */
export const deleteUsersSelfSelfId = <
    TData = AxiosResponse<DeleteUsersSelfSelfId200>,
>(
    selfId: number,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.delete(
        `https://localhost/backend/users/self/${selfId}`,
        options
    );
};

/**
 * @summary Get saved user configurations.
 */
export const getUsersSelfSelfIdConfigs = <
    TData = AxiosResponse<GetUsersSelfSelfIdConfigs200Item[]>,
>(
    selfId: number,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.get(
        `https://localhost/backend/users/self/${selfId}/configs`,
        options
    );
};

/**
 * @summary Add a new configuration preset.
 */
export const postUsersSelfSelfIdConfigs = <
    TData = AxiosResponse<PostUsersSelfSelfIdConfigs200>,
>(
    selfId: number,
    postUsersSelfSelfIdConfigsBody: PostUsersSelfSelfIdConfigsBody,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.post(
        `https://localhost/backend/users/self/${selfId}/configs`,
        postUsersSelfSelfIdConfigsBody,
        options
    );
};

/**
 * @summary Delete a configuration preset.
 */
export const deleteUsersSelfSelfIdConfigsMelodleConfigId = <
    TData = AxiosResponse<DeleteUsersSelfSelfIdConfigsMelodleConfigId200>,
>(
    selfId: number,
    melodleConfigId: number,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.delete(
        `https://localhost/backend/users/self/${selfId}/configs/${melodleConfigId}`,
        options
    );
};

/**
 * @summary Update a configuration preset.
 */
export const putUsersSelfSelfIdConfigsMelodleConfigId = <
    TData = AxiosResponse<PutUsersSelfSelfIdConfigsMelodleConfigId200>,
>(
    selfId: number,
    melodleConfigId: number,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.put(
        `https://localhost/backend/users/self/${selfId}/configs/${melodleConfigId}`,
        undefined,
        options
    );
};

/**
 * TODO: Discuss whether we should ask for the id or make the frontend fetch the data and pass it to us.
 * @summary Ask for a configuration suggestion based off of the user's spotify information.
 */
export const getUsersSelfSelfIdConfigsSuggest = <
    TData = AxiosResponse<GetUsersSelfSelfIdConfigsSuggest200Item[]>,
>(
    selfId: number,
    params: GetUsersSelfSelfIdConfigsSuggestParams,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.get(
        `https://localhost/backend/users/self/${selfId}/configs/suggest`,
        {
            ...options,
            params: { ...params, ...options?.params },
        }
    );
};

/**
 * @summary Get all friends from a user.
 */
export const getUsersSelfSelfIdFriends = <
    TData = AxiosResponse<GetUsersSelfSelfIdFriends200Item[]>,
>(
    selfId: number,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.get(
        `https://localhost/backend/users/self/${selfId}/friends`,
        options
    );
};

/**
 * @summary Start a new melodle game.
 */
export const postUsersSelfSelfIdMelodle = <
    TData = AxiosResponse<PostUsersSelfSelfIdMelodle200>,
>(
    selfId: number,
    postUsersSelfSelfIdMelodleBody: PostUsersSelfSelfIdMelodleBody,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.post(
        `https://localhost/backend/users/self/${selfId}/melodle`,
        postUsersSelfSelfIdMelodleBody,
        options
    );
};

/**
 * @summary Get a history of your own games.
 */
export const getUsersSelfSelfIdMelodleHistory = <
    TData = AxiosResponse<GetUsersSelfSelfIdMelodleHistory200Item[]>,
>(
    selfId: number,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.get(
        `https://localhost/backend/users/self/${selfId}/melodle/history`,
        options
    );
};

/**
 * @summary Update whether a given artist is within you favorite ones.
 */
export const putUsersSelfSelfIdArtistsArtistMusixMatchIdFavorite = <
    TData = AxiosResponse<PutUsersSelfSelfIdArtistsArtistMusixMatchIdFavorite200>,
>(
    selfId: number,
    artistMusixMatchId: string,
    putUsersSelfSelfIdArtistsArtistMusixMatchIdFavoriteBody: PutUsersSelfSelfIdArtistsArtistMusixMatchIdFavoriteBody,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.put(
        `https://localhost/backend/users/self/${selfId}/artists/${artistMusixMatchId}/favorite`,
        putUsersSelfSelfIdArtistsArtistMusixMatchIdFavoriteBody,
        options
    );
};

/**
 * @summary Block a user.
 */
export const postUsersSelfSelfIdBlocksTargetUserId = <
    TData = AxiosResponse<PostUsersSelfSelfIdBlocksTargetUserId201>,
>(
    selfId: number,
    targetUserId: number,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.post(
        `https://localhost/backend/users/self/${selfId}/blocks/${targetUserId}`,
        undefined,
        options
    );
};

/**
 * @summary Unblock a user.
 */
export const deleteUsersSelfSelfIdBlocksTargetUserId = <
    TData = AxiosResponse<DeleteUsersSelfSelfIdBlocksTargetUserId200>,
>(
    selfId: number,
    targetUserId: number,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.delete(
        `https://localhost/backend/users/self/${selfId}/blocks/${targetUserId}`,
        options
    );
};

/**
 * It transforms the friend into a normal stranger.
 * @summary Removes a friend.
 */
export const deleteUsersSelfSelfIdFriendsTargetUserId = <
    TData = AxiosResponse<DeleteUsersSelfSelfIdFriendsTargetUserId204>,
>(
    selfId: number,
    targetUserId: number,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.delete(
        `https://localhost/backend/users/self/${selfId}/friends/${targetUserId}`,
        options
    );
};

/**
 * @summary Sends a friend request
 */
export const postUsersSelfSelfIdFriendsTargetUserId = <
    TData = AxiosResponse<PostUsersSelfSelfIdFriendsTargetUserId201>,
>(
    selfId: number,
    targetUserId: number,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.post(
        `https://localhost/backend/users/self/${selfId}/friends/${targetUserId}`,
        undefined,
        options
    );
};

/**
 * @summary It accepts a friend request.
 */
export const putUsersSelfSelfIdFriendsTargetUserId = <
    TData = AxiosResponse<PutUsersSelfSelfIdFriendsTargetUserId200>,
>(
    selfId: number,
    targetUserId: number,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.put(
        `https://localhost/backend/users/self/${selfId}/friends/${targetUserId}`,
        undefined,
        options
    );
};

/**
 * @summary Gets information about the user's friends leaderboard on the game mode.
 */
export const getUsersSelfSelfIdFriendsLeaderboards = <
    TData = AxiosResponse<GetUsersSelfSelfIdFriendsLeaderboards200>,
>(
    selfId: number,
    params: GetUsersSelfSelfIdFriendsLeaderboardsParams,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.get(
        `https://localhost/backend/users/self/${selfId}/friends/leaderboards/`,
        {
            ...options,
            params: { ...params, ...options?.params },
        }
    );
};

/**
 * @summary Get information about a melodle game.
 */
export const getUsersSelfSelfIdMelodleGameId = <
    TData = AxiosResponse<GetUsersSelfSelfIdMelodleGameId200>,
>(
    selfId: number,
    gameId: number,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.get(
        `https://localhost/backend/users/self/${selfId}/melodle/${gameId}`,
        options
    );
};

/**
 * @summary Submit a guess for a melodle game.
 */
export const postUsersSelfSelfIdMelodleGameIdGuessLineAttempts = <
    TData = AxiosResponse<PostUsersSelfSelfIdMelodleGameIdGuessLineAttempts200>,
>(
    selfId: number,
    gameId: number,
    postUsersSelfSelfIdMelodleGameIdGuessLineAttemptsBody: PostUsersSelfSelfIdMelodleGameIdGuessLineAttemptsBody,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.post(
        `https://localhost/backend/users/self/${selfId}/melodle/${gameId}/guessLine/attempts`,
        postUsersSelfSelfIdMelodleGameIdGuessLineAttemptsBody,
        options
    );
};

/**
 * @summary Submit a guess for a melodle game.
 */
export const postUsersSelfSelfIdMelodleGameIdGuessSongAttempts = <
    TData = AxiosResponse<PostUsersSelfSelfIdMelodleGameIdGuessSongAttempts200>,
>(
    selfId: number,
    gameId: number,
    postUsersSelfSelfIdMelodleGameIdGuessSongAttemptsBody: PostUsersSelfSelfIdMelodleGameIdGuessSongAttemptsBody,
    options?: AxiosRequestConfig
): Promise<TData> => {
    return axios.post(
        `https://localhost/backend/users/self/${selfId}/melodle/${gameId}/guessSong/attempts`,
        postUsersSelfSelfIdMelodleGameIdGuessSongAttemptsBody,
        options
    );
};

export type GetAuthRegisterSpotifyResult = AxiosResponse<void>;
export type GetAuthLoginSpotifyResult = AxiosResponse<void>;
export type GetResult = AxiosResponse<Get200>;
export type GetArtistsArtistMusixMatchIdResult =
    AxiosResponse<GetArtistsArtistMusixMatchId200>;
export type GetArtistsArtistNameResult = AxiosResponse<
    GetArtistsArtistName200Item[]
>;
export type GetArtistsSearchResult = AxiosResponse<GetArtistsSearch200Item[]>;
export type GetLeaderboardsResult = AxiosResponse<GetLeaderboards200>;
export type GetDebugSnapshotResult = AxiosResponse<GetDebugSnapshot200>;
export type PutDebugSnapshotResult = AxiosResponse<PutDebugSnapshot200>;
export type GetLyricsTrackMusixMatchIdResult =
    AxiosResponse<GetLyricsTrackMusixMatchId200>;
export type GetPublicIconsFilenameResult = AxiosResponse<Blob>;
export type GetPublicIconsResult = AxiosResponse<GetPublicIcons200Item[]>;
export type GetUsersUserIdResult = AxiosResponse<GetUsersUserId200>;
export type GetUsersSearchResult = AxiosResponse<GetUsersSearch200>;
export type GetUsersCheckResult = AxiosResponse<GetUsersCheck200>;
export type PostAuthLoginResult = AxiosResponse<PostAuthLogin200>;
export type PostAuthRegisterResult = AxiosResponse<PostAuthRegister200>;
export type GetDebugFakeUserResult = AxiosResponse<GetDebugFakeUser200>;
export type PostDebugFakeUsersResult = AxiosResponse<
    PostDebugFakeUsers201Item[]
>;
export type GetAuthLoginSpotifyCallbackResult = AxiosResponse<unknown>;
export type GetAuthRegisterSpotifyCallbackResult = AxiosResponse<unknown>;
export type GetUsersSelfSelfIdResult = AxiosResponse<GetUsersSelfSelfId200>;
export type PutUsersSelfSelfIdResult = AxiosResponse<PutUsersSelfSelfId200>;
export type DeleteUsersSelfSelfIdResult =
    AxiosResponse<DeleteUsersSelfSelfId200>;
export type GetUsersSelfSelfIdConfigsResult = AxiosResponse<
    GetUsersSelfSelfIdConfigs200Item[]
>;
export type PostUsersSelfSelfIdConfigsResult =
    AxiosResponse<PostUsersSelfSelfIdConfigs200>;
export type DeleteUsersSelfSelfIdConfigsMelodleConfigIdResult =
    AxiosResponse<DeleteUsersSelfSelfIdConfigsMelodleConfigId200>;
export type PutUsersSelfSelfIdConfigsMelodleConfigIdResult =
    AxiosResponse<PutUsersSelfSelfIdConfigsMelodleConfigId200>;
export type GetUsersSelfSelfIdConfigsSuggestResult = AxiosResponse<
    GetUsersSelfSelfIdConfigsSuggest200Item[]
>;
export type GetUsersSelfSelfIdFriendsResult = AxiosResponse<
    GetUsersSelfSelfIdFriends200Item[]
>;
export type PostUsersSelfSelfIdMelodleResult =
    AxiosResponse<PostUsersSelfSelfIdMelodle200>;
export type GetUsersSelfSelfIdMelodleHistoryResult = AxiosResponse<
    GetUsersSelfSelfIdMelodleHistory200Item[]
>;
export type PutUsersSelfSelfIdArtistsArtistMusixMatchIdFavoriteResult =
    AxiosResponse<PutUsersSelfSelfIdArtistsArtistMusixMatchIdFavorite200>;
export type PostUsersSelfSelfIdBlocksTargetUserIdResult =
    AxiosResponse<PostUsersSelfSelfIdBlocksTargetUserId201>;
export type DeleteUsersSelfSelfIdBlocksTargetUserIdResult =
    AxiosResponse<DeleteUsersSelfSelfIdBlocksTargetUserId200>;
export type DeleteUsersSelfSelfIdFriendsTargetUserIdResult =
    AxiosResponse<DeleteUsersSelfSelfIdFriendsTargetUserId204>;
export type PostUsersSelfSelfIdFriendsTargetUserIdResult =
    AxiosResponse<PostUsersSelfSelfIdFriendsTargetUserId201>;
export type PutUsersSelfSelfIdFriendsTargetUserIdResult =
    AxiosResponse<PutUsersSelfSelfIdFriendsTargetUserId200>;
export type GetUsersSelfSelfIdFriendsLeaderboardsResult =
    AxiosResponse<GetUsersSelfSelfIdFriendsLeaderboards200>;
export type GetUsersSelfSelfIdMelodleGameIdResult =
    AxiosResponse<GetUsersSelfSelfIdMelodleGameId200>;
export type PostUsersSelfSelfIdMelodleGameIdGuessLineAttemptsResult =
    AxiosResponse<PostUsersSelfSelfIdMelodleGameIdGuessLineAttempts200>;
export type PostUsersSelfSelfIdMelodleGameIdGuessSongAttemptsResult =
    AxiosResponse<PostUsersSelfSelfIdMelodleGameIdGuessSongAttempts200>;
